CREATE DATABASE  IF NOT EXISTS `__database_name__` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `__database_name__`;
-- MySQL dump 10.13  Distrib 8.0.29, for Win64 (x86_64)
--
-- Host: 178.16.138.169    Database: __database_name__
-- ------------------------------------------------------
-- Server version	8.0.35

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `KafkaServiceName`
--

DROP TABLE IF EXISTS `KafkaServiceName`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `KafkaServiceName` (
  `KafkaServiceNameId` int DEFAULT NULL,
  `KafkaService` varchar(75) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `a`
--

DROP TABLE IF EXISTS `a`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `a` (
  `aa` varchar(64) NOT NULL,
  `ab` varchar(50) NOT NULL,
  `ac` varchar(100) NOT NULL,
  `ad` varchar(14) NOT NULL,
  PRIMARY KEY (`aa`),
  UNIQUE KEY `UQ__A__3213A92835F005F0` (`ad`),
  UNIQUE KEY `UQ__A__3213A92896E57B0F` (`ad`),
  UNIQUE KEY `UQ__A__3213A929D10F6EC5` (`ac`),
  UNIQUE KEY `UQ__A__3213A929D5831267` (`ac`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accessibility_description`
--

DROP TABLE IF EXISTS `accessibility_description`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `accessibility_description` (
  `AccessibilityId` int NOT NULL AUTO_INCREMENT,
  `Description` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`AccessibilityId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accesslevel`
--

DROP TABLE IF EXISTS `accesslevel`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `accesslevel` (
  `AccessLevelId` bigint NOT NULL AUTO_INCREMENT,
  `RoleName` varchar(50) DEFAULT NULL,
  `AccessCodeDefination` varchar(250) DEFAULT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`AccessLevelId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `adhoc_detail`
--

DROP TABLE IF EXISTS `adhoc_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `adhoc_detail` (
  `AdHocId` int NOT NULL AUTO_INCREMENT,
  `Name` varchar(100) DEFAULT NULL,
  `Description` varchar(250) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  PRIMARY KEY (`AdHocId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `annexure_offer_letter`
--

DROP TABLE IF EXISTS `annexure_offer_letter`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `annexure_offer_letter` (
  `AnnexureOfferLetterId` int NOT NULL AUTO_INCREMENT,
  `CompanyId` int DEFAULT NULL,
  `TemplateName` varchar(145) DEFAULT NULL,
  `FilePath` varchar(500) DEFAULT NULL,
  `FileId` int DEFAULT NULL,
  `LetterType` int DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`AnnexureOfferLetterId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `application_setting`
--

DROP TABLE IF EXISTS `application_setting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `application_setting` (
  `ApplicationSettingId` int NOT NULL DEFAULT '0',
  `OrganizationId` int DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `SettingsCatagoryId` int DEFAULT NULL,
  `SettingDetails` text,
  PRIMARY KEY (`ApplicationSettingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `appraisal_chain_level`
--

DROP TABLE IF EXISTS `appraisal_chain_level`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `appraisal_chain_level` (
  `AppraisalChainLevelId` int NOT NULL,
  `ObjectiveCatagoryId` int DEFAULT NULL,
  `RoleId` int DEFAULT NULL,
  `ApprovalRoleId` int DEFAULT NULL,
  `IsActive` tinyint(1) DEFAULT NULL,
  `IsOptional` bit(1) DEFAULT b'0',
  PRIMARY KEY (`AppraisalChainLevelId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `appraisal_detail`
--

DROP TABLE IF EXISTS `appraisal_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `appraisal_detail` (
  `AppraisalDetailId` int NOT NULL,
  `AppraisalName` varchar(100) DEFAULT NULL,
  `ObjectiveCatagoryId` json DEFAULT NULL,
  `AppraisalCycleStartDate` datetime NOT NULL,
  `AppraisalCycleEndDate` datetime DEFAULT NULL,
  `StartedBy` bigint DEFAULT NULL,
  `StartedOn` datetime DEFAULT NULL,
  `IsSelfAppraisal` bit(1) DEFAULT b'0',
  `IsRequiredRatersFeedback` bit(1) DEFAULT b'0',
  `IsRaterSelectedByManager` bit(1) DEFAULT b'0',
  `RatersRequired` int DEFAULT '0',
  `CanRaterViewAppraisal` bit(1) DEFAULT b'0',
  `IsActiveCycle` bit(1) DEFAULT NULL,
  `MultiraterFeedBackStartDate` datetime NOT NULL,
  `MultiraterFeedBackEndDate` datetime NOT NULL,
  `ReviewStartDate` datetime NOT NULL,
  `ReviewEndDate` datetime NOT NULL,
  `SelfAppraisalStartDate` datetime NOT NULL,
  `SelfAppraisalEndDate` datetime NOT NULL,
  `SelectionPeriodStartDate` datetime NOT NULL,
  `SelectionPeriodEndDate` datetime NOT NULL,
  PRIMARY KEY (`AppraisalDetailId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `appraisal_review_detail`
--

DROP TABLE IF EXISTS `appraisal_review_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `appraisal_review_detail` (
  `AppraisalReviewId` bigint NOT NULL,
  `AppraisalDetailId` int DEFAULT NULL,
  `EmployeeId` bigint DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `ProjectId` int DEFAULT NULL,
  `PreviousSalary` decimal(12,2) DEFAULT NULL,
  `EstimatedSalary` decimal(12,2) DEFAULT NULL,
  `HikePercentage` decimal(12,2) DEFAULT NULL,
  `HikeAmount` decimal(12,2) DEFAULT NULL,
  `Comments` varchar(500) DEFAULT NULL,
  `Rating` decimal(12,2) DEFAULT '0.00',
  `PromotedDesignation` int DEFAULT NULL,
  `AppraisalCycleStartDate` datetime DEFAULT NULL,
  PRIMARY KEY (`AppraisalReviewId`),
  KEY `fk_appraisal_review_detail_AppraisalDetailId` (`AppraisalDetailId`),
  KEY `fk_appraisal_review_detail_EmployeeId` (`EmployeeId`),
  CONSTRAINT `fk_appraisal_review_detail_AppraisalDetailId` FOREIGN KEY (`AppraisalDetailId`) REFERENCES `appraisal_detail` (`AppraisalDetailId`),
  CONSTRAINT `fk_appraisal_review_detail_EmployeeId` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`EmployeeUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `appraisal_review_finalizer_status`
--

DROP TABLE IF EXISTS `appraisal_review_finalizer_status`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `appraisal_review_finalizer_status` (
  `AppraisalFinalizer` int NOT NULL,
  `AppraisalReviewId` bigint DEFAULT NULL,
  `ReviwerId` bigint DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `Status` int DEFAULT NULL,
  `ReactedOn` datetime DEFAULT NULL,
  `FullName` varchar(100) DEFAULT NULL,
  `IsActionRequired` bit(1) DEFAULT NULL,
  `ApprovalLevel` int DEFAULT NULL,
  PRIMARY KEY (`AppraisalFinalizer`),
  KEY `fk_appraisal_review_finalizer_status_AppraisalReviewId` (`AppraisalReviewId`),
  CONSTRAINT `appraisal_review_finalizer_status_ibfk_1` FOREIGN KEY (`AppraisalReviewId`) REFERENCES `appraisal_review_detail` (`AppraisalReviewId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `approval_chain_detail`
--

DROP TABLE IF EXISTS `approval_chain_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `approval_chain_detail` (
  `ApprovalChainDetailId` int NOT NULL,
  `ApprovalWorkFlowId` int DEFAULT NULL,
  `AssignieId` bigint DEFAULT NULL,
  `IsRequired` bit(1) DEFAULT NULL,
  `LastUpdatedOn` datetime DEFAULT NULL,
  `ApprovalStatus` int DEFAULT NULL,
  PRIMARY KEY (`ApprovalChainDetailId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `approval_work_flow`
--

DROP TABLE IF EXISTS `approval_work_flow`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `approval_work_flow` (
  `ApprovalWorkFlowId` int NOT NULL,
  `Title` varchar(50) NOT NULL,
  `TitleDescription` varchar(500) DEFAULT NULL,
  `Status` int DEFAULT NULL,
  `IsAutoExpiredEnabled` bit(1) DEFAULT NULL,
  `AutoExpireAfterDays` int DEFAULT NULL,
  `NoOfApprovalLevel` int DEFAULT '0',
  `IsSilentListner` bit(1) DEFAULT NULL,
  `ListnerDetail` json DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ApprovalWorkFlowId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `athleteevents`
--

DROP TABLE IF EXISTS `athleteevents`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `athleteevents` (
  `RowIndex` double DEFAULT NULL,
  `Name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Sex` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Age` double DEFAULT NULL,
  `Height` double DEFAULT NULL,
  `Weight` double DEFAULT NULL,
  `Team` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `NOC` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Games` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Year` double DEFAULT NULL,
  `Season` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `City` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Sport` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Event` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Medal` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `attendance`
--

DROP TABLE IF EXISTS `attendance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `attendance` (
  `AttendanceId` bigint NOT NULL AUTO_INCREMENT,
  `EmployeeId` bigint DEFAULT NULL,
  `UserTypeId` int DEFAULT NULL,
  `AttendanceDetail` json DEFAULT NULL,
  `TotalDays` int DEFAULT NULL,
  `TotalWeekDays` int DEFAULT NULL,
  `DaysPending` int DEFAULT NULL,
  `TotalBurnedMinutes` int DEFAULT '0',
  `ForYear` int NOT NULL,
  `ForMonth` int NOT NULL,
  `SubmittedOn` datetime NOT NULL,
  `UpdatedOn` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `SubmittedBy` bigint NOT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `PendingRequestCount` int DEFAULT '0',
  `EmployeeName` varchar(100) DEFAULT NULL,
  `Email` varchar(50) NOT NULL,
  `Mobile` varchar(20) DEFAULT NULL,
  `ReportingManagerId` bigint DEFAULT '0',
  `ManagerName` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`AttendanceId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `attendance_setting`
--

DROP TABLE IF EXISTS `attendance_setting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `attendance_setting` (
  `AttendanceSettingId` int NOT NULL,
  `CompanyId` int DEFAULT NULL,
  `BackDateLimitToApply` int DEFAULT NULL,
  `IsAutoApproved` bit(1) DEFAULT NULL,
  `LastDateOfAttendanceCheck` int DEFAULT NULL,
  PRIMARY KEY (`AttendanceSettingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `attendance_years`
--

DROP TABLE IF EXISTS `attendance_years`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `attendance_years` (
  `AttendanceYear` int NOT NULL,
  PRIMARY KEY (`AttendanceYear`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `b`
--

DROP TABLE IF EXISTS `b`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `b` (
  `ba` varchar(64) NOT NULL,
  `bb` varchar(50) NOT NULL,
  PRIMARY KEY (`ba`),
  CONSTRAINT `FK_B_ba_C_ca` FOREIGN KEY (`ba`) REFERENCES `c` (`ca`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `bank_accounts`
--

DROP TABLE IF EXISTS `bank_accounts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `bank_accounts` (
  `BankAccountId` int NOT NULL AUTO_INCREMENT,
  `OrganizationId` int DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `BankName` varchar(100) DEFAULT NULL,
  `BranchCode` varchar(20) DEFAULT NULL,
  `Branch` varchar(50) DEFAULT NULL,
  `IFSC` varchar(20) DEFAULT NULL,
  `AccountNo` varchar(45) DEFAULT NULL,
  `OpeningDate` datetime DEFAULT NULL,
  `ClosingDate` datetime DEFAULT NULL,
  `IsPrimaryAccount` bit(1) DEFAULT b'0',
  `CreatedBy` bigint NOT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`BankAccountId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `billdetail`
--

DROP TABLE IF EXISTS `billdetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `billdetail` (
  `BillDetailUid` bigint NOT NULL AUTO_INCREMENT,
  `PaidAmount` decimal(10,0) DEFAULT NULL,
  `BillForMonth` int DEFAULT NULL,
  `BillYear` int DEFAULT NULL,
  `NoOfDays` int DEFAULT NULL,
  `NoOfDaysAbsent` decimal(10,0) DEFAULT NULL,
  `IGST` int DEFAULT NULL,
  `SGST` int DEFAULT NULL,
  `CGST` int DEFAULT NULL,
  `TDS` int DEFAULT NULL,
  `BillStatusId` bigint NOT NULL,
  `PaidOn` datetime(6) DEFAULT NULL,
  `FileDetailId` bigint NOT NULL,
  `EmployeeUid` bigint DEFAULT NULL,
  `ClientId` bigint NOT NULL,
  `BillNo` varchar(45) NOT NULL,
  `UpdateSeqNo` int NOT NULL DEFAULT '0',
  `CreatedBy` bigint NOT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime(6) NOT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `BillUpdatedOn` datetime NOT NULL,
  `IsCustomBill` bit(1) NOT NULL DEFAULT b'0',
  PRIMARY KEY (`BillDetailUid`),
  KEY `fk_BillDetail_Createdby` (`CreatedBy`),
  KEY `fk_BillDetail_UpdatedBy` (`UpdatedBy`),
  KEY `fk_EmployeePayroll_EmployeeUid_idx` (`EmployeeUid`),
  KEY `fk_billdetail_FileDetailId_idx` (`FileDetailId`),
  CONSTRAINT `fk_billdetail_FileDetailId` FOREIGN KEY (`FileDetailId`) REFERENCES `filedetail` (`FileId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `bills`
--

DROP TABLE IF EXISTS `bills`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `bills` (
  `BillUid` bigint NOT NULL,
  `InitBillNo` int DEFAULT NULL,
  `LastBillNo` int DEFAULT NULL,
  `BillNoLength` int DEFAULT NULL,
  `BillTypeUid` bigint DEFAULT NULL,
  PRIMARY KEY (`BillUid`),
  KEY `fk_Bills_BillTypeUid` (`BillTypeUid`),
  CONSTRAINT `fk_Bills_BillTypeUid` FOREIGN KEY (`BillTypeUid`) REFERENCES `billtype` (`BillTypeUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `billtype`
--

DROP TABLE IF EXISTS `billtype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `billtype` (
  `BillTypeUid` bigint NOT NULL,
  `BillDescription` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`BillTypeUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `bonus_shift_overtime`
--

DROP TABLE IF EXISTS `bonus_shift_overtime`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `bonus_shift_overtime` (
  `BonusShiftOvertimeId` bigint NOT NULL,
  `EmployeeId` bigint DEFAULT NULL,
  `IsBonus` bit(1) DEFAULT NULL,
  `IsShift` bit(1) DEFAULT NULL,
  `IsOvertime` bit(1) DEFAULT NULL,
  `ForYear` int DEFAULT NULL,
  `ForMonth` int DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `OrganizationId` int DEFAULT NULL,
  `ComponentId` varchar(20) DEFAULT NULL,
  `Amount` decimal(10,0) DEFAULT NULL,
  `Comments` varchar(500) DEFAULT NULL,
  `Status` int DEFAULT NULL,
  `TotalMinutes` int DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`BonusShiftOvertimeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `books`
--

DROP TABLE IF EXISTS `books`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `books` (
  `RowIndex` double DEFAULT NULL,
  `Title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Authors` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `AverageRating` double DEFAULT NULL,
  `ISBN` double DEFAULT NULL,
  `ISBN13` double DEFAULT NULL,
  `LanguageCode` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `PageNum` double DEFAULT NULL,
  `RatingsCount` double DEFAULT NULL,
  `TextReviewsCount` double DEFAULT NULL,
  `F11` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `c`
--

DROP TABLE IF EXISTS `c`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `c` (
  `ca` varchar(64) NOT NULL,
  `cb` varchar(50) NOT NULL,
  PRIMARY KEY (`ca`),
  CONSTRAINT `FK_C_ca_D_da` FOREIGN KEY (`ca`) REFERENCES `d` (`da`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `candidatefiledetail`
--

DROP TABLE IF EXISTS `candidatefiledetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `candidatefiledetail` (
  `FileId` bigint NOT NULL AUTO_INCREMENT,
  `FileOwnerId` bigint NOT NULL,
  `FilePath` varchar(500) NOT NULL,
  `FileName` varchar(100) NOT NULL,
  `FileExtension` varchar(100) DEFAULT NULL,
  `UserTypeId` int NOT NULL DEFAULT '0',
  `CreatedOn` datetime(6) DEFAULT NULL,
  `UpdatedOn` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`FileId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `candidatelogin`
--

DROP TABLE IF EXISTS `candidatelogin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `candidatelogin` (
  `UserId` bigint NOT NULL AUTO_INCREMENT,
  `AccessLevelId` bigint DEFAULT NULL,
  `FirstName` varchar(100) DEFAULT NULL,
  `LastName` varchar(100) DEFAULT NULL,
  `Password` varchar(50) NOT NULL,
  `Email` varchar(100) NOT NULL,
  `Mobile` varchar(14) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`UserId`),
  UNIQUE KEY `Email` (`Email`),
  UNIQUE KEY `Mobile` (`Mobile`),
  KEY `FK_candidatelogin_AccessLevelId` (`AccessLevelId`),
  CONSTRAINT `FK_candidatelogin_AccessLevelId` FOREIGN KEY (`AccessLevelId`) REFERENCES `accesslevel` (`AccessLevelId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `catagory`
--

DROP TABLE IF EXISTS `catagory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `catagory` (
  `CatagoryId` int NOT NULL,
  `GroupId` int DEFAULT NULL,
  `CatagoryCode` varchar(45) DEFAULT NULL,
  `CatagoryDescription` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`CatagoryId`),
  UNIQUE KEY `CatagoryCode` (`CatagoryCode`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `clients`
--

DROP TABLE IF EXISTS `clients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `clients` (
  `ClientId` bigint NOT NULL AUTO_INCREMENT,
  `CompanyId` int DEFAULT '1',
  `ClientName` varchar(250) DEFAULT NULL,
  `MobileNo` varchar(20) DEFAULT NULL,
  `PrimaryPhoneNo` varchar(20) DEFAULT NULL,
  `SecondaryPhoneNo` varchar(20) DEFAULT NULL,
  `Email` varchar(150) DEFAULT NULL,
  `Fax` varchar(20) DEFAULT NULL,
  `FirstAddress` varchar(100) DEFAULT NULL,
  `SecondAddress` varchar(100) DEFAULT NULL,
  `ThirdAddress` varchar(100) DEFAULT NULL,
  `ForthAddress` varchar(100) DEFAULT NULL,
  `Pincode` int DEFAULT NULL,
  `City` varchar(50) DEFAULT NULL,
  `State` varchar(50) DEFAULT NULL,
  `Country` varchar(50) DEFAULT NULL,
  `GSTNO` varchar(20) DEFAULT NULL,
  `AccountNo` varchar(25) DEFAULT NULL,
  `BankName` varchar(100) DEFAULT NULL,
  `BranchName` varchar(100) DEFAULT NULL,
  `IFSC` varchar(15) DEFAULT NULL,
  `PanNo` varchar(20) DEFAULT NULL,
  `CreatedBy` bigint NOT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `OtherEmail_1` varchar(100) DEFAULT NULL,
  `OtherEmail_2` varchar(100) DEFAULT NULL,
  `OtherEmail_3` varchar(100) DEFAULT NULL,
  `OtherEmail_4` varchar(100) DEFAULT NULL,
  `WorkShiftId` int DEFAULT '0',
  PRIMARY KEY (`ClientId`),
  KEY `fk_Clients_CreatedBy` (`CreatedBy`),
  KEY `fk_Clients_UpdatedBy` (`UpdatedBy`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `company`
--

DROP TABLE IF EXISTS `company`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `company` (
  `CompanyId` int NOT NULL AUTO_INCREMENT,
  `OrganizationId` int NOT NULL,
  `OrganizationName` varchar(250) DEFAULT NULL,
  `CompanyName` varchar(150) DEFAULT NULL,
  `CompanyDetail` varchar(250) DEFAULT NULL,
  `SectorType` int DEFAULT NULL,
  `Country` varchar(50) DEFAULT NULL,
  `State` varchar(100) DEFAULT NULL,
  `City` varchar(100) DEFAULT NULL,
  `FirstAddress` varchar(100) DEFAULT NULL,
  `SecondAddress` varchar(100) DEFAULT NULL,
  `ThirdAddress` varchar(100) DEFAULT NULL,
  `ForthAddress` varchar(100) DEFAULT NULL,
  `FullAddress` varchar(150) DEFAULT NULL,
  `MobileNo` varchar(20) DEFAULT NULL,
  `Email` varchar(50) DEFAULT NULL,
  `FirstEmail` varchar(100) DEFAULT NULL,
  `SecondEmail` varchar(100) DEFAULT NULL,
  `ThirdEmail` varchar(100) DEFAULT NULL,
  `ForthEmail` varchar(100) DEFAULT NULL,
  `PrimaryPhoneNo` varchar(20) DEFAULT NULL,
  `SecondaryPhoneNo` varchar(20) DEFAULT NULL,
  `Fax` varchar(50) DEFAULT NULL,
  `Pincode` int DEFAULT NULL,
  `FileId` bigint DEFAULT NULL,
  `LegalDocumentPath` varchar(250) DEFAULT NULL,
  `LegalEntity` varchar(50) DEFAULT NULL,
  `TypeOfBusiness` varchar(150) DEFAULT NULL,
  `InCorporationDate` datetime DEFAULT NULL,
  `PANNo` varchar(45) DEFAULT NULL,
  `GSTNo` varchar(45) DEFAULT NULL,
  `TradeLicenseNo` varchar(45) DEFAULT NULL,
  `IsPrimaryCompany` bit(1) DEFAULT b'0',
  `FixedComponentsId` json DEFAULT NULL,
  `CreatedBy` bigint NOT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`CompanyId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `company_calendar`
--

DROP TABLE IF EXISTS `company_calendar`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `company_calendar` (
  `CompanyCalendarId` bigint NOT NULL,
  `CompanyId` int DEFAULT NULL,
  `HolidayDate` datetime DEFAULT NULL,
  `EventName` varchar(250) DEFAULT NULL,
  `IsHoliday` bit(1) DEFAULT NULL,
  `IsHalfDay` bit(1) DEFAULT NULL,
  `DescriptionNote` text,
  `ApplicableFor` int DEFAULT NULL,
  `Year` int DEFAULT NULL,
  `IsPublicHoliday` bit(1) DEFAULT NULL,
  `Country` varchar(65) DEFAULT NULL,
  `IsCompanyCustomHoliday` bit(1) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`CompanyCalendarId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `company_files`
--

DROP TABLE IF EXISTS `company_files`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `company_files` (
  `CompanyFileId` int NOT NULL AUTO_INCREMENT,
  `CompanyId` int NOT NULL,
  `FileName` varchar(145) DEFAULT NULL,
  `FileDescription` varchar(500) DEFAULT NULL,
  `FileExtension` varchar(10) DEFAULT NULL,
  `FilePath` text,
  `FileRole` varchar(100) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`CompanyFileId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `company_notification`
--

DROP TABLE IF EXISTS `company_notification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `company_notification` (
  `NotificationId` bigint NOT NULL AUTO_INCREMENT,
  `Topic` varchar(100) DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `BriefDetail` varchar(250) DEFAULT NULL,
  `Departments` json DEFAULT NULL,
  `CompleteDetail` text,
  `StartDate` datetime DEFAULT NULL,
  `EndDate` datetime DEFAULT NULL,
  `IsGeneralAnnouncement` bit(1) DEFAULT NULL,
  `AnnouncementType` int DEFAULT NULL,
  `FileIds` json DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`NotificationId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `company_setting`
--

DROP TABLE IF EXISTS `company_setting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `company_setting` (
  `SettingId` bigint NOT NULL AUTO_INCREMENT,
  `CompanyId` int DEFAULT NULL,
  `ProbationPeriodInDays` int DEFAULT NULL,
  `NoticePeriodInDays` int DEFAULT NULL,
  `NoticePeriodInProbation` int DEFAULT '0',
  `DeclarationStartMonth` int DEFAULT NULL,
  `DeclarationEndMonth` int DEFAULT NULL,
  `FinancialYear` int DEFAULT NULL,
  `ExcludePayrollFromJoinDate` int DEFAULT '0',
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `IsPrimary` bit(1) DEFAULT NULL,
  `AttendanceSubmissionLimit` int DEFAULT NULL,
  `TimezoneName` varchar(100) DEFAULT NULL,
  `LeaveAccrualRunCronDayOfMonth` int DEFAULT NULL,
  `EveryMonthLastDayOfDeclaration` int DEFAULT NULL,
  `IsJoiningBarrierDayPassed` bit(1) DEFAULT b'0',
  `TimeDifferences` varchar(10) DEFAULT '0:00',
  PRIMARY KEY (`SettingId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `complaint_or_request`
--

DROP TABLE IF EXISTS `complaint_or_request`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `complaint_or_request` (
  `ComplaintOrRequestId` int NOT NULL,
  `RequestTypeId` int DEFAULT NULL,
  `TargetId` int DEFAULT '0',
  `TargetOffset` int DEFAULT '0',
  `EmployeeId` bigint DEFAULT '0',
  `EmployeeName` varchar(100) DEFAULT NULL,
  `Email` varchar(50) DEFAULT NULL,
  `Mobile` varchar(20) DEFAULT NULL,
  `ManagerId` bigint DEFAULT '0',
  `ManagerName` varchar(100) DEFAULT NULL,
  `ManagerEmail` varchar(50) DEFAULT NULL,
  `ManagerMobile` varchar(20) DEFAULT NULL,
  `EmployeeMessage` text,
  `ManagerComments` text,
  `CurrentStatus` int DEFAULT NULL,
  `RequestedOn` datetime DEFAULT NULL,
  `AttendanceDate` datetime DEFAULT NULL,
  `LeaveFromDate` datetime DEFAULT NULL,
  `LeaveToDate` datetime DEFAULT NULL,
  `Notify` json DEFAULT NULL,
  `ExecutedByManager` bit(1) DEFAULT NULL,
  `ExecuterId` bigint DEFAULT NULL,
  `ExecuterName` varchar(100) DEFAULT NULL,
  `ExecuterEmail` varchar(50) DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ComplaintOrRequestId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `component_type`
--

DROP TABLE IF EXISTS `component_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `component_type` (
  `ComponentTypeId` int NOT NULL AUTO_INCREMENT,
  `ComponentDescription` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`ComponentTypeId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `countries`
--

DROP TABLE IF EXISTS `countries`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `countries` (
  `CountryName` varchar(100) NOT NULL,
  `Code` varchar(10) NOT NULL,
  `PhoneCode` varchar(5) NOT NULL,
  `Area` bigint NOT NULL,
  `RowIndex` int NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `d`
--

DROP TABLE IF EXISTS `d`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `d` (
  `da` varchar(64) NOT NULL,
  `db` int NOT NULL,
  `dc` double NOT NULL,
  PRIMARY KEY (`da`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `daily_attendance`
--

DROP TABLE IF EXISTS `daily_attendance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `daily_attendance` (
  `AttendanceId` bigint NOT NULL,
  `EmployeeId` bigint DEFAULT NULL,
  `EmployeeName` varchar(100) DEFAULT NULL,
  `EmployeeEmail` varchar(100) DEFAULT NULL,
  `ReviewerId` bigint DEFAULT NULL,
  `ReviewerName` varchar(100) DEFAULT NULL,
  `ReviewerEmail` varchar(100) DEFAULT NULL,
  `ProjectId` int DEFAULT NULL,
  `TaskId` int DEFAULT NULL,
  `TaskType` int DEFAULT NULL,
  `LogOn` varchar(10) DEFAULT NULL,
  `LogOff` varchar(10) DEFAULT NULL,
  `TotalMinutes` int DEFAULT NULL,
  `Comments` json DEFAULT NULL,
  `AttendanceStatus` int DEFAULT NULL,
  `WeekOfYear` int DEFAULT NULL,
  `AttendanceDate` datetime NOT NULL,
  `WorkTypeId` int DEFAULT NULL,
  `IsOnLeave` bit(1) DEFAULT NULL,
  `LeaveId` int DEFAULT NULL,
  `CreatedBy` bigint NOT NULL,
  `CreatedOn` datetime NOT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`AttendanceId`,`AttendanceDate`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
/*!50100 PARTITION BY RANGE (year(`AttendanceDate`))
(PARTITION p2023 VALUES LESS THAN (2024) ENGINE = InnoDB,
 PARTITION p2024 VALUES LESS THAN (2025) ENGINE = InnoDB,
 PARTITION p2025 VALUES LESS THAN (2026) ENGINE = InnoDB) */;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `deductions_detail`
--

DROP TABLE IF EXISTS `deductions_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `deductions_detail` (
  `DeductionId` int NOT NULL AUTO_INCREMENT,
  `DeductionDescription` varchar(100) DEFAULT NULL,
  `IsPaidByEmployee` bit(1) DEFAULT NULL,
  `IsPaidByEmployeer` bit(1) DEFAULT NULL,
  `IsMandatory` bit(1) DEFAULT NULL,
  `IsFixedAmount` bit(1) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  PRIMARY KEY (`DeductionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `department`
--

DROP TABLE IF EXISTS `department`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `department` (
  `DepartmentId` int NOT NULL AUTO_INCREMENT,
  `DepartmentName` varchar(50) DEFAULT NULL,
  `DepartmentDesc` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`DepartmentId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `designation_detail`
--

DROP TABLE IF EXISTS `designation_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `designation_detail` (
  `DesignationId` int NOT NULL AUTO_INCREMENT,
  `DesignationName` varchar(150) NOT NULL,
  `RoleDescription` text,
  `CompanyId` int DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DesignationId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `documents`
--

DROP TABLE IF EXISTS `documents`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `documents` (
  `DocumentId` bigint NOT NULL AUTO_INCREMENT,
  `UserId` bigint DEFAULT NULL,
  `Title` varchar(250) NOT NULL,
  `Description` longtext,
  `FilePath` varchar(250) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`DocumentId`),
  KEY `fk_onoinedocument_UserId` (`UserId`),
  CONSTRAINT `fk_documents_UserId` FOREIGN KEY (`UserId`) REFERENCES `userdetail` (`UserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `dynamicqueryclouses`
--

DROP TABLE IF EXISTS `dynamicqueryclouses`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dynamicqueryclouses` (
  `TableIndex` int NOT NULL,
  `TableName` varchar(50) NOT NULL,
  `OrderByClouse` varchar(500) NOT NULL,
  `ColumnNames` longtext,
  PRIMARY KEY (`TableIndex`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `dynamictablequery`
--

DROP TABLE IF EXISTS `dynamictablequery`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `dynamictablequery` (
  `TableIndex` int NOT NULL,
  `TableName` varchar(50) NOT NULL,
  `OrderByClouse` varchar(500) NOT NULL,
  PRIMARY KEY (`TableIndex`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `email_link_config`
--

DROP TABLE IF EXISTS `email_link_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `email_link_config` (
  `EmailTemplateId` int DEFAULT NULL,
  `TemplateName` varchar(145) DEFAULT NULL,
  `PageName` varchar(50) DEFAULT NULL,
  `PageDescription` varchar(150) DEFAULT NULL,
  `IsEmailGroupUsed` bit(1) DEFAULT NULL,
  `EmailGroupId` int DEFAULT NULL,
  `IsTriggeredAutomatically` bit(1) DEFAULT NULL,
  `EmailsJson` json DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `email_mapped_template`
--

DROP TABLE IF EXISTS `email_mapped_template`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `email_mapped_template` (
  `EmailTempMappingId` int NOT NULL AUTO_INCREMENT,
  `CompanyId` int NOT NULL,
  `EmailTemplateName` varchar(145) NOT NULL,
  `TemplateId` int NOT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`EmailTempMappingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_archive`
--

DROP TABLE IF EXISTS `employee_archive`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_archive` (
  `EmployeeId` bigint NOT NULL,
  `FullName` varchar(150) DEFAULT NULL,
  `Mobile` varchar(20) DEFAULT NULL,
  `Email` varchar(45) DEFAULT NULL,
  `Package` decimal(10,0) DEFAULT NULL,
  `DateOfJoining` datetime DEFAULT NULL,
  `DateOfLeaving` datetime DEFAULT NULL,
  `EmployeeCompleteJsonData` json NOT NULL,
  `CreatedBy` mediumtext,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_brakup_detail`
--

DROP TABLE IF EXISTS `employee_brakup_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_brakup_detail` (
  `EmployeeId` bigint NOT NULL,
  `BreakUpDetail` json DEFAULT NULL,
  `BreakUpHeaderCount` int DEFAULT NULL,
  `DeductionDetail` json DEFAULT NULL,
  `DeductionHeaderCount` int DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeeId`),
  CONSTRAINT `fk_employee_breakup_detail_EmployeeId` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`EmployeeUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_declaration`
--

DROP TABLE IF EXISTS `employee_declaration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_declaration` (
  `EmployeeDeclarationId` bigint NOT NULL AUTO_INCREMENT,
  `EmployeeId` bigint DEFAULT NULL,
  `DocumentPath` varchar(250) DEFAULT NULL,
  `DeclarationDetail` text,
  `HouseRentDetail` json DEFAULT NULL,
  `TotalDeclaredAmount` decimal(10,0) DEFAULT NULL,
  `TotalApprovedAmount` decimal(10,0) DEFAULT NULL,
  `TotalRejectedAmount` decimal(10,0) DEFAULT '0',
  `EmployeeCurrentRegime` int DEFAULT '0',
  `DeclarationStartMonth` int DEFAULT '0',
  `DeclarationEndMonth` int DEFAULT '0',
  `DeclarationFromYear` int DEFAULT '0',
  `DeclarationToYear` int DEFAULT '0',
  PRIMARY KEY (`EmployeeDeclarationId`),
  UNIQUE KEY `EmployeeId` (`EmployeeId`),
  CONSTRAINT `fk_employee_declaration_EmployeeId` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`EmployeeUid`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_leave_payroll_and_otherdetail`
--

DROP TABLE IF EXISTS `employee_leave_payroll_and_otherdetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_leave_payroll_and_otherdetail` (
  `EmployeeId` bigint NOT NULL,
  `LeaveTypeBriefJson` json DEFAULT NULL,
  `AccrualRunDay` int DEFAULT NULL,
  `NextAccrualRunDate` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeeId`),
  CONSTRAINT `fk_employee_leave_payroll_and_otherdetail_EmployeeId` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`EmployeeUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_leave_request`
--

DROP TABLE IF EXISTS `employee_leave_request`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_leave_request` (
  `LeaveRequestId` bigint NOT NULL AUTO_INCREMENT,
  `EmployeeId` bigint DEFAULT NULL,
  `LeaveDetail` json DEFAULT NULL,
  `Year` int DEFAULT NULL,
  `IsPending` bit(1) DEFAULT b'0',
  `AvailableLeaves` decimal(10,0) DEFAULT '0',
  `TotalLeaveApplied` decimal(10,0) DEFAULT '0',
  `TotalApprovedLeave` decimal(10,0) DEFAULT '0',
  `TotalLeaveQuota` decimal(10,0) DEFAULT '0',
  `LeaveQuotaDetail` json DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`LeaveRequestId`),
  KEY `fk_employee_leave_request_EmployeeId_idx` (`EmployeeId`),
  CONSTRAINT `fk_employee_leave_request_EmployeeId` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`EmployeeUid`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_meeting`
--

DROP TABLE IF EXISTS `employee_meeting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_meeting` (
  `MeetingId` bigint NOT NULL,
  `StartTime` varchar(10) DEFAULT NULL,
  `EndTime` varchar(10) DEFAULT NULL,
  `MeetingDate` datetime DEFAULT NULL,
  `MeetingTitle` varchar(100) DEFAULT NULL,
  `OneToOneEmpMeeting` json DEFAULT NULL,
  `MeetingPlaforms` int DEFAULT NULL,
  `MeetingFrequency` int DEFAULT NULL,
  `TalkingPoints` json DEFAULT NULL,
  `Status` int DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`MeetingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_notice_period`
--

DROP TABLE IF EXISTS `employee_notice_period`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_notice_period` (
  `EmployeeNoticePeriodId` bigint NOT NULL AUTO_INCREMENT,
  `EmployeeId` bigint DEFAULT NULL,
  `IsDiscussWithManager` bit(1) DEFAULT NULL,
  `IsDiscussWithEmployee` bit(1) DEFAULT b'0',
  `IsEmpResign` bit(1) DEFAULT b'1',
  `IsRecommendLastDay` bit(1) DEFAULT b'0',
  `IsRehire` bit(1) DEFAULT b'0',
  `ResignationStatus` int DEFAULT '0',
  `ApprovedOn` datetime DEFAULT NULL,
  `ApplicableFrom` datetime DEFAULT NULL,
  `ApproverManagerId` int DEFAULT NULL,
  `ManagerDescription` varchar(500) DEFAULT NULL,
  `AttachmentPath` varchar(200) DEFAULT NULL,
  `EmailTitle` varchar(100) DEFAULT NULL,
  `OtherApproverManagerIds` json DEFAULT NULL,
  `ITClearanceStatus` int DEFAULT NULL,
  `ReportingManagerClearanceStatus` int DEFAULT NULL,
  `CanteenClearanceStatus` int DEFAULT NULL,
  `ClientClearanceStatus` int DEFAULT NULL,
  `HRClearanceStatus` int DEFAULT NULL,
  `OfficialLastWorkingDay` datetime DEFAULT NULL,
  `PeriodDuration` int DEFAULT NULL,
  `EarlyLeaveStatus` int DEFAULT NULL,
  `EmployeeComment` varchar(500) DEFAULT NULL,
  `EmployeeReason` varchar(50) DEFAULT NULL,
  `Summary` varchar(200) DEFAULT NULL,
  `ManagerComment` varchar(500) DEFAULT NULL,
  `IsAbsconded` bit(1) DEFAULT NULL,
  `IsExited` bit(1) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeeNoticePeriodId`),
  UNIQUE KEY `EmployeeId` (`EmployeeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_notice_period_desc`
--

DROP TABLE IF EXISTS `employee_notice_period_desc`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_notice_period_desc` (
  `StatusId` bigint NOT NULL AUTO_INCREMENT,
  `Status` varchar(50) DEFAULT NULL,
  `StatusDecription` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`StatusId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_notification`
--

DROP TABLE IF EXISTS `employee_notification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_notification` (
  `NotificationId` int NOT NULL,
  `Message` varchar(500) DEFAULT NULL,
  `UserId` bigint DEFAULT NULL,
  `UserTypeId` int DEFAULT NULL,
  `RequestedOn` datetime DEFAULT NULL,
  `UserName` varchar(100) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `Mobile` varchar(14) DEFAULT NULL,
  `AssigneeId` bigint DEFAULT NULL,
  `Status` int DEFAULT NULL,
  `ActionTakenOn` datetime DEFAULT NULL,
  `RequestTypeId` int DEFAULT NULL,
  PRIMARY KEY (`NotificationId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_performance`
--

DROP TABLE IF EXISTS `employee_performance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_performance` (
  `EmployeePerformanceId` bigint NOT NULL,
  `AppraisalDetailId` int DEFAULT NULL,
  `ProjectId` int NOT NULL,
  `ObjectiveId` bigint DEFAULT NULL,
  `EmployeeId` bigint DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `CurrentValue` decimal(10,0) DEFAULT NULL,
  `Status` int DEFAULT NULL,
  `Comments` varchar(500) DEFAULT NULL,
  `PerformanceDetail` json DEFAULT NULL,
  `Rating` decimal(10,0) DEFAULT NULL,
  `PerformanceStatus` int DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeePerformanceId`),
  KEY `fk_employee_performance_EmployeeId` (`EmployeeId`),
  CONSTRAINT `fk_employee_performance_EmployeeId` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`EmployeeUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_pf_detail`
--

DROP TABLE IF EXISTS `employee_pf_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_pf_detail` (
  `EmployeePfDetailId` bigint NOT NULL,
  `EmployeeId` bigint NOT NULL,
  `PFNumber` varchar(30) DEFAULT NULL,
  `UniversalAccountNumber` varchar(40) DEFAULT NULL,
  `PFJoinDate` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeeId`),
  CONSTRAINT `employee_pf_detail_ibfk_1` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`EmployeeUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_roles`
--

DROP TABLE IF EXISTS `employee_roles`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_roles` (
  `RoleId` int NOT NULL AUTO_INCREMENT,
  `RoleName` varchar(50) DEFAULT NULL,
  `Description` varchar(250) DEFAULT NULL,
  `AccessCode` int DEFAULT NULL,
  `DepartmentId` int DEFAULT NULL,
  PRIMARY KEY (`RoleId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_salary_detail`
--

DROP TABLE IF EXISTS `employee_salary_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_salary_detail` (
  `SalaryDetailId` int NOT NULL,
  `EmployeeId` bigint NOT NULL,
  `CTC` decimal(10,0) DEFAULT NULL,
  `GrossIncome` decimal(10,0) DEFAULT NULL,
  `NetSalary` decimal(10,0) DEFAULT NULL,
  `CompleteSalaryDetail` json DEFAULT NULL,
  `NewSalaryDetail` json DEFAULT NULL,
  `GroupId` int DEFAULT '0',
  `TaxDetail` json DEFAULT NULL,
  `FinancialStartYear` int DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`SalaryDetailId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employee_timesheet`
--

DROP TABLE IF EXISTS `employee_timesheet`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employee_timesheet` (
  `TimesheetId` bigint NOT NULL,
  `EmployeeId` bigint DEFAULT NULL,
  `ClientId` bigint DEFAULT NULL,
  `TimesheetWeeklyJson` json DEFAULT NULL,
  `ExpectedBurnedMinutes` int DEFAULT '0',
  `ActualBurnedMinutes` int DEFAULT '0',
  `TotalWeekDays` int NOT NULL,
  `TotalWorkingDays` int NOT NULL,
  `TimesheetStatus` int NOT NULL,
  `TimesheetStartDate` datetime DEFAULT NULL,
  `TimesheetEndDate` datetime DEFAULT NULL,
  `UserComments` varchar(500) DEFAULT NULL,
  `ForYear` int DEFAULT NULL,
  `SubmittedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `SubmittedBy` bigint NOT NULL,
  `ExecutedBy` bigint DEFAULT NULL,
  `IsSaved` bit(1) DEFAULT b'0',
  `IsSubmitted` bit(1) DEFAULT b'0',
  PRIMARY KEY (`TimesheetId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employeebilldocuments`
--

DROP TABLE IF EXISTS `employeebilldocuments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeebilldocuments` (
  `EmployeeBillDocumentUid` bigint NOT NULL,
  `BillNo` varchar(25) DEFAULT NULL,
  PRIMARY KEY (`EmployeeBillDocumentUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employeelogin`
--

DROP TABLE IF EXISTS `employeelogin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeelogin` (
  `EmployeeLoginId` bigint NOT NULL AUTO_INCREMENT,
  `EmployeeId` bigint DEFAULT NULL,
  `UserTypeId` int DEFAULT '1',
  `AccessLevelId` bigint DEFAULT NULL,
  `Password` varchar(150) NOT NULL,
  `Email` varchar(100) NOT NULL,
  `Mobile` varchar(14) DEFAULT NULL,
  `OrganizationId` int DEFAULT '0',
  `CompanyId` int DEFAULT '0',
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeeLoginId`),
  UNIQUE KEY `Email` (`Email`),
  UNIQUE KEY `Mobile` (`Mobile`),
  KEY `FK_UserLogin_AccessLevelId` (`AccessLevelId`),
  KEY `FK_UserLogin_CreatedBy` (`CreatedBy`),
  KEY `FK_UserLogin_UpdatedBy` (`UpdatedBy`),
  CONSTRAINT `FK_employeelogin_AccessLevelId` FOREIGN KEY (`AccessLevelId`) REFERENCES `accesslevel` (`AccessLevelId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employeelogin_archive`
--

DROP TABLE IF EXISTS `employeelogin_archive`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeelogin_archive` (
  `EmployeeId` bigint NOT NULL AUTO_INCREMENT,
  `UserTypeId` int DEFAULT '1',
  `AccessLevelId` bigint DEFAULT NULL,
  `Password` varchar(150) NOT NULL,
  `Email` varchar(100) NOT NULL,
  `Mobile` varchar(14) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employeemappedclients`
--

DROP TABLE IF EXISTS `employeemappedclients`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeemappedclients` (
  `EmployeeMappedClientsUid` bigint NOT NULL AUTO_INCREMENT,
  `EmployeeUid` bigint DEFAULT NULL,
  `ClientUid` bigint DEFAULT NULL,
  `ClientName` varchar(250) DEFAULT NULL,
  `FinalPackage` decimal(10,0) DEFAULT NULL,
  `ActualPackage` decimal(10,0) DEFAULT NULL,
  `TakeHomeByCandidate` decimal(10,0) DEFAULT NULL,
  `IsPermanent` bit(1) DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  `BillingHours` int NOT NULL DEFAULT '0',
  `DaysPerWeek` int NOT NULL DEFAULT '0',
  `DateOfJoining` datetime DEFAULT NULL,
  `DateOfLeaving` datetime DEFAULT NULL,
  `AssigneDate` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`EmployeeMappedClientsUid`),
  KEY `fk_EmployeeMappedClients_EmployeeUid` (`EmployeeUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employeepersonaldetail`
--

DROP TABLE IF EXISTS `employeepersonaldetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeepersonaldetail` (
  `EmployeePersonalDetailId` bigint NOT NULL AUTO_INCREMENT,
  `EmployeeUid` bigint DEFAULT NULL,
  `Mobile` varchar(20) DEFAULT NULL,
  `SecondaryMobile` varchar(20) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `Gender` bit(1) DEFAULT NULL,
  `FatherName` varchar(50) DEFAULT NULL,
  `SpouseName` varchar(50) DEFAULT NULL,
  `MotherName` varchar(50) DEFAULT NULL,
  `Address` varchar(100) DEFAULT NULL,
  `State` varchar(75) DEFAULT NULL,
  `City` varchar(75) DEFAULT NULL,
  `Pincode` int DEFAULT NULL,
  `IsPermanent` bit(1) DEFAULT NULL,
  `ActualPackage` decimal(10,0) DEFAULT NULL,
  `FinalPackage` decimal(10,0) DEFAULT NULL,
  `TakeHomeByCandidate` decimal(10,0) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `DOB` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeePersonalDetailId`),
  KEY `fk_EmployeePersonalDetail_CreatedBy` (`CreatedBy`),
  KEY `fk_EmployeePersonalDetail_UpdatedBy` (`UpdatedBy`),
  KEY `fk_employeepersonaldetail_EmployeeUid` (`EmployeeUid`),
  CONSTRAINT `fk_employeepersonaldetail_EmployeeUid` FOREIGN KEY (`EmployeeUid`) REFERENCES `employees` (`EmployeeUid`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employeepersonaldetail_archive`
--

DROP TABLE IF EXISTS `employeepersonaldetail_archive`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeepersonaldetail_archive` (
  `EmployeeUid` bigint NOT NULL AUTO_INCREMENT,
  `Mobile` varchar(20) DEFAULT NULL,
  `SecondaryMobile` varchar(20) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `Gender` bit(1) DEFAULT NULL,
  `FatherName` varchar(50) DEFAULT NULL,
  `SpouseName` varchar(50) DEFAULT NULL,
  `MotherName` varchar(50) DEFAULT NULL,
  `Address` varchar(100) DEFAULT NULL,
  `State` varchar(75) DEFAULT NULL,
  `City` varchar(75) DEFAULT NULL,
  `Pincode` int DEFAULT NULL,
  `IsPermanent` bit(1) DEFAULT NULL,
  `ActualPackage` float(10,2) DEFAULT NULL,
  `FinalPackage` float(10,2) DEFAULT NULL,
  `TakeHomeByCandidate` float(10,2) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeeUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employeeprofessiondetail`
--

DROP TABLE IF EXISTS `employeeprofessiondetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeeprofessiondetail` (
  `EmpProfDetailUid` bigint NOT NULL AUTO_INCREMENT,
  `EmployeeUid` bigint DEFAULT NULL,
  `FirstName` varchar(50) DEFAULT NULL,
  `LastName` varchar(50) DEFAULT NULL,
  `Mobile` varchar(20) DEFAULT NULL,
  `SecondaryMobile` varchar(20) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `PANNo` varchar(20) DEFAULT NULL,
  `AadharNo` varchar(20) DEFAULT NULL,
  `AccountNumber` varchar(50) DEFAULT NULL,
  `BankName` varchar(100) DEFAULT NULL,
  `BranchName` varchar(100) DEFAULT NULL,
  `IFSCCode` varchar(20) DEFAULT NULL,
  `Domain` varchar(250) DEFAULT NULL,
  `Specification` varchar(250) DEFAULT NULL,
  `ExprienceInYear` decimal(10,0) DEFAULT NULL,
  `LastCompanyName` varchar(100) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `ProfessionalDetail_Json` json DEFAULT NULL,
  PRIMARY KEY (`EmpProfDetailUid`),
  KEY `fk_employeeprofessiondetail_CreatedBy` (`CreatedBy`),
  KEY `fk_employeeprofessiondetail_UpdatedBy` (`UpdatedBy`),
  KEY `fk_employeeprofessiondetail_EmployeeUid` (`EmployeeUid`),
  CONSTRAINT `fk_employeeprofessiondetail_EmployeeUid` FOREIGN KEY (`EmployeeUid`) REFERENCES `employees` (`EmployeeUid`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employeeprofessiondetail_archive`
--

DROP TABLE IF EXISTS `employeeprofessiondetail_archive`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employeeprofessiondetail_archive` (
  `EmployeeUid` bigint NOT NULL AUTO_INCREMENT,
  `FirstName` varchar(50) DEFAULT NULL,
  `LastName` varchar(50) DEFAULT NULL,
  `Mobile` varchar(20) DEFAULT NULL,
  `SecondaryMobile` varchar(20) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `PANNo` varchar(20) DEFAULT NULL,
  `AadharNo` varchar(20) DEFAULT NULL,
  `AccountNumber` varchar(50) DEFAULT NULL,
  `BankName` varchar(100) DEFAULT NULL,
  `BranchName` varchar(100) DEFAULT NULL,
  `IFSCCode` varchar(20) DEFAULT NULL,
  `Domain` varchar(250) DEFAULT NULL,
  `Specification` varchar(250) DEFAULT NULL,
  `ExprienceInYear` float(5,2) DEFAULT NULL,
  `LastCompanyName` varchar(100) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `ProfessionalDetail_Json` json DEFAULT NULL,
  PRIMARY KEY (`EmployeeUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `employees`
--

DROP TABLE IF EXISTS `employees`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `employees` (
  `EmployeeUid` bigint NOT NULL AUTO_INCREMENT,
  `FirstName` varchar(50) NOT NULL,
  `LastName` varchar(50) DEFAULT NULL,
  `Mobile` varchar(20) DEFAULT NULL,
  `Email` varchar(100) NOT NULL,
  `IsActive` bit(1) DEFAULT b'0',
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime(6) DEFAULT NULL,
  `UpdatedOn` datetime(6) DEFAULT NULL,
  `ReportingManagerId` bigint DEFAULT '0',
  `DesignationId` int DEFAULT '0',
  `UserTypeId` int DEFAULT '2',
  `LeavePlanId` int DEFAULT '0',
  `PayrollGroupId` int DEFAULT '0',
  `SalaryGroupId` int DEFAULT '0',
  `CompanyId` int DEFAULT '0',
  `NoticePeriodId` int DEFAULT '0',
  `WorkShiftId` int NOT NULL,
  `ProjectId` int DEFAULT '0',
  PRIMARY KEY (`EmployeeUid`),
  UNIQUE KEY `Email_UNIQUE` (`Email`),
  UNIQUE KEY `Mobile_UNIQUE` (`Mobile`),
  KEY `fk_Employees_Createdby` (`CreatedBy`),
  KEY `fk_Employees_UpdatedBy` (`UpdatedBy`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `filedetail`
--

DROP TABLE IF EXISTS `filedetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `filedetail` (
  `FileId` bigint NOT NULL AUTO_INCREMENT,
  `FileOwnerId` bigint NOT NULL,
  `FilePath` varchar(500) NOT NULL,
  `FileName` varchar(100) NOT NULL,
  `FileExtension` varchar(10) DEFAULT NULL,
  `ItemStatusId` bigint DEFAULT NULL,
  `PaidOn` datetime(6) DEFAULT NULL,
  `UserTypeId` int NOT NULL DEFAULT '0',
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime(6) DEFAULT NULL,
  `UpdatedOn` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`FileId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fixed_salary_component_percent`
--

DROP TABLE IF EXISTS `fixed_salary_component_percent`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `fixed_salary_component_percent` (
  `ComponentId` varchar(10) NOT NULL,
  `ComponentDescription` varchar(250) NOT NULL,
  `CalculateInPercentage` bit(1) DEFAULT NULL,
  `PercentageValue` decimal(10,0) DEFAULT NULL,
  `Amount` decimal(10,0) DEFAULT NULL,
  `EmployeeContribution` decimal(10,0) DEFAULT NULL,
  `EmployerContribution` decimal(10,0) DEFAULT NULL,
  `IncludeInPayslip` bit(1) DEFAULT NULL,
  `IsDeductions` bit(1) DEFAULT NULL,
  `IsOpted` bit(1) DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  PRIMARY KEY (`ComponentId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `gstdetail`
--

DROP TABLE IF EXISTS `gstdetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `gstdetail` (
  `gstId` bigint NOT NULL AUTO_INCREMENT,
  `billno` varchar(20) DEFAULT NULL,
  `gststatus` int DEFAULT NULL,
  `paidon` datetime DEFAULT NULL,
  `paidby` bigint DEFAULT NULL,
  `amount` double DEFAULT NULL,
  `fileId` bigint DEFAULT NULL,
  PRIMARY KEY (`gstId`),
  UNIQUE KEY `billno` (`billno`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hike_bonus_salary_adhoc`
--

DROP TABLE IF EXISTS `hike_bonus_salary_adhoc`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `hike_bonus_salary_adhoc` (
  `SalaryAdhocId` bigint NOT NULL,
  `SalaryRunConfigProcessingId` int DEFAULT NULL,
  `EmployeeId` bigint DEFAULT NULL,
  `ProcessStepId` int DEFAULT '0',
  `FinancialYear` int DEFAULT NULL,
  `OrganizationId` int DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `IsPaidByCompany` bit(1) DEFAULT NULL,
  `IsPaidByEmployee` bit(1) DEFAULT NULL,
  `IsFine` bit(1) DEFAULT NULL,
  `IsHikeInSalary` bit(1) DEFAULT NULL,
  `IsBonus` bit(1) DEFAULT NULL,
  `IsReimbursment` bit(1) DEFAULT NULL,
  `IsSalaryOnHold` bit(1) DEFAULT NULL,
  `IsArrear` bit(1) DEFAULT NULL,
  `IsOvertime` bit(1) DEFAULT b'0',
  `IsCompOff` bit(1) DEFAULT b'0',
  `OTCalculatedOn` varchar(10) DEFAULT NULL,
  `Amount` decimal(10,2) DEFAULT '0.00',
  `AmountInPercentage` decimal(10,2) DEFAULT '0.00',
  `IsActive` bit(1) DEFAULT NULL,
  `PaymentActionType` varchar(50) DEFAULT NULL,
  `Comments` varchar(500) DEFAULT NULL,
  `Status` int DEFAULT '0',
  `ForYear` int DEFAULT NULL,
  `ForMonth` int DEFAULT NULL,
  `ProgressState` int DEFAULT NULL,
  PRIMARY KEY (`SalaryAdhocId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `iexception`
--

DROP TABLE IF EXISTS `iexception`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `iexception` (
  `StackTrace` text,
  `MethodFullyQualifiedName` varchar(100) NOT NULL,
  `ExceptionTime` datetime NOT NULL,
  `IsProcedureException` bit(1) DEFAULT NULL,
  `IsCodeException` bit(1) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `incometax_slab`
--

DROP TABLE IF EXISTS `incometax_slab`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `incometax_slab` (
  `IncometaxSlab` int NOT NULL AUTO_INCREMENT,
  `MinIncome` decimal(10,0) DEFAULT NULL,
  `MaxIncome` decimal(10,0) DEFAULT NULL,
  `RegimeType` varchar(45) DEFAULT NULL,
  `TaxPercentage` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`IncometaxSlab`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `itemstatus`
--

DROP TABLE IF EXISTS `itemstatus`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `itemstatus` (
  `ItemStatusId` bigint NOT NULL AUTO_INCREMENT,
  `Status` varchar(50) NOT NULL,
  `StatusDescription` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`ItemStatusId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_accrual`
--

DROP TABLE IF EXISTS `leave_accrual`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_accrual` (
  `LeaveAccrualId` int NOT NULL AUTO_INCREMENT,
  `LeavePlanTypeId` int DEFAULT NULL,
  `CanApplyEntireLeave` bit(1) DEFAULT NULL,
  `IsLeaveAccruedPatternAvail` bit(1) DEFAULT NULL,
  `JoiningMonthLeaveDistribution` json DEFAULT NULL,
  `ExitMonthLeaveDistribution` json DEFAULT NULL,
  `LeaveDistributionSequence` varchar(45) DEFAULT NULL,
  `LeaveDistributionAppliedFrom` decimal(10,0) DEFAULT NULL,
  `IsLeavesProratedForJoinigMonth` bit(1) DEFAULT NULL,
  `IsLeavesProratedOnNotice` bit(1) DEFAULT NULL,
  `IsNotAllowProratedOnNotice` bit(1) DEFAULT NULL,
  `IsNoLeaveOnNoticePeriod` bit(1) DEFAULT NULL,
  `IsVaryOnProbationOrExprience` bit(1) DEFAULT NULL,
  `IsAccrualStartsAfterJoining` bit(1) DEFAULT NULL,
  `IsAccrualStartsAfterProbationEnds` bit(1) DEFAULT NULL,
  `AccrualDaysAfterJoining` decimal(10,0) DEFAULT NULL,
  `AccrualDaysAfterProbationEnds` decimal(10,0) DEFAULT NULL,
  `IsImpactedOnWorkDaysEveryMonth` bit(1) DEFAULT NULL,
  `WeekOffAsAbsentIfAttendaceLessThen` decimal(10,0) DEFAULT NULL,
  `HolidayAsAbsentIfAttendaceLessThen` decimal(10,0) DEFAULT NULL,
  `CanApplyForFutureDate` bit(1) DEFAULT NULL,
  `IsExtraLeaveBeyondAccruedBalance` bit(1) DEFAULT NULL,
  `IsNoExtraLeaveBeyondAccruedBalance` bit(1) DEFAULT NULL,
  `NoOfDaysForExtraLeave` decimal(10,0) DEFAULT NULL,
  `IsAccrueIfHavingLeaveBalance` bit(1) DEFAULT NULL,
  `AllowOnlyIfAccrueBalanceIsAlleast` decimal(10,0) DEFAULT NULL,
  `IsAccrueIfOnOtherLeave` bit(1) DEFAULT NULL,
  `NotAllowIfAlreadyOnLeaveMoreThan` decimal(10,0) DEFAULT NULL,
  `RoundOffLeaveBalance` bit(1) DEFAULT NULL,
  `ToNearestHalfDay` bit(1) DEFAULT NULL,
  `ToNearestFullDay` bit(1) DEFAULT NULL,
  `ToNextAvailableHalfDay` bit(1) DEFAULT NULL,
  `ToNextAvailableFullDay` bit(1) DEFAULT NULL,
  `ToPreviousHalfDay` bit(1) DEFAULT NULL,
  `DoesLeaveExpireAfterSomeTime` bit(1) DEFAULT NULL,
  `AfterHowManyDays` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`LeaveAccrualId`),
  KEY `fk_leave_accrual_LeavePlanTypeId` (`LeavePlanTypeId`),
  CONSTRAINT `fk_leave_accrual_LeavePlanTypeId` FOREIGN KEY (`LeavePlanTypeId`) REFERENCES `leave_plans_type` (`LeavePlanTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_apply_detail`
--

DROP TABLE IF EXISTS `leave_apply_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_apply_detail` (
  `LeaveApplyDetailId` int NOT NULL AUTO_INCREMENT,
  `LeavePlanTypeId` int DEFAULT NULL,
  `LeavePlanId` int DEFAULT NULL,
  `IsAllowForHalfDay` bit(1) DEFAULT NULL,
  `EmployeeCanSeeAndApplyCurrentPlanLeave` bit(1) DEFAULT NULL,
  `RuleForLeaveInNotice` json DEFAULT NULL,
  `ApplyPriorBeforeLeaveDate` int DEFAULT NULL,
  `BackDateLeaveApplyNotBeyondDays` int DEFAULT NULL,
  `RestrictBackDateLeaveApplyAfter` int DEFAULT NULL,
  `CurrentLeaveRequiredComments` bit(1) DEFAULT NULL,
  `ProofRequiredIfDaysExceeds` bit(1) DEFAULT NULL,
  `NoOfDaysExceeded` int DEFAULT NULL,
  PRIMARY KEY (`LeaveApplyDetailId`),
  KEY `fk_leave_apply_detail_LeavePlanTypeId` (`LeavePlanTypeId`),
  CONSTRAINT `fk_leave_apply_detail_LeavePlanTypeId` FOREIGN KEY (`LeavePlanTypeId`) REFERENCES `leave_plans_type` (`LeavePlanTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_approval`
--

DROP TABLE IF EXISTS `leave_approval`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_approval` (
  `LeaveApprovalId` int NOT NULL,
  `LeavePlanTypeId` int DEFAULT NULL,
  `LeavePlanId` int DEFAULT NULL,
  `IsLeaveRequiredApproval` bit(1) DEFAULT NULL,
  `ApprovalLevels` int DEFAULT NULL,
  `ApprovalWorkFlowId` int DEFAULT NULL,
  `IsRequiredAllLevelApproval` bit(1) DEFAULT NULL,
  `CanHigherRankPersonsIsAvailForAction` bit(1) DEFAULT NULL,
  `IsPauseForApprovalNotification` bit(1) DEFAULT NULL,
  `IsReportingManageIsDefaultForAction` bit(1) DEFAULT NULL,
  PRIMARY KEY (`LeaveApprovalId`),
  KEY `fk_leave_approval_LeavePlanTypeId` (`LeavePlanTypeId`),
  CONSTRAINT `fk_leave_approval_LeavePlanTypeId` FOREIGN KEY (`LeavePlanTypeId`) REFERENCES `leave_plans_type` (`LeavePlanTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_detail`
--

DROP TABLE IF EXISTS `leave_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_detail` (
  `LeaveDetailId` int NOT NULL AUTO_INCREMENT,
  `LeavePlanTypeId` int DEFAULT NULL,
  `LeavePlanId` int DEFAULT NULL,
  `IsLeaveDaysLimit` bit(1) DEFAULT NULL,
  `LeaveLimit` int DEFAULT NULL,
  `CanApplyExtraLeave` bit(1) DEFAULT NULL,
  `ExtraLeaveLimit` int DEFAULT NULL,
  `IsNoLeaveAfterDate` bit(1) DEFAULT NULL,
  `LeaveNotAllocatedIfJoinAfter` int DEFAULT NULL,
  `CanCompoffAllocatedAutomatically` bit(1) DEFAULT NULL,
  `CanCompoffCreditedByManager` bit(1) DEFAULT NULL,
  PRIMARY KEY (`LeaveDetailId`),
  KEY `fk_leave_detail_LeavePlanTypeId` (`LeavePlanTypeId`),
  CONSTRAINT `fk_leave_detail_LeavePlanTypeId` FOREIGN KEY (`LeavePlanTypeId`) REFERENCES `leave_plans_type` (`LeavePlanTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_endyear_processing`
--

DROP TABLE IF EXISTS `leave_endyear_processing`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_endyear_processing` (
  `LeaveEndYearProcessingId` int NOT NULL AUTO_INCREMENT,
  `LeavePlanTypeId` int DEFAULT NULL,
  `LeavePlanId` int DEFAULT NULL,
  `IsLeaveBalanceExpiredOnEndOfYear` bit(1) DEFAULT NULL,
  `AllConvertedToPaid` bit(1) DEFAULT NULL,
  `AllLeavesCarryForwardToNextYear` bit(1) DEFAULT NULL,
  `PayFirstNCarryForwordRemaning` bit(1) DEFAULT NULL,
  `CarryForwordFirstNPayRemaning` bit(1) DEFAULT NULL,
  `PayNCarryForwardForPercent` bit(1) DEFAULT NULL,
  `PayNCarryForwardDefineType` varchar(50) DEFAULT NULL,
  `FixedPayNCarryForward` json DEFAULT NULL,
  `PercentagePayNCarryForward` json DEFAULT NULL,
  `DoestCarryForwardExpired` bit(1) DEFAULT NULL,
  `ExpiredAfter` decimal(10,0) DEFAULT NULL,
  `DoesExpiryLeaveRemainUnchange` bit(1) DEFAULT NULL,
  `DeductFromSalaryOnYearChange` bit(1) DEFAULT NULL,
  `ResetBalanceToZero` bit(1) DEFAULT NULL,
  `CarryForwardToNextYear` bit(1) DEFAULT NULL,
  PRIMARY KEY (`LeaveEndYearProcessingId`),
  KEY `fk_leave_endyear_processing_LeavePlanTypeId` (`LeavePlanTypeId`),
  CONSTRAINT `fk_leave_endyear_processing_LeavePlanTypeId` FOREIGN KEY (`LeavePlanTypeId`) REFERENCES `leave_plans_type` (`LeavePlanTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_from_management`
--

DROP TABLE IF EXISTS `leave_from_management`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_from_management` (
  `LeaveManagementId` int NOT NULL AUTO_INCREMENT,
  `LeavePlanTypeId` int DEFAULT NULL,
  `LeavePlanId` int DEFAULT NULL,
  `CanManagerAwardCausalLeave` bit(1) DEFAULT NULL,
  PRIMARY KEY (`LeaveManagementId`),
  KEY `fk_leave_from_management_LeavePlanTypeId` (`LeavePlanTypeId`),
  CONSTRAINT `fk_leave_from_management_LeavePlanTypeId` FOREIGN KEY (`LeavePlanTypeId`) REFERENCES `leave_plans_type` (`LeavePlanTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_holidays_and_weekoff`
--

DROP TABLE IF EXISTS `leave_holidays_and_weekoff`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_holidays_and_weekoff` (
  `LeaveHolidaysAndWeekOffId` int NOT NULL AUTO_INCREMENT,
  `LeavePlanTypeId` int DEFAULT NULL,
  `LeavePlanId` int DEFAULT NULL,
  `AdJoiningHolidayIsConsiderAsLeave` bit(1) DEFAULT NULL,
  `ConsiderLeaveIfNumOfDays` decimal(10,0) DEFAULT NULL,
  `IfLeaveLieBetweenTwoHolidays` bit(1) DEFAULT NULL,
  `IfHolidayIsRightBeforLeave` bit(1) DEFAULT NULL,
  `IfHolidayIsRightAfterLeave` bit(1) DEFAULT NULL,
  `IfHolidayIsRightBeforeAfterOrInBetween` bit(1) DEFAULT NULL,
  `AdjoiningWeekOffIsConsiderAsLeave` bit(1) DEFAULT NULL,
  `ConsiderLeaveIfIncludeDays` decimal(10,0) DEFAULT NULL,
  `IfLeaveLieBetweenWeekOff` bit(1) DEFAULT NULL,
  `IfWeekOffIsRightBeforLeave` bit(1) DEFAULT NULL,
  `IfWeekOffIsRightAfterLeave` bit(1) DEFAULT NULL,
  `IfWeekOffIsRightBeforeAfterOrInBetween` bit(1) DEFAULT NULL,
  PRIMARY KEY (`LeaveHolidaysAndWeekOffId`),
  KEY `fk_leave_holidays_and_weekoff_LeavePlanTypeId` (`LeavePlanTypeId`),
  CONSTRAINT `fk_leave_holidays_and_weekoff_LeavePlanTypeId` FOREIGN KEY (`LeavePlanTypeId`) REFERENCES `leave_plans_type` (`LeavePlanTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_plan`
--

DROP TABLE IF EXISTS `leave_plan`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_plan` (
  `LeavePlanId` int NOT NULL AUTO_INCREMENT,
  `CompanyId` int DEFAULT '0',
  `PlanName` varchar(50) DEFAULT NULL,
  `PlanDescription` varchar(250) DEFAULT NULL,
  `AssociatedPlanTypes` json DEFAULT NULL,
  `PlanStartCalendarDate` datetime DEFAULT NULL,
  `IsShowLeavePolicy` bit(1) DEFAULT NULL,
  `IsUploadedCustomLeavePolicy` bit(1) DEFAULT NULL,
  `IsDefaultPlan` bit(1) DEFAULT b'0',
  `CanApplyEntireLeave` bit(1) DEFAULT b'0',
  PRIMARY KEY (`LeavePlanId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_plan_restriction`
--

DROP TABLE IF EXISTS `leave_plan_restriction`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_plan_restriction` (
  `LeavePlanRestrictionId` int NOT NULL AUTO_INCREMENT,
  `LeavePlanTypeId` int DEFAULT NULL,
  `LeavePlanId` int DEFAULT NULL,
  `CanApplyAfterProbation` bit(1) DEFAULT NULL,
  `CanApplyAfterJoining` bit(1) DEFAULT NULL,
  `DaysAfterProbation` int DEFAULT NULL,
  `DaysAfterJoining` int DEFAULT NULL,
  `IsAvailRestrictedLeavesInProbation` bit(1) DEFAULT NULL,
  `LeaveLimitInProbation` decimal(10,0) DEFAULT NULL,
  `IsLeaveInNoticeExtendsNoticePeriod` bit(1) DEFAULT NULL,
  `NoOfTimesNoticePeriodExtended` decimal(10,0) DEFAULT NULL,
  `CanManageOverrideLeaveRestriction` bit(1) DEFAULT NULL,
  `GapBetweenTwoConsicutiveLeaveDates` decimal(10,0) DEFAULT NULL,
  `LimitOfMaximumLeavesInCalendarYear` decimal(10,0) DEFAULT NULL,
  `LimitOfMaximumLeavesInCalendarMonth` decimal(10,0) DEFAULT NULL,
  `LimitOfMaximumLeavesInEntireTenure` decimal(10,0) DEFAULT NULL,
  `MinLeaveToApplyDependsOnAvailable` decimal(10,0) DEFAULT NULL,
  `AvailableLeaves` decimal(10,0) DEFAULT NULL,
  `RestrictFromDayOfEveryMonth` int DEFAULT NULL,
  `IsCurrentPlanDepnedsOnOtherPlan` bit(1) DEFAULT NULL,
  `AssociatedPlanTypeId` int DEFAULT NULL,
  `IsCheckOtherPlanTypeBalance` bit(1) DEFAULT NULL,
  `DependentPlanTypeId` int DEFAULT NULL,
  PRIMARY KEY (`LeavePlanRestrictionId`),
  KEY `fk_leave_plan_restriction_LeavePlanTypeId` (`LeavePlanTypeId`),
  CONSTRAINT `fk_leave_plan_restriction_LeavePlanTypeId` FOREIGN KEY (`LeavePlanTypeId`) REFERENCES `leave_plans_type` (`LeavePlanTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_plans_type`
--

DROP TABLE IF EXISTS `leave_plans_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_plans_type` (
  `LeavePlanTypeId` int NOT NULL AUTO_INCREMENT,
  `LeavePlanCode` varchar(10) DEFAULT NULL,
  `PlanName` varchar(50) DEFAULT NULL,
  `PlanDescription` varchar(250) DEFAULT NULL,
  `MaxLeaveLimit` int DEFAULT NULL,
  `ShowDescription` bit(1) DEFAULT NULL,
  `IsPaidLeave` bit(1) DEFAULT NULL,
  `IsSickLeave` bit(1) DEFAULT NULL,
  `IsStatutoryLeave` bit(1) DEFAULT NULL,
  `IsMale` bit(1) DEFAULT NULL,
  `IsMarried` bit(1) DEFAULT NULL,
  `IsRestrictOnGender` bit(1) DEFAULT NULL,
  `IsRestrictOnMaritalStatus` bit(1) DEFAULT NULL,
  `Reasons` json DEFAULT NULL,
  `PlanConfigurationDetail` json DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`LeavePlanTypeId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `leave_request_notification`
--

DROP TABLE IF EXISTS `leave_request_notification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `leave_request_notification` (
  `LeaveRequestNotificationId` bigint NOT NULL AUTO_INCREMENT,
  `LeaveRequestId` bigint DEFAULT NULL,
  `UserMessage` text,
  `EmployeeId` bigint DEFAULT NULL,
  `ReportingManagerId` bigint DEFAULT '0',
  `ProjectId` bigint DEFAULT NULL,
  `ProjectName` varchar(150) DEFAULT NULL,
  `FromDate` datetime DEFAULT NULL,
  `ToDate` datetime DEFAULT NULL,
  `NumOfDays` decimal(10,2) DEFAULT NULL,
  `RequestStatusId` int DEFAULT NULL,
  `NoOfApprovalsRequired` int DEFAULT '0',
  `ReporterDetail` json DEFAULT (json_array()),
  `FileIds` json DEFAULT (json_array()),
  `FeedBack` json DEFAULT (json_array()),
  `LeaveTypeName` varchar(100) DEFAULT NULL,
  `AutoActionAfterDays` int DEFAULT '0',
  `IsAutoApprovedEnabled` bit(1) DEFAULT b'0',
  `LeaveTypeId` int DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  PRIMARY KEY (`LeaveRequestNotificationId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `liveurl`
--

DROP TABLE IF EXISTS `liveurl`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `liveurl` (
  `savedUrlId` bigint NOT NULL,
  `method` varchar(20) DEFAULT NULL,
  `url` longtext,
  `parameter` longtext,
  `lastUsed` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`savedUrlId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `mappeduisqldatatype`
--

DROP TABLE IF EXISTS `mappeduisqldatatype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `mappeduisqldatatype` (
  `RowIndex` int NOT NULL,
  `value` varchar(50) NOT NULL,
  `data` varchar(50) NOT NULL,
  `TableName` varchar(50) NOT NULL,
  `SqlDataType` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`RowIndex`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `medicinehelpfulcontacts`
--

DROP TABLE IF EXISTS `medicinehelpfulcontacts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `medicinehelpfulcontacts` (
  `state_abbr` varchar(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `state_name` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `org_type` varchar(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `org_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `agency_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `local_phone` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `local_phone_ext` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `local_notes` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `local_tdd` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `local_tdd_ext` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `agency_id` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `tollfree_phone` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_ext` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_instate_flag` varchar(3) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_notes` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_tdd` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_tdd_ext` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `spanish_phone` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `spanish_ext` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `address` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `address2` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `agency_notes` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `email_address` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `web_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `medicinequeries`
--

DROP TABLE IF EXISTS `medicinequeries`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `medicinequeries` (
  `state_abbr` varchar(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `state_name` varchar(40) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `topic_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `org_type` varchar(2) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `question` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `org_name` varchar(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `agency_name` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `local_phone` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `local_phone_ext` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `local_notes` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `local_tdd` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `local_tdd_ext` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_phone` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_phone_ext` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_instate_flag` varchar(3) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_notes` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_tdd` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `tollfree_tdd_ext` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `spanish_phone` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `spanish_ext` varchar(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `email_address` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `web_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `names`
--

DROP TABLE IF EXISTS `names`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `names` (
  `RowIndex` int NOT NULL,
  `PersonNames` varchar(100) NOT NULL,
  `Meaning` varchar(250) DEFAULT NULL,
  `Religion` varchar(20) NOT NULL,
  `Gender` tinyint(1) DEFAULT NULL,
  `EmailId` varchar(100) NOT NULL DEFAULT '',
  `MobileNo` varchar(15) DEFAULT NULL,
  PRIMARY KEY (`RowIndex`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `noticeperioddescription`
--

DROP TABLE IF EXISTS `noticeperioddescription`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `noticeperioddescription` (
  `NoticePeriodDescriptionId` bigint NOT NULL AUTO_INCREMENT,
  `Value` int DEFAULT NULL,
  `Description` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`NoticePeriodDescriptionId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `objective_catagory`
--

DROP TABLE IF EXISTS `objective_catagory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `objective_catagory` (
  `ObjectiveCatagoryId` int NOT NULL,
  `ObjectiveCatagoryType` varchar(50) NOT NULL,
  `TypeDescription` varchar(500) DEFAULT NULL,
  `RolesId` json NOT NULL DEFAULT (json_array()),
  `ObjectivesId` json NOT NULL DEFAULT (json_array()),
  `IsHikeApproval` bit(1) DEFAULT NULL,
  `ApprovalWorkflowId` int DEFAULT '0',
  `Status` varchar(45) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ObjectiveCatagoryId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `org_hierarchy`
--

DROP TABLE IF EXISTS `org_hierarchy`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `org_hierarchy` (
  `RoleId` int NOT NULL,
  `EmployeeId` bigint NOT NULL DEFAULT '0',
  `ParentNode` int DEFAULT '0',
  `RoleName` varchar(100) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `ImageUrl` varchar(255) DEFAULT NULL,
  `IsDepartment` bit(1) DEFAULT b'0',
  `CompanyId` int DEFAULT '0',
  `IsActive` bit(1) DEFAULT NULL,
  PRIMARY KEY (`RoleId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `organization_detail`
--

DROP TABLE IF EXISTS `organization_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `organization_detail` (
  `OrganizationId` int NOT NULL AUTO_INCREMENT,
  `OrganizationName` varchar(250) DEFAULT NULL,
  `OrgMobileNo` varchar(20) DEFAULT NULL,
  `OrgEmail` varchar(50) DEFAULT NULL,
  `OrgPrimaryPhoneNo` varchar(20) DEFAULT NULL,
  `OrgSecondaryPhoneNo` varchar(20) DEFAULT NULL,
  `OrgFax` varchar(50) DEFAULT NULL,
  `CreatedBy` mediumtext NOT NULL,
  `UpdatedBy` mediumtext,
  `CreatedOn` datetime NOT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`OrganizationId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `parent_test`
--

DROP TABLE IF EXISTS `parent_test`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `parent_test` (
  `ParentId` int NOT NULL,
  `Name` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`ParentId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pay_calculation`
--

DROP TABLE IF EXISTS `pay_calculation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `pay_calculation` (
  `PayCalculationId` int NOT NULL AUTO_INCREMENT,
  `PayCalculationDesc` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`PayCalculationId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `payroll_cycle_setting`
--

DROP TABLE IF EXISTS `payroll_cycle_setting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `payroll_cycle_setting` (
  `PayrollCycleSettingId` int NOT NULL,
  `CompanyId` int DEFAULT NULL,
  `OrganizationId` int DEFAULT NULL,
  `PayFrequency` varchar(45) DEFAULT NULL,
  `PayCycleMonth` int DEFAULT NULL,
  `PayCycleDayOfMonth` int DEFAULT NULL,
  `PayCalculationId` int DEFAULT NULL,
  `IsExcludeWeeklyOffs` bit(1) DEFAULT NULL,
  `IsExcludeHolidays` bit(1) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`PayrollCycleSettingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `payroll_monthly_detail`
--

DROP TABLE IF EXISTS `payroll_monthly_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `payroll_monthly_detail` (
  `PayrollMonthlyDetailId` int NOT NULL,
  `EmployeeId` bigint NOT NULL,
  `ForYear` int DEFAULT NULL,
  `ForMonth` int DEFAULT NULL,
  `GrossTotal` decimal(10,0) DEFAULT '0',
  `PayableToEmployee` decimal(10,0) DEFAULT NULL,
  `PFByEmployer` decimal(10,0) DEFAULT NULL,
  `PFByEmployee` decimal(10,0) DEFAULT NULL,
  `ProfessionalTax` decimal(10,0) DEFAULT NULL,
  `TotalDeduction` decimal(10,0) DEFAULT NULL,
  `PayrollStatus` int DEFAULT NULL,
  `PaymentRunDate` datetime DEFAULT NULL,
  `ExecutedBy` bigint DEFAULT NULL,
  `ExecutedOn` datetime DEFAULT NULL,
  `CompanyId` int DEFAULT '0',
  PRIMARY KEY (`PayrollMonthlyDetailId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `performance_objective`
--

DROP TABLE IF EXISTS `performance_objective`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `performance_objective` (
  `ObjectiveId` bigint NOT NULL AUTO_INCREMENT,
  `Objective` varchar(100) DEFAULT NULL,
  `Description` varchar(800) DEFAULT NULL,
  `CanManagerSee` bit(1) DEFAULT NULL,
  `IsIncludeReview` bit(1) DEFAULT NULL,
  `ProgressMeassureType` int DEFAULT NULL,
  `StartValue` decimal(10,2) DEFAULT NULL,
  `TargetValue` decimal(10,2) DEFAULT NULL,
  `IsDefaultObjective` bit(1) DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ObjectiveId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pf_esi_setting`
--

DROP TABLE IF EXISTS `pf_esi_setting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `pf_esi_setting` (
  `PfEsi_setting_Id` int NOT NULL AUTO_INCREMENT,
  `CompanyId` int DEFAULT NULL,
  `PFEnable` bit(1) DEFAULT NULL,
  `IsPfAmountLimitStatutory` bit(1) DEFAULT NULL,
  `IsPfCalculateInPercentage` bit(1) DEFAULT NULL,
  `IsAllowOverridingPf` bit(1) DEFAULT NULL,
  `IsPfEmployerContribution` bit(1) DEFAULT NULL,
  `EmployerPFLimit` decimal(10,0) DEFAULT NULL,
  `IsHidePfEmployer` bit(1) DEFAULT NULL,
  `IsPayOtherCharges` bit(1) DEFAULT NULL,
  `IsAllowVPF` bit(1) DEFAULT NULL,
  `EsiEnable` bit(1) DEFAULT NULL,
  `MaximumGrossForESI` decimal(10,0) DEFAULT NULL,
  `EsiEmployeeContribution` decimal(10,2) DEFAULT NULL,
  `EsiEmployerContribution` decimal(10,2) DEFAULT NULL,
  `IsAllowOverridingEsi` bit(1) DEFAULT NULL,
  `IsHideEsiEmployer` bit(1) DEFAULT NULL,
  `IsEsiExcludeEmployerShare` bit(1) DEFAULT NULL,
  `IsEsiExcludeEmployeeGratuity` bit(1) DEFAULT NULL,
  `IsEsiEmployerContributionOutside` bit(1) DEFAULT NULL,
  `IsRestrictEsi` bit(1) DEFAULT NULL,
  `IsIncludeBonusEsiEligibility` bit(1) DEFAULT NULL,
  `IsIncludeBonusEsiContribution` bit(1) DEFAULT NULL,
  `IsEmployerPFLimitContribution` bit(1) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  PRIMARY KEY (`PfEsi_setting_Id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `previous_employement_details`
--

DROP TABLE IF EXISTS `previous_employement_details`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `previous_employement_details` (
  `PreviousEmpDetailId` bigint NOT NULL AUTO_INCREMENT,
  `EmployeeId` int DEFAULT NULL,
  `Month` varchar(10) DEFAULT NULL,
  `MonthNumber` int DEFAULT '0',
  `Year` int DEFAULT NULL,
  `Gross` decimal(10,3) DEFAULT NULL,
  `Basic` decimal(10,3) DEFAULT NULL,
  `HouseRent` decimal(10,3) DEFAULT NULL,
  `EmployeePR` decimal(10,3) DEFAULT NULL,
  `ESI` decimal(10,3) DEFAULT NULL,
  `LWF` decimal(10,3) DEFAULT NULL,
  `LWFEmp` decimal(10,3) DEFAULT NULL,
  `Professional` decimal(10,3) DEFAULT NULL,
  `IncomeTax` decimal(10,3) DEFAULT NULL,
  `OtherTax` decimal(10,3) DEFAULT NULL,
  `OtherTaxable` decimal(10,3) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`PreviousEmpDetailId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `product`
--

DROP TABLE IF EXISTS `product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `product` (
  `ProductId` bigint NOT NULL,
  `CompanyId` int DEFAULT NULL,
  `CatagoryName` varchar(100) NOT NULL,
  `Brand` varchar(100) DEFAULT NULL,
  `TitleName` varchar(100) NOT NULL,
  `SerialNo` varchar(100) DEFAULT NULL,
  `ProductCode` varchar(45) DEFAULT NULL,
  `ModalNum` varchar(50) DEFAULT NULL,
  `SiteUrl` varchar(100) DEFAULT NULL,
  `MRP` decimal(10,0) DEFAULT NULL,
  `PurchasePrice` decimal(10,0) DEFAULT NULL,
  `Quantity` int DEFAULT NULL,
  `StockStatus` int DEFAULT NULL,
  `OrderDate` datetime DEFAULT NULL,
  `FileIds` json DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ProductId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `product_request`
--

DROP TABLE IF EXISTS `product_request`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `product_request` (
  `ProductServiceRequestId` bigint NOT NULL,
  `CompanyId` int DEFAULT NULL,
  `RequestTypeId` varchar(20) DEFAULT NULL,
  `RequestDescription` text,
  `Brand` varchar(100) DEFAULT NULL,
  `TitleName` varchar(100) NOT NULL,
  `Quantity` int DEFAULT NULL,
  `FromDate` datetime DEFAULT NULL,
  `ToDate` datetime DEFAULT NULL,
  `RequestedTo_1` bigint DEFAULT NULL,
  `RequestedTo_2` bigint DEFAULT NULL,
  `RequestedTo_3` bigint DEFAULT NULL,
  `Reference` varchar(100) DEFAULT NULL,
  `RequestStatus` int DEFAULT NULL,
  `RequestedBy` bigint DEFAULT NULL,
  `RequestedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ProductServiceRequestId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `product_service_request`
--

DROP TABLE IF EXISTS `product_service_request`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `product_service_request` (
  `ProductServiceRequestId` bigint NOT NULL,
  `CompanyId` int DEFAULT NULL,
  `RequestTypeId` varchar(20) DEFAULT NULL,
  `RequestDescription` text,
  `Brand` varchar(100) DEFAULT NULL,
  `TitleName` varchar(100) NOT NULL,
  `Quantity` int DEFAULT NULL,
  `FromDate` datetime DEFAULT NULL,
  `ToDate` datetime DEFAULT NULL,
  `RequestedTo_1` bigint DEFAULT NULL,
  `RequestedTo_2` bigint DEFAULT NULL,
  `RequestedTo_3` bigint DEFAULT NULL,
  `Reference` varchar(100) DEFAULT NULL,
  `RequestStatus` int DEFAULT NULL,
  `RequestedBy` bigint DEFAULT NULL,
  `RequestedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ProductServiceRequestId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `professionaldetail`
--

DROP TABLE IF EXISTS `professionaldetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `professionaldetail` (
  `EmployeeId` bigint NOT NULL,
  `Mobile` varchar(20) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `FirstName` varchar(100) DEFAULT NULL,
  `LastName` varchar(100) DEFAULT NULL,
  `ProfessionalDetailJson` json DEFAULT NULL,
  `CreatedOn` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`EmployeeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `project`
--

DROP TABLE IF EXISTS `project`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `project` (
  `ProjectId` int NOT NULL,
  `ProjectName` varchar(150) DEFAULT NULL,
  `ProjectDescription` varchar(500) DEFAULT NULL,
  `ProjectStartedOn` datetime DEFAULT NULL,
  `ProjectEndedOn` datetime DEFAULT NULL,
  `IsClientProject` bit(1) DEFAULT NULL,
  `ClientId` bigint DEFAULT NULL,
  `ProjectManagerId` int DEFAULT NULL,
  `HomePageUrl` varchar(150) DEFAULT NULL,
  `DocumentPath` varchar(150) DEFAULT NULL,
  `PageIndexDetail` json DEFAULT NULL,
  `KeywordDetail` json DEFAULT NULL,
  `DocumentationDetail` json DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `CEOId` bigint DEFAULT '0',
  `CanCEOAccess` bit(1) DEFAULT b'0',
  `CTOId` bigint DEFAULT '0',
  `CanCTOAccess` bit(1) DEFAULT b'0',
  `CFOId` bigint DEFAULT '0',
  `CanCFOAccess` bit(1) DEFAULT b'0',
  `COOId` bigint DEFAULT '0',
  `CanCOOAccess` bit(1) DEFAULT b'0',
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ProjectId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `project_appraisal`
--

DROP TABLE IF EXISTS `project_appraisal`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `project_appraisal` (
  `ProjectAppraisalId` int NOT NULL,
  `ProjectId` int DEFAULT NULL,
  `FromDate` datetime DEFAULT NULL,
  `ToDate` datetime DEFAULT NULL,
  `ProjectAppraisalBudget` double DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ProjectAppraisalId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `project_members_detail`
--

DROP TABLE IF EXISTS `project_members_detail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `project_members_detail` (
  `ProjectMemberDetailId` int NOT NULL,
  `ProjectId` int DEFAULT NULL,
  `EmployeeId` bigint NOT NULL DEFAULT '0',
  `FullName` varchar(50) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  `MemberType` int DEFAULT NULL,
  `AssignedOn` datetime DEFAULT CURRENT_TIMESTAMP,
  `LastDateOnProject` datetime DEFAULT NULL,
  `Team` varchar(45) DEFAULT NULL,
  `ProjectManagerId` bigint NOT NULL,
  `AllocatedMinutes` int DEFAULT '0',
  PRIMARY KEY (`ProjectMemberDetailId`),
  KEY `fk_project_member_detail_projectId` (`ProjectId`),
  KEY `fk_employees_employeeId_idx` (`EmployeeId`),
  CONSTRAINT `fk_employees_employeeId` FOREIGN KEY (`EmployeeId`) REFERENCES `employees` (`EmployeeUid`),
  CONSTRAINT `fk_project_member_detail_projectId` FOREIGN KEY (`ProjectId`) REFERENCES `project` (`ProjectId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `ptax_slab`
--

DROP TABLE IF EXISTS `ptax_slab`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ptax_slab` (
  `PtaxSlabId` int NOT NULL AUTO_INCREMENT,
  `StateName` varchar(120) DEFAULT NULL,
  `MinIncome` decimal(10,0) DEFAULT NULL,
  `MaxIncome` decimal(10,0) DEFAULT NULL,
  `TaxAmount` decimal(10,0) DEFAULT NULL,
  `Gender` int DEFAULT NULL,
  PRIMARY KEY (`PtaxSlabId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `refreshtoken`
--

DROP TABLE IF EXISTS `refreshtoken`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `refreshtoken` (
  `UserId` bigint NOT NULL,
  `RefreshToken` varchar(500) DEFAULT NULL,
  `ExpiryTime` datetime DEFAULT NULL,
  PRIMARY KEY (`UserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `reimburs_adhoc_and_deduction`
--

DROP TABLE IF EXISTS `reimburs_adhoc_and_deduction`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `reimburs_adhoc_and_deduction` (
  `ReimbursAdhocAndDeduction` bigint NOT NULL,
  `EmployeeId` bigint DEFAULT NULL,
  `IsReimburs` bit(1) DEFAULT NULL,
  `IsAdhoc` bit(1) DEFAULT NULL,
  `IsDeduction` bit(1) DEFAULT NULL,
  `ForYear` int DEFAULT NULL,
  `ForMonth` int DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  `OrganizationId` int DEFAULT NULL,
  `ComponentId` varchar(20) DEFAULT NULL,
  `Amount` decimal(10,0) DEFAULT NULL,
  `Comments` varchar(500) DEFAULT NULL,
  `Status` int DEFAULT NULL,
  `Reason` varchar(500) DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ReimbursAdhocAndDeduction`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `request_type`
--

DROP TABLE IF EXISTS `request_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `request_type` (
  `RequestTypeId` int NOT NULL,
  `RequestTypeCode` varchar(20) DEFAULT NULL,
  `Description` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`RequestTypeId`),
  UNIQUE KEY `RequestTypeCode` (`RequestTypeCode`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `request_type_desc`
--

DROP TABLE IF EXISTS `request_type_desc`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `request_type_desc` (
  `RequestTypeDescId` int NOT NULL AUTO_INCREMENT,
  `TypeDescription` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`RequestTypeDescId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `role_accessibility_mapping`
--

DROP TABLE IF EXISTS `role_accessibility_mapping`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `role_accessibility_mapping` (
  `RoleAccessibilityMappingId` int NOT NULL AUTO_INCREMENT,
  `AccessLevelId` int DEFAULT NULL,
  `AccessCode` int DEFAULT NULL,
  `AccessibilityId` int DEFAULT NULL,
  PRIMARY KEY (`RoleAccessibilityMappingId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `rolesandmenu`
--

DROP TABLE IF EXISTS `rolesandmenu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `rolesandmenu` (
  `Catagory` varchar(100) DEFAULT NULL,
  `Childs` varchar(100) DEFAULT NULL,
  `Link` varchar(100) DEFAULT NULL,
  `Icon` varchar(100) DEFAULT NULL,
  `Badge` varchar(100) DEFAULT NULL,
  `BadgeType` varchar(100) DEFAULT NULL,
  `AccessCode` bigint NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`AccessCode`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `salary_components`
--

DROP TABLE IF EXISTS `salary_components`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `salary_components` (
  `ComponentId` varchar(10) NOT NULL,
  `ComponentFullName` varchar(150) DEFAULT NULL,
  `ComponentDescription` varchar(1024) DEFAULT NULL,
  `CalculateInPercentage` bit(1) DEFAULT NULL,
  `TaxExempt` bit(1) DEFAULT NULL,
  `ComponentTypeId` int DEFAULT NULL,
  `ComponentCatagoryId` int DEFAULT NULL,
  `PercentageValue` decimal(10,0) DEFAULT NULL,
  `MaxLimit` decimal(10,0) DEFAULT NULL,
  `DeclaredValue` decimal(10,0) DEFAULT NULL,
  `AcceptedAmount` decimal(10,0) DEFAULT '0',
  `RejectedAmount` decimal(10,0) DEFAULT '0',
  `UploadedFileIds` json DEFAULT NULL,
  `Formula` varchar(100) DEFAULT NULL,
  `EmployeeContribution` decimal(10,0) DEFAULT NULL,
  `EmployerContribution` decimal(10,0) DEFAULT NULL,
  `IncludeInPayslip` bit(1) DEFAULT NULL,
  `IsAdHoc` bit(1) DEFAULT NULL,
  `AdHocId` int DEFAULT NULL,
  `Section` varchar(20) DEFAULT NULL,
  `SectionMaxLimit` decimal(10,0) DEFAULT NULL,
  `IsAffectInGross` bit(1) DEFAULT NULL,
  `RequireDocs` bit(1) DEFAULT NULL,
  `IsOpted` bit(1) DEFAULT NULL,
  `IsActive` bit(1) DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  PRIMARY KEY (`ComponentId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `salary_run_config_processing`
--

DROP TABLE IF EXISTS `salary_run_config_processing`;
CREATE TABLE `salary_run_config_processing` (
  `SalaryRunConfigProcessingId` int NOT NULL AUTO_INCREMENT,
  `ForMonth` int DEFAULT NULL,
  `ForYear` int DEFAULT NULL,
  `ProcessingStatus` int DEFAULT NULL,
  `CompanyId` int DEFAULT NULL,
  PRIMARY KEY (`SalaryRunConfigProcessingId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


--
-- Table structure for table `sample`
--

DROP TABLE IF EXISTS `sample`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sample` (
  `Username` varchar(50) NOT NULL,
  `Password` varchar(50) NOT NULL,
  `Rollno` int DEFAULT NULL,
  `CreatedOn` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`Username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sector_type`
--

DROP TABLE IF EXISTS `sector_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sector_type` (
  `SectorTypeId` int NOT NULL AUTO_INCREMENT,
  `SectorName` varchar(150) DEFAULT NULL,
  `SectorType` varchar(150) DEFAULT NULL,
  PRIMARY KEY (`SectorTypeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `selectsamplequery`
--

DROP TABLE IF EXISTS `selectsamplequery`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `selectsamplequery` (
  `TableIndex` int NOT NULL,
  `SelectQuery` varchar(500) NOT NULL,
  PRIMARY KEY (`TableIndex`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `service_request`
--

DROP TABLE IF EXISTS `service_request`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `service_request` (
  `ServiceRequestId` bigint NOT NULL,
  `CompanyId` int DEFAULT NULL,
  `RequestTypeId` varchar(20) DEFAULT NULL,
  `RequestTitle` varchar(150) DEFAULT NULL,
  `RequestDescription` text,
  `Quantity` int DEFAULT NULL,
  `Duration` decimal(10,0) DEFAULT NULL,
  `FromDate` datetime DEFAULT NULL,
  `ToDate` datetime DEFAULT NULL,
  `AssignTo` json DEFAULT NULL,
  `Reference` varchar(100) DEFAULT NULL,
  `RequestStatus` int DEFAULT NULL,
  `RequestedBy` bigint DEFAULT NULL,
  `RequestedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`ServiceRequestId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sportsname`
--

DROP TABLE IF EXISTS `sportsname`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sportsname` (
  `RowIndex` int NOT NULL,
  `SportName` varchar(100) NOT NULL,
  `StartedOn` datetime(6) DEFAULT NULL,
  `StartedBy` varchar(100) DEFAULT NULL,
  `Country` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`RowIndex`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sqlmapperdatatype`
--

DROP TABLE IF EXISTS `sqlmapperdatatype`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `sqlmapperdatatype` (
  `SNo` int NOT NULL,
  `ClientTypeName` varchar(100) NOT NULL,
  `SqlTypeName` varchar(100) NOT NULL,
  `TableName` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`SNo`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `students`
--

DROP TABLE IF EXISTS `students`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `students` (
  `StudentUid` varchar(64) NOT NULL,
  `ClassTeacherUid` varchar(64) NOT NULL,
  `StudentFirstName` varchar(50) NOT NULL,
  `StudentLastName` varchar(50) NOT NULL,
  `FatherName` varchar(100) DEFAULT NULL,
  `MotherName` varchar(100) DEFAULT NULL,
  `Class` varchar(4) DEFAULT NULL,
  `Section` char(1) DEFAULT NULL,
  `Address` varchar(250) DEFAULT NULL,
  `City` varchar(50) DEFAULT NULL,
  `State` varchar(50) DEFAULT NULL,
  `Pincode` varchar(100) DEFAULT NULL,
  `NickName` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`StudentUid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `surcharge_slab`
--

DROP TABLE IF EXISTS `surcharge_slab`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `surcharge_slab` (
  `SurchargeSlabId` bigint NOT NULL AUTO_INCREMENT,
  `MinSurcahrgeSlab` decimal(10,0) DEFAULT NULL,
  `MaxSurchargeSlab` decimal(10,0) DEFAULT NULL,
  `SurchargeRatePercentage` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`SurchargeSlabId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `tablecolumnmapping`
--

DROP TABLE IF EXISTS `tablecolumnmapping`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tablecolumnmapping` (
  `MappingId` bigint NOT NULL AUTO_INCREMENT,
  `PageName` varchar(100) DEFAULT NULL,
  `ColumnName` varchar(50) DEFAULT NULL,
  `DisplayName` varchar(50) DEFAULT NULL,
  `Style` varchar(250) DEFAULT NULL,
  `ClassName` varchar(100) DEFAULT NULL,
  `IsHidden` bit(1) DEFAULT NULL,
  PRIMARY KEY (`MappingId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `tax_age_group`
--

DROP TABLE IF EXISTS `tax_age_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tax_age_group` (
  `AgeGroupId` int NOT NULL AUTO_INCREMENT,
  `StartAgeGroup` int DEFAULT NULL,
  `EndAgeGroup` int DEFAULT NULL,
  PRIMARY KEY (`AgeGroupId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `tax_regime`
--

DROP TABLE IF EXISTS `tax_regime`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tax_regime` (
  `TaxRegimeId` int NOT NULL AUTO_INCREMENT,
  `RegimeDescId` int DEFAULT NULL,
  `StartAgeGroup` int DEFAULT NULL,
  `EndAgeGroup` int DEFAULT NULL,
  `MinTaxSlab` decimal(10,0) DEFAULT NULL,
  `MaxTaxSlab` decimal(10,0) DEFAULT NULL,
  `TaxRatePercentage` int DEFAULT NULL,
  `TaxAmount` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`TaxRegimeId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `tax_regime_desc`
--

DROP TABLE IF EXISTS `tax_regime_desc`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tax_regime_desc` (
  `TaxRegimeDescId` int NOT NULL AUTO_INCREMENT,
  `RegimeName` varchar(45) DEFAULT NULL,
  `Description` varchar(500) DEFAULT NULL,
  `IsDefaultRegime` bit(1) DEFAULT b'0',
  PRIMARY KEY (`TaxRegimeDescId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `tax_sections`
--

DROP TABLE IF EXISTS `tax_sections`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tax_sections` (
  `TaxSectionId` int NOT NULL AUTO_INCREMENT,
  `SectionName` varchar(100) NOT NULL,
  `SectionCodes` json NOT NULL,
  `IsSectionMaxAmount` bit(1) DEFAULT NULL,
  `MaxAmount` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`TaxSectionId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `user_layout_configuration`
--

DROP TABLE IF EXISTS `user_layout_configuration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `user_layout_configuration` (
  `EmployeeId` bigint NOT NULL,
  `SettingsJson` json DEFAULT NULL,
  PRIMARY KEY (`EmployeeId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `usercomments`
--

DROP TABLE IF EXISTS `usercomments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `usercomments` (
  `CommentsId` bigint NOT NULL AUTO_INCREMENT,
  `UserId` bigint DEFAULT NULL,
  `UserName` varchar(100) DEFAULT NULL,
  `Email` varchar(100) DEFAULT NULL,
  `Title` varchar(50) NOT NULL,
  `Comments` varchar(500) NOT NULL,
  `CreatedOn` datetime(6) NOT NULL,
  `UpdatedOn` datetime(6) DEFAULT NULL,
  `Company` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`CommentsId`),
  KEY `FK_UserComments_UserId` (`UserId`),
  CONSTRAINT `FK_UserComments_UserId` FOREIGN KEY (`UserId`) REFERENCES `userdetail` (`UserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `userdetail`
--

DROP TABLE IF EXISTS `userdetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `userdetail` (
  `UserId` bigint NOT NULL AUTO_INCREMENT,
  `FirstName` varchar(50) NOT NULL,
  `LastName` varchar(50) DEFAULT NULL,
  `Address` varchar(250) DEFAULT NULL,
  `EmailId` varchar(100) NOT NULL,
  `Mobile` varchar(14) DEFAULT NULL,
  `CompanyName` varchar(100) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`UserId`),
  UNIQUE KEY `UQ__UserDeta__B916E1C73D6300B3` (`EmailId`),
  UNIQUE KEY `UQ__UserDeta__B916E1C7675CE8E9` (`EmailId`),
  UNIQUE KEY `UQ__UserDeta__D037FED5ECCB2FF4` (`Mobile`),
  UNIQUE KEY `UQ__UserDeta__D037FED5B0CF58A8` (`Mobile`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `userfiledetail`
--

DROP TABLE IF EXISTS `userfiledetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `userfiledetail` (
  `FileId` bigint NOT NULL AUTO_INCREMENT,
  `FileOwnerId` bigint NOT NULL,
  `FilePath` varchar(500) NOT NULL,
  `ParentFolder` varchar(500) DEFAULT NULL,
  `FileName` varchar(100) NOT NULL,
  `FileExtension` varchar(100) DEFAULT NULL,
  `ItemStatusId` bigint DEFAULT NULL,
  `UserTypeId` int NOT NULL DEFAULT '0',
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime(6) DEFAULT NULL,
  `UpdatedOn` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`FileId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `userlogin`
--

DROP TABLE IF EXISTS `userlogin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `userlogin` (
  `UserId` bigint NOT NULL AUTO_INCREMENT,
  `UserDetailId` mediumtext,
  `EmployeeId` mediumtext,
  `UserTypeId` int DEFAULT '1',
  `AccessLevelId` bigint DEFAULT NULL,
  `Password` varchar(50) NOT NULL,
  `Email` varchar(100) NOT NULL,
  `Mobile` varchar(14) DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `UpdatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime DEFAULT NULL,
  `UpdatedOn` datetime DEFAULT NULL,
  PRIMARY KEY (`UserId`),
  UNIQUE KEY `Email` (`Email`),
  UNIQUE KEY `Mobile` (`Mobile`),
  KEY `FK_UserLogin_AccessLevelId` (`AccessLevelId`),
  KEY `FK_UserLogin_CreatedBy` (`CreatedBy`),
  KEY `FK_UserLogin_UpdatedBy` (`UpdatedBy`),
  CONSTRAINT `FK_UserLogin_AccessLevelId` FOREIGN KEY (`AccessLevelId`) REFERENCES `accesslevel` (`AccessLevelId`),
  CONSTRAINT `FK_UserLogin_CreatedBy` FOREIGN KEY (`CreatedBy`) REFERENCES `userdetail` (`UserId`),
  CONSTRAINT `FK_UserLogin_UpdatedBy` FOREIGN KEY (`UpdatedBy`) REFERENCES `userdetail` (`UserId`),
  CONSTRAINT `FK_UserLogin_UserId` FOREIGN KEY (`UserId`) REFERENCES `userdetail` (`UserId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `usertypedetail`
--

DROP TABLE IF EXISTS `usertypedetail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `usertypedetail` (
  `UserTypeId` int NOT NULL AUTO_INCREMENT,
  `RoleName` varchar(50) DEFAULT NULL,
  `RoleDescription` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`UserTypeId`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `vehicleandbrands`
--

DROP TABLE IF EXISTS `vehicleandbrands`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `vehicleandbrands` (
  `RowIndex` int NOT NULL,
  `VehicleName` varchar(250) NOT NULL,
  `BrandName` varchar(100) NOT NULL,
  `OwnerName` varchar(250) DEFAULT NULL,
  `CreateOn` datetime(6) DEFAULT NULL,
  PRIMARY KEY (`RowIndex`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `work_shifts`
--

DROP TABLE IF EXISTS `work_shifts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `work_shifts` (
  `WorkShiftId` int NOT NULL,
  `CompanyId` int DEFAULT NULL,
  `Department` int DEFAULT NULL,
  `WorkFlowCode` varchar(10) DEFAULT NULL,
  `ShiftTitle` varchar(100) DEFAULT NULL,
  `Description` varchar(500) DEFAULT NULL,
  `IsMon` bit(1) DEFAULT NULL,
  `IsTue` bit(1) DEFAULT NULL,
  `IsThu` bit(1) DEFAULT NULL,
  `IsWed` bit(1) DEFAULT NULL,
  `IsFri` bit(1) DEFAULT NULL,
  `IsSat` bit(1) DEFAULT NULL,
  `IsSun` bit(1) DEFAULT NULL,
  `TotalWorkingDays` int DEFAULT NULL,
  `StartDate` datetime NOT NULL,
  `EndDate` datetime NOT NULL,
  `OfficeTime` varchar(5) DEFAULT NULL,
  `Duration` int DEFAULT NULL,
  `LunchDuration` int DEFAULT NULL,
  `Status` int DEFAULT NULL,
  `LastUpdatedOn` datetime DEFAULT NULL,
  `CreatedBy` bigint DEFAULT NULL,
  `CreatedOn` datetime NOT NULL,
  PRIMARY KEY (`WorkShiftId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `worldcities`
--

DROP TABLE IF EXISTS `worldcities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `worldcities` (
  `RowIndex` double DEFAULT NULL,
  `City` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `CityAscii` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Lat` double DEFAULT NULL,
  `Lng` double DEFAULT NULL,
  `Country` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `ISO2` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `ISO3` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `State` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Capital` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `Population` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping events for database 'emstum_bottomhalf_11_05_24'
--

--
-- Dumping routines for database 'emstum_bottomhalf_11_05_24'
--
/*!50003 DROP FUNCTION IF EXISTS `Fn_GenerateRandom_nextBill` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `Fn_GenerateRandom_nextBill`(
	_BillTypeId int
) RETURNS varchar(25) CHARSET utf8mb4
    DETERMINISTIC
BEGIN
	Set @LoopCount = 0;
	Set @NextBillNo = '';
    Set @LastBillNo = 0;
    Set @Length = 0;
	
	SELECT LastBillNo, BillNoLength
	FROM bills WHERE BillTypeUid = _BillTypeId into @LastBillNo, @Length;
    Set @LastBillNo = @LastBillNo + 1;
	if(@LastBillNo > 0) then
		Begin
			Set @Length = @Length - LENGTH(CAST(@LastBillNo as char(50)));
			if(@Length > 0) then
				Begin
					SET @LoopCount = 0;
					SET @NextBillNo = @LastBillNo;
					WHILE (@LoopCount < @Length) do
						BEGIN
							SET @NextBillNo = CONCAT('0', @NextBillNo);
							SET @LoopCount = @LoopCount + 1;
						End;
					End while;
				END;
			End if;
		End;
	End if;
	SET @NextBillNo = CONCAT('#', @NextBillNo);
	RETURN @NextBillNo;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `Fn_Generate_newPassword` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `Fn_Generate_newPassword`() RETURNS varchar(50) CHARSET utf8mb4
    DETERMINISTIC
BEGIN
	Set @NewPassword = null;
	Set @RowIndex = 0;
	Set @TotalRecords = 0;
	Select Count(1) from sportsname into @TotalRecords;
	SELECT FLOOR((RAND() * (@TotalRecords - 1 + 1)) + 1) into @RowIndex;
	
	Select SportName from sportsname where RowIndex = @RowIndex 
	into @NewPassword;
	Set @NewPassword = Concat("Bottomhalf_09@", Replace(@NewPassword, ' ', ''));
	RETURN @NewPassword;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_AccessLevel_InsUpd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_AccessLevel_InsUpd`(
	_AccessLevelId varchar(50),
    _RoleName varchar(100),
    _AccessCodeDefination varchar(100),
    out _ProcessingResult varchar(100)
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
		
			Set autocommit = OFF;
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_AccessLevel_InsUpd', 1, 0, @Result);
			Set _ProcessingResult = Concat(@Message, @Result);
		end;

		Set autocommit = ON;
		Set @AccessLevelId = 0;        
        if not exists(Select 1 from accesslevel where AccessLevelId = _AccessLevelId)then
        Begin
			if exists(Select 1 from accesslevel where lower(RoleName) = lower(_RoleName)) then
			begin
				Select AccessLevelId from accesslevel  
				where lower(RoleName) = lower(_RoleName) into @AccessLevelId;
				
				Update accesslevel Set AccessCodeDefination = _AccessCodeDefination, 
				UpdatedOn = now() where lower(RoleName) = lower(_RoleName);
			end;
			else
			begin
				Insert into accesslevel values(default, _RoleName, _AccessCodeDefination, now(), NULL);
			end;
			end if;    
            
            Set _ProcessingResult = LAST_INSERT_ID();
		end;
        else
        begin
			Update accesslevel Set RoleName = _RoleName, 
				AccessCodeDefination = _AccessCodeDefination, 
				UpdatedOn = now() 
            where AccessLevelId = _AccessLevelId;
                    
			Set _ProcessingResult = _AccessLevelId;
        end;
        end if;
        
        Set autocommit = OFF;
        Select AccessLevelId, RoleName, AccessCodeDefination from accesslevel;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_AccessLevel_Sel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_AccessLevel_Sel`(
	


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_AccessLevel_Sel', 1, 0, @Result);
		End;

        Begin
            Select AccessLevelId, RoleName, AccessCodeDefination from accesslevel;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_active_employees_by_ids` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_active_employees_by_ids`(
	_EmployeeIds json


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_active_employees_by_ids', 1, 0, @Result);
	End;
    
	Select 
		e.EmployeeUid, 
		l.OrganizationId,
		e.FirstName,
		e.LastName,
		e.Mobile,
		e.Email,
		e.LeavePlanId,
		e.PayrollGroupId,
		e.SalaryGroupId,
		e.CompanyId,
		e.NoticePeriodId,
		ep.SecondaryMobile,
		ep.Gender,
		ep.Address,
		ep.IsPermanent,
		ep.ActualPackage,
		ep.FinalPackage,
		ep.TakeHomeByCandidate,					
		epro.EmpProfDetailUid,
		epro.ExprienceInYear,
		epro.Specification,
		epro.PANNo,
		epro.AadharNo,
		epro.AccountNumber,
		epro.BankName,
		epro.BranchName,
		epro.Domain,
		epro.IFSCCode,
		epro.LastCompanyName,
		l.AccessLevelId,
		l.UserTypeId,
        ep.DOB,
		ep.FatherName,
		ep.MotherName,
		ep.SpouseName,        		
		ep.State,
		ep.City,
		ep.Pincode,				
		epro.Specification,
		epro.ExprienceInYear,
		ep.IsPermanent,
		ep.ActualPackage,
		ep.FinalPackage,
		ep.TakeHomeByCandidate,
		e.ReportingManagerId,
		e.DesignationId,
		l.AccessLevelId,
		l.UserTypeId,
		es.CTC,
		e.WorkShiftId,
        ed.EmployeeDeclarationId
	from employees e
	inner join employeelogin l on l.EmployeeId = e.EmployeeUid
    inner join employee_salary_detail es on es.EmployeeId = e.EmployeeUid
    inner join employee_declaration ed on e.EmployeeUid = ed.EmployeeId
	Left Join employeepersonaldetail ep on e.EmployeeUid = ep.EmployeeUid
	left join employeeprofessiondetail epro on e.EmployeeUid = epro.EmployeeUid
	Where e.EmployeeUid in (
		SELECT *
		 FROM
		   JSON_TABLE(
			 _EmployeeIds,
			 "$[*]"
			 COLUMNS(
			   Value INT PATH "$"
			 )
		 ) data
	);
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_add_next_attendance_records_by_job_ins` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_add_next_attendance_records_by_job_ins`(
    
/*

	call sp_add_next_attendance_records_by_job_ins();

*/    
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_add_next_attendance_records_by_job_ins', 1, 0, @Result);
	end;
    
	Set @counter = 0;
    Set @maxId = 0;
    Set @attrId = 0;
    Set @fromDate = 0;
    
    select AttendanceId, AttendanceDate into @attrId, @fromDate from daily_attendance
    order by AttendanceDate desc 
    limit 1;
    
    Select Max(EmployeeUid) into @maxId from employees;
    Set @id = 1;
    
    Set @limitDate = date_add(utc_timestamp(), interval 10 day);
    Set @dayLimit = datediff(@limitDate, @fromDate);
    
    # select @fromDate, @limitDate, @dayLimit;
    Set @fromDate = DATE_ADD(@fromDate, interval 1 Day);
    
   while (@dayLimit > 0) do
    begin
    
		Set @id = 1;
		while(@id <= @maxId) do
		begin
			if exists(Select 1 from employees where EmployeeUid = @id and IsActive = true) then
			begin
				INSERT INTO daily_attendance
				SELECT
					@attrId:= @attrId + 1,
					e.EmployeeUid,
					CONCAT(e.FirstName, ' ', e.LastName),
					e.Email,
					0 AS ReviewerId,
					null,
					null,
					0 AS ProjectId,
					0 AS TaskId,
					0 AS TaskType,
					'00:00:00' AS LogOn,
					'00:00:00' AS LogOff,
					480 AS TotalMinutes, -- Random number of minutes (0 to 480)
					'[]' AS Comments,
					Case
						When weekday(@fromDate) = 6
						then 3
						else 0
					End AS AttendanceStatus,
					WEEKOFYEAR(@fromDate) AS WeekOfYear,
					@fromDate AS AttendanceDate,
					1,
					false,
					0,
					1 AS CreatedBy,
					NOW() AS CreatedOn,
					NULL AS UpdatedBy,
					NULL AS UpdatedOn
				FROM employees e 
				where EmployeeUid = @id;
			end;
			end if;
			
			Set @id = @id + 1;			
		end;
		end while;
        
        Set @fromDate = DATE_ADD(@fromDate, interval 1 Day);
        Set @dayLimit = @dayLimit - 1;
	end;
    end while;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_adhoc_detail_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_adhoc_detail_get`(


)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_adhoc_detail_get', 1, 0, @Result);
			end;  
		
		select * from adhoc_detail;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_adhoc_detail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_adhoc_detail_insupd`(


	_AdHocId int,
    _Name varchar(100),
    _Description varchar(250),
    _AdminId bigint,
    out _ProcessingResult varchar(100)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_adhoc_detail_insupd', 1, 0, @Result);
			end;  
		
		if not exists(select 1 from adhoc_detail where AdHocId = _AdHocId) then
        begin
			insert into adhoc_detail
            values(
				default,
				_Name,
				_Description,
				utc_timestamp(),
                null,
                _AdminId,
                null
            );
            
            Set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update adhoc_detail set				
				Name					=			_Name,
				Description				=			_Description,
				UpdatedBy				=			_AdminId,
                UpdatedOn				=			utc_timestamp()
            where AdHocId = _AdHocId;
            
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_admin_dashboard_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_admin_dashboard_get`(
    _ForYear int,
    _ForMonth int,
    _Period int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_admin_dashboard_get', 1, 0, @Result);
	end;

	select 
		PayableToEmployee,
		PFByEmployer,
		ProfessionalTax,
		ForYear,
		ForMonth
	from payroll_monthly_detail
	where ForYear = _ForYear;

	select 
		amount as Amount,
		paidon PaidOn
	from gstdetail
	where year(paidon) = _ForYear;

	select 
		PaidAmount as Amount,
		PaidOn
	from billdetail
	where Year(PaidOn) = _ForYear;
			 
	select 
		ProjectId, 
		ProjectName, 
		ProjectStartedOn, 
		IsClientProject,
		HomePageUrl
	from project;
	
	select 
		ClientId,
		ClientName,
		Email, 
		MobileNo as Mobile
	from clients;
	
	select 
		EmployeeUid,
		concat(FirstName, ' ', LastName) FullName,
		Mobile,
		Email,
		CreatedOn
	from employees
	where datediff(utc_timestamp(), CreatedOn) <= _Period
	and datediff(utc_timestamp(), CreatedOn) > 0;            
	
	select 
		concat(e.FirstName, ' ', e.LastName) FullName,
        LeaveRequestNotificationId,
        FromDate,
        ToDate,
        UserMessage
    from leave_request_notification l
    inner join employees e on e.EmployeeUid = l.EmployeeId
	where Date(utc_timestamp()) between Date(FromDate) and Date(ToDate);
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_annexure_offer_letter_getby_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_annexure_offer_letter_getby_id`(



	_AnnexureOfferLetterId int
)
Begin
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, '', 'sp_annexure_offer_letter_getby_id', 1, 0, @Result);
			end;  
		
		select * from annexure_offer_letter
        where AnnexureOfferLetterId = _AnnexureOfferLetterId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_annexure_offer_letter_getby_lettertype` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_annexure_offer_letter_getby_lettertype`(
	   
	_CompanyId int, 
    _LetterType int
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_annexure_offer_letter_getby_lettertype', 1, 0, @Result);
		end;
        select * from annexure_offer_letter where LetterType =  _LetterType and CompanyId = _CompanyId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_annexure_offer_letter_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_annexure_offer_letter_insupd`(
	   
	_AnnexureOfferLetterId int,
	_CompanyId int, 
	_TemplateName varchar(145), 
	_FilePath varchar(500),
	_FileId int,
    _AdminId int,
    _LetterType int,
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_annexure_offer_letter_insupd', 1, 0, @Result);
		end;
        Set @LetterId = 0;
        if not exists (select 1 from annexure_offer_letter where AnnexureOfferLetterId = _AnnexureOfferLetterId) then
        begin
			Set @LetterId = 0;
			Select AnnexureOfferLetterId from annexure_offer_letter order by AnnexureOfferLetterId desc limit 1 into @LetterId ;
			Set @LetterId = @LetterId+1;

			Insert into annexure_offer_letter values(
				 @LetterId,
				_CompanyId, 
				_TemplateName, 
				_FilePath,
				_FileId,
                _LetterType,
				_AdminId,
                utc_timestamp()
			);
         
             Set _ProcessingResult = @LetterId;
        end;
        else
        begin
			set @LetterId = _AnnexureOfferLetterId;
			update annexure_offer_letter set 
				CompanyId					=			_CompanyId,
				TemplateName				=			_TemplateName, 
				FilePath					=			_FilePath,
				FileId						=			_FileId,
                LetterType					=			_LetterType,
				UpdatedBy					=			_AdminId,
                UpdatedOn					=			utc_timestamp()
			where AnnexureOfferLetterId 	= 			_AnnexureOfferLetterId;
            Set _ProcessingResult = @LetterId;
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_ApplicationData_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ApplicationData_Get`(


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_ApplicationData_Get', 1, 0, @Result);
		End;

        Begin            
            select * from accesslevel;
            
            select * from leave_plan;
            
            select 
				CompanyId,
				OrganizationId,
				OrganizationName,
				CompanyName,
				Country,
				State,
				City,
				FirstAddress,
				SecondAddress,
				ThirdAddress,
				ForthAddress,
				FullAddress,
				MobileNo,
				Email,
				FirstEmail,
				SecondEmail,
				ThirdEmail,
				ForthEmail,
				PrimaryPhoneNo,
				SecondaryPhoneNo,
				Fax,
				Pincode,
				IsPrimaryCompany,
				FixedComponentsId
            from company;            
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_application_setting_get_by_compid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_application_setting_get_by_compid`(

    _CompanyId int,
    _SettingsCatagoryId int
    -- call sp_application_setting_get_by_compid(1, 1)
)
Begin
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, '', 'sp_application_setting_get_by_compid', 1, 0, @Result);
			end;  
		
		select * from application_setting 
        where CompanyId = _CompanyId
        and SettingsCatagoryId = _SettingsCatagoryId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_application_setting_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_application_setting_insupd`(


	_ApplicationSettingId int,
    _OrganizationId int,
    _CompanyId int,
    _SettingsCatagoryId int,
    _SettingDetails text,
    out _ProcessingResult varchar(100)
)
Begin
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, '', 'sp_application_setting_insupd', 1, 0, @Result);
			end;  
		
		if not exists(select * from application_setting where ApplicationSettingId = _ApplicationSettingId) then
		begin
			set @applicationSettingId = 0;
            select ApplicationSettingId into @applicationSettingId from application_setting
            order by ApplicationSettingId desc limit 1;
            set @applicationSettingId = @applicationSettingId + 1;

			insert into application_setting
			values(
				@applicationSettingId,
				_OrganizationId,
				_CompanyId,
				_SettingsCatagoryId,
				_SettingDetails
			);
			
			Set _ProcessingResult = 'inserted';
		end;
		else
		begin
			update application_setting set				
				SettingsCatagoryId 			=			_SettingsCatagoryId,
				SettingDetails				=			SettingDetails
			where ApplicationSettingId = _ApplicationSettingId;
			
			Set _ProcessingResult = 'updated';
		end;
		end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_appraisal_by_project_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_appraisal_by_project_get`(

	_ProjectId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_appraisal_by_project_get', 1, 0, @Result);
	end;
    
    select * from employee_performance;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_appraisal_chain_levelby_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_appraisal_chain_levelby_id`(
    _AppraisalChainLevelId int

	# call sp_appraisal_chain_levelby_id(1)
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_appraisal_chain_levelby_id', 1, 0, @Result);
		End;
        
		select * from appraisal_chain_level where AppraisalChainLevelId = _AppraisalChainLevelId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_appraisal_chain_levelby_role_obj_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_appraisal_chain_levelby_role_obj_id`(
	_RoleId int,
    _ObjectiveCatagoryId int,
    _ApprovalRoleId int

	# call sp_appraisal_chain_levelby_role_obj_id(25, 2)
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_appraisal_chain_levelby_role_obj_id', 1, 0, @Result);
		End;
        
		select * from appraisal_chain_level 
        where RoleId = _RoleId 
        and ObjectiveCatagoryId = _ObjectiveCatagoryId 
        and ApprovalRoleId = _ApprovalRoleId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_appraisal_detail_finalizer_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_appraisal_detail_finalizer_id`(
        _EmployeeId bigint
        
        # call sp_appraisal_detail_finalizer_id(2)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);  
		Call sp_LogException (@Message, '', 'sp_appraisal_detail_finalizerId', 1, 0, @Result);
	end;
	
	
    select a.*, e.FirstName, e.LastName, ar.ReactedOn, ar.Status, ar.ReviwerId from appraisal_review_detail a
    inner join appraisal_review_finalizer_status ar on ar.AppraisalReviewId = a.AppraisalReviewId
    inner join employees e on e.EmployeeUid = a.EmployeeId
    where ar.ReviwerId = _EmployeeId;
	   
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_appraisal_review_detail_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_appraisal_review_detail_by_id`(
	_AppraisalReviewId bigint

	# call sp_appraisal_chain_levelby_role_obj_id(1)
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_appraisal_review_detail_by_id', 1, 0, @Result);
		End;
        
		select * from appraisal_review_detail where AppraisalReviewId = _AppraisalReviewId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_appraisal_review_detail_reopen_review` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_appraisal_review_detail_reopen_review`(
    _EmployeeId bigint,
    _AppraisalReviewIds json,
    out _ProcessingResult varchar(50)
    
/*

	Set @result = '';
	call sp_appraisal_review_detail_reopen_review(5, '[1, 2]', @result)
    select @result;
 
 */


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
        Set _ProcessingResult = 'fail';
		Call sp_LogException(@Message, '', 'sp_appraisal_review_detail_reopen_review', 1, 0, @Result);
	End;
    
    create temporary table if not exists appraisal_finelizer_temptable as (
		select f.AppraisalFinalizer from appraisal_review_finalizer_status f
		where f.AppraisalReviewId in (SELECT *
			FROM
			JSON_TABLE(
				_AppraisalReviewIds,
				'$[*]'
				COLUMNS (
					id INT PATH '$'
				)
			) AS t
		)
		and f.ReviwerId = _EmployeeId
	);

	with cte
    as (
		select * from appraisal_finelizer_temptable
    )
    -- select cte.AppraisalFinalizer from cte;
    update appraisal_review_finalizer_status af 
    JOIN cte on af.AppraisalFinalizer = cte.AppraisalFinalizer
    set af.Status = 2;
    
	drop table if exists appraisal_finelizer_temptable;
    Set _ProcessingResult = 'updated';
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_appraisal_review_finalaizer_status_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_appraisal_review_finalaizer_status_by_id`(
	_AppraisalReviewId bigint

	# call sp_appraisal_review_finalaizer_status_by_id(1)
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_appraisal_review_finalaizer_status_by_id', 1, 0, @Result);
		End;
        
		select * from appraisal_review_finalizer_status where AppraisalReviewId = _AppraisalReviewId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_approval_chain_detail_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_approval_chain_detail_by_id`(

/*

	Call sp_approval_chain_detail_by_id(1, 1);

*/
	_ApprovalWorkFlowId int,
    _CompanyId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_approval_chain_detail_by_id', 1, 0, @Result);
	end;
    
    select 			
		f.Title,
		f.TitleDescription,
		f.Status,
		f.IsAutoExpiredEnabled,
		f.AutoExpireAfterDays,
		f.IsSilentListner,
		f.ListnerDetail, w.* 
	from approval_work_flow f
	inner join approval_chain_detail w on w.ApprovalWorkFlowId = f.ApprovalWorkFlowId
	where f.ApprovalWorkFlowId = _ApprovalWorkFlowId;
    
	select * from org_hierarchy where CompanyId = _CompanyId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_approval_chain_detail_delete_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_approval_chain_detail_delete_byid`(
	   
	_ApprovalChainDetailId int,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_approval_chain_detail_delete_byid', 1, 0, @Result);
		end;
		set @approvalWorkFlowId = 0;
        select ApprovalWorkFlowId from approval_chain_detail where ApprovalChainDetailId = _ApprovalChainDetailId into @approvalWorkFlowId;
        
        delete from approval_chain_detail where ApprovalChainDetailId = _ApprovalChainDetailId;
        Set _ProcessingResult = @approvalWorkFlowId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_approval_chain_detail_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_approval_chain_detail_filter`(


	_SearchString varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_approval_chain_detail_filter', 1, 0, @Result);
	end;
    
    set @SelectQuery = Concat('select 			
		f.Title,
		f.TitleDescription,
		f.Status,
		f.IsAutoExpiredEnabled,
		f.AutoExpireAfterDays,
		f.IsSilentListner,
		f.ListnerDetail, w.* from approval_chain_detail w
		inner join approval_work_flow f on w.ApprovalWorkFlowId = f.ApprovalWorkFlowId
		where ', _SearchString
    );
    
    
	prepare SelectQuery from @SelectQuery;
	execute SelectQuery;	
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_approval_chain_detail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_approval_chain_detail_insupd`(



	_ApprovalChainDetailId int,
    _ApprovalWorkFlowId int,
    _AssignieId bigint,
    _IsRequired bit,
    _IsForwardEnabled bit,
    _ForwardWhen int,
    _ForwardAfterDays int,
    _ApprovalStatus int,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_approval_chain_detail_insupd', 1, 0, @Result);
	end;
	
	Set _ProcessingResult = '';
	Begin
		If not exists (Select 1 from approval_chain_detail where ApprovalChainDetailId = _ApprovalChainDetailId) then
		Begin
			set @ApprovalChainDetailId = 0;
            select ApprovalChainDetailId into @ApprovalChainDetailId from approval_chain_detail
            order by ApprovalChainDetailId desc limit 1;
            set @ApprovalChainDetailId = @ApprovalChainDetailId + 1;

			Insert into approval_chain_detail values(
				@ApprovalChainDetailId,
				_ApprovalWorkFlowId,
				_AssignieId,
				_IsRequired,
				_IsForwardEnabled,
				_ForwardWhen,
				_ForwardAfterDays,
				utc_timestamp(),
				_ApprovalStatus
			);
			
			Set _ProcessingResult = 'inserted';
		End;
		Else
		Begin
			Update approval_chain_detail Set
				AssignieId 			= 		_AssignieId,
				IsRequired 			=		_IsRequired,
				IsForwardEnabled	=		_IsForwardEnabled,
				ForwardWhen			=		_ForwardWhen,
				ForwardAfterDays	=		_ForwardAfterDays,
				LastUpdatedOn		=		utc_timestamp(),
				ApprovalStatus		=		_ApprovalStatus
			where 	ApprovalChainDetailId = _ApprovalChainDetailId;
			
			Set _ProcessingResult = 'updated';
		End;
		End if;	
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_approval_chain_detail_upd_by_workflowId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_approval_chain_detail_upd_by_workflowId`(



    _ApprovalWorkFlowId int,
    _AssignieId bigint,
    _IsRequired bit,
    _IsForwardEnabled bit,
    _ForwardWhen int,
    _ForwardAfterDays int,
    _ApprovalStatus int,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		
        set sql_safe_updates = 1;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_approval_chain_detail_upd_by_workflowId', 1, 0, @Result);
	end;
	
	Set _ProcessingResult = '';
	Begin
		If exists (Select 1 from approval_chain_detail where ApprovalWorkFlowId = _ApprovalWorkFlowId) then		
		Begin
			set sql_safe_updates = 0;
            
			Update approval_chain_detail Set
				AssignieId 				= 		_AssignieId,
				IsRequired 				=		_IsRequired,
				IsForwardEnabled		=		_IsForwardEnabled,
				ForwardWhen				=		_ForwardWhen,
				ForwardAfterDays		=		_ForwardAfterDays,
				LastUpdatedOn			=		utc_date(),
				ApprovalStatus			=		_ApprovalStatus
			where ApprovalWorkFlowId 	= 		_ApprovalWorkFlowId;
			
			Set _ProcessingResult = 'updated';
            set sql_safe_updates = 1;
		End;
		End if;	
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_approval_workflow_chain_del` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_approval_workflow_chain_del`(



	_ApprovalWorkFlowId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Rollback;
        set sql_safe_updates = 1;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_approval_workflow_chain_del', 1, 0, @Result);
	end;
	
	Start Transaction;
    set sql_safe_updates = 0;
	if exists(select 1 from approval_work_flow where ApprovalWorkFlowId = _ApprovalWorkFlowId) then
	begin
		delete from approval_work_flow 
		where ApprovalWorkFlowId = _ApprovalWorkFlowId;
	end;
    end if;

	If exists (Select 1 from approval_chain_detail where ApprovalChainDetailId = _ApprovalChainDetailId) then
	Begin
		delete from approval_chain_detail 
		where ApprovalWorkFlowId = _ApprovalWorkFlowId;
	End;
	End if;	
    
    Commit;
    set sql_safe_updates = 1;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_approval_work_flow_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_approval_work_flow_filter`(


	_SearchString varchar(250),
	_SortBy varchar(50),
	_PageIndex int,
	_PageSize int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_approval_work_flow_filter', 1, 0, @Result);
	end;
    
    if (_SortBy is null or _SortBy = '') then
		set _SortBy = 'UpdatedOn desc, CreatedOn desc';
	end if;
    
	set @SelectQuery = Concat('select * from (
		select 
        Row_Number() over(Order by ', _SortBy, ') as RowIndex,
        w.*,
        Count(1) Over() as Total from approval_work_flow w
		where ', _SearchString, '
    ) T where RowIndex between ', (_PageIndex - 1) * _PageSize + 1 ,' and ', (_PageIndex * _PageSize)) ;

    
	prepare SelectQuery from @SelectQuery;
	execute SelectQuery;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_approval_work_flow_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_approval_work_flow_insupd`(



	_ApprovalWorkFlowId int,
    _Title varchar(50),
    _TitleDescription varchar(500),
    _Status int,
    _IsAutoExpiredEnabled bit,
    _AutoExpireAfterDays int,
    _IsSilentListner bit,
    _ListnerDetail json,
    _AdminId bigint,
    _NoOfApprovalLevel int,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_approval_work_flow_insupd', 1, 0, @Result);
	end;
	
	Set _ProcessingResult = '';
	Begin
		If not exists (Select * from approval_work_flow where ApprovalWorkFlowId = _ApprovalWorkFlowId) then
		Begin
			set @ApprovalWorkFlowId = 0;
            select ApprovalWorkFlowId into @ApprovalWorkFlowId from approval_work_flow
            order by ApprovalWorkFlowId desc limit 1;
            set @ApprovalWorkFlowId = @ApprovalWorkFlowId + 1;

			Insert into approval_work_flow values(
				@ApprovalWorkFlowId,
				_Title,
				_TitleDescription,
				_Status,
				_IsAutoExpiredEnabled,
				_AutoExpireAfterDays,
                _NoOfApprovalLevel,
				_IsSilentListner,
				_ListnerDetail,
                _AdminId,
                0,
                utc_timestamp(),
                null
			);
			
			Set _ProcessingResult = @ApprovalWorkFlowId;
		End;
		Else
		Begin
			Update approval_work_flow Set
				Title					=		_Title,
				TitleDescription		=		_TitleDescription,
				IsAutoExpiredEnabled	=		_IsAutoExpiredEnabled,
				AutoExpireAfterDays		=		_AutoExpireAfterDays,
                IsSilentListner			=		_IsSilentListner,
				ListnerDetail			=		_ListnerDetail,
                NoOfApprovalLevel		=		_NoOfApprovalLevel,
				Status					=		_Status,
				UpdatedBy           	=       _AdminId,
				UpdatedOn				=		utc_timestamp()
			where 	ApprovalWorkFlowId 		= 		   _ApprovalWorkFlowId;
			
			Set _ProcessingResult = _ApprovalWorkFlowId;
		End;
		End if;	
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attandence_detail_by_employeeId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attandence_detail_by_employeeId`(



    _EmployeeId bigint
)
Begin
    Set @OperationStatus = '';
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, @OperationStatus, 'sp_attandence_detail_by_employeeId', 1, 0, @Result);
		end;
		
		select c.*, ec.IsActive from clients c
        inner join employeemappedclients ec on c.ClientId = ec.ClientUid
        where ec.EmployeeUid = _EmployeeId and ec.IsActive = true;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_detall_pending` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_detall_pending`(



    _EmployeeId bigint,
    _UserTypeId int,
    _ForMonth int,
    _ForYear int
)
Begin
    Set @OperationStatus = '';
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, @OperationStatus, 'sp_attendance_detall_pending', 1, 0, @Result);
		end;
        
		Select 
			a.*
		from attendance a   
		Where a.EmployeeId = _EmployeeId
        And a.UserTypeId = _UserTypeId
        And ForYear = _ForYear and ForMonth = _ForMonth
        And TotalDays <> DaysPending;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_employee_detail_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_employee_detail_id`(
	_EmployeeId bigint, 
    _AttendanceIds json

)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_attendance_employee_detail_id', 1, 0, @Result);
		End;
		
        select u.* from daily_attendance u
		inner join (
		SELECT *
			 FROM
			   JSON_TABLE(
				 _AttendanceIds,
				 "$[*]"
				 COLUMNS(
				   col INT PATH "$"
				 )
			   ) data
		) t on u.AttendanceId = t.col;
        
        select * from employees
        where EmployeeUid = _EmployeeId;
        
        select u.* from complaint_or_request u
		inner join (
		SELECT *
			 FROM
			   JSON_TABLE(
				 _AttendanceIds,
				 "$[*]"
				 COLUMNS(
				   col INT PATH "$"
				 )
			   ) data
		) t on u.TargetId = t.col;
        
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_get`(

    _EmployeeId bigint,
    _StartDate datetime,
    _ForYear int,
    _ForMonth int,
    _CompanyId int,
    _RequestTypeId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Drop table if exists employeeTempTable;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, @OperationStatus, 'sp_attendance_get', 1, 0, @Result);
	end;
	
	
	Select 
		a.*
	from attendance a   
	Where a.EmployeeId = _EmployeeId
	And _ForYear = a.ForYear and _ForMonth = a.ForMonth;	
	
    CREATE TEMPORARY TABLE IF NOT EXISTS employeeTempTable As
	select e.*, c.AttendanceSubmissionLimit from employees e 
	left join company_setting c on c.CompanyId = e.CompanyId
	Where e.EmployeeUid = _EmployeeId;
	
    select * from employeeTempTable;
    
	select * from company_calendar where CompanyId = _CompanyId;
    
    set @workShiftId = (select WorkShiftId from employeeTempTable);
    select * from work_shifts
	where 
	case
		when @workShiftId > 0
		then WorkShiftId = @workShiftId
		else WorkShiftId = 1
	end;
    
    Select 
		ComplaintOrRequestId,
		RequestTypeId,
		TargetId,
        TargetOffset,
		EmployeeId, 
		EmployeeName, 
		Email, 
		Mobile,
		ManagerId,
		ManagerName,
		ManagerEmail,
		ManagerMobile,
		EmployeeMessage,
		ManagerComments,
		CurrentStatus,
		RequestedOn,
		AttendanceDate,
		LeaveFromDate,
		LeaveToDate,
		Notify,
		UpdatedOn
	from complaint_or_request
	Where RequestTypeId = _RequestTypeId and EmployeeId = _EmployeeId
	and datediff(_StartDate, AttendanceDate) <= 0;
    
    /* set @projectid = 0;
    select ProjectId into @projectid from project_members_detail 
    where EmployeeId = _EmployeeId and IsActive = true;
	select * from project where ProjectId in (1 , 2, @projectid);*/
    
    drop table if exists employeeTempTable;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_getAll` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_getAll`(



    _EmployeeId bigint,
    _ClientId bigint,
    _UserTypeId int,
    _Doj datetime
)
Begin
    Set @OperationStatus = '';
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, @OperationStatus, 'sp_attendance_getAll', 1, 0, @Result);
		end;
        
		Select 
			a.*,
            e.DOJ
		from attendance a   
        Inner join employeemappedclients e on e.EmployeeUid = a.EmployeeId
		Where a.EmployeeId = _EmployeeId
        And e.ClientUid = _ClientId
        And a.UserTypeId = _UserTypeId
		And e.DOJ between CONVERT_TZ(_Doj, @@session.time_zone, '+00:00' ) and utc_timestamp()
        And ( FirstWeek = 0 or SecondWeek = 0  or ThirdWeek = 0 or ForthWeek = 0 or FifthWeek = 0 or SixthWeek = 0);
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_getall_pending` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_getall_pending`(



    _EmployeeId bigint,
    _ClientId bigint,
    _UserTypeId int,
    _ForMonth int,
    _ForYear int
)
Begin
    Set @OperationStatus = '';
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, @OperationStatus, 'sp_attendance_getall_pending', 1, 0, @Result);
		end;
        
		Select 
			a.*
		from attendance a   
		Where a.EmployeeId = _EmployeeId
        And a.UserTypeId = _UserTypeId
        And ForYear = _ForYear and ForMonth = _ForMonth
        And TotalDays <> DaysPending;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_get_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_get_byid`(



    _AttendanceId bigint
)
Begin
	Select 
		a.*
	from daily_attendance a
	Where a.AttendanceId = _AttendanceId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_get_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_get_by_empid`(



    _EmployeeId bigint,
    _ForYear int,
    _ForMonth int
)
Begin
	Select 
		a.*
	from attendance a
    where EmployeeId = _EmployeeId
    and ForYear = _ForYear
    and ForMonth = _ForMonth;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_get_by_page_yearmonth` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_get_by_page_yearmonth`(
	
    _SearchString varchar(500),
    _SortBy varchar(50),
    _PageIndex int,
    _PageSize int
    
/*

	call sp_attendance_get_by_page_yearmonth('1=1 and ForYear = 2024 and ForMonth = 3', '', 1, 10)

*/    


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_attendance_get_by_page_yearmonth', 1, 0, @Result);
	End;
    
    if (_SortBy is null or _SortBy = '') then
    begin
		set _SortBy = ' SubmittedOn Desc ';
	end;
	end if;
    
	Set @SelectQuery = concat('Select * from (
		select 
			Row_Number() over(Order by ', _SortBy, ') as RowIndex,
			a.*,
            Count(1) Over() as Total 
		from attendance a
		Where ', _SearchString, '
	)T where RowIndex between ', ((_PageIndex - 1 ) * _PageSize + 1), ' and ', (_PageIndex * _PageSize));
    
	# select @SelectQuery;
	prepare SelectQuery from @SelectQuery;
	execute SelectQuery;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_insupd`(



	_AttendanceId bigint,
	_EmployeeId bigint,
	_UserTypeId int,
	_AttendanceDetail json,
	_TotalDays int,
    _TotalWeekDays int,
	_DaysPending int,
	_TotalBurnedMinutes int,
    _ForYear int,
	_ForMonth int,
    _PendingRequestCount int,    
	_EmployeeName varchar(100),
	_Email varchar(50),
	_Mobile varchar(20),
	_ReportingManagerId bigint,
	_ManagerName varchar(100),
    _UserId long,    
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;						
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_attendance_insupd', 1, 0, @Result);
	end;

	Set _ProcessingResult = '';
    Set @attendanceId = 0;
	Begin
		If not exists (Select 1 from attendance where AttendanceId = _AttendanceId) then
		Begin
			Select AttendanceId from attendance order by AttendanceId desc limit 1 into @attendanceId ;
			Set @attendanceId = @attendanceId + 1;
			
			Insert into attendance values(
				@attendanceId,
				_EmployeeId,
				_UserTypeId,
				_AttendanceDetail,
				_TotalDays,
				_TotalWeekDays,
				_DaysPending,
				_TotalBurnedMinutes,
				_ForYear,
				_ForMonth,
				utc_timestamp(),
				utc_timestamp(),
				_UserId,
				null,
                _PendingRequestCount,
                _EmployeeName,
				_Email,
				_Mobile,
				_ReportingManagerId,
				_ManagerName
			);
			
			
			Set _ProcessingResult =  @attendanceId;
		End;
		Else
		Begin
			set @attendanceId = _AttendanceId;
			Update attendance a Set
				EmployeeId				=		_EmployeeId,
				UserTypeId				=		_UserTypeId,
				AttendanceDetail		=		_AttendanceDetail,
				TotalDays				=		_TotalDays,
				TotalWeekDays			=		_TotalWeekDays,
				DaysPending				=		_DaysPending,
				TotalBurnedMinutes		=		_TotalBurnedMinutes,
				ForMonth				=		_ForMonth,
				ForYear					=		_ForYear,
                PendingRequestCount		=		a.PendingRequestCount + _PendingRequestCount,
				UpdatedOn				=		utc_timestamp(),
                EmployeeName			=		_EmployeeName,
				Email					=		_Email,
				Mobile					=		_Mobile,
				ReportingManagerId		=		_ReportingManagerId,
				ManagerName				=		_ManagerName,
				UpdatedBy				= 		_UserId
			where AttendanceId 			= 		@attendanceId;
			
            Set _ProcessingResult =  @attendanceId;
		End;
		End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_insupd_by_monthandyear` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_insupd_by_monthandyear`(



	_AttendanceId bigint,
	_EmployeeId bigint,
	_UserTypeId int,
	_AttendanceDetail json,
	_TotalDays int,
    _TotalWeekDays int,
	_DaysPending int,
	_TotalBurnedMinutes int,
    _ForYear int,
	_ForMonth int,
    _PendingRequestCount int,    
	_EmployeeName varchar(100),
	_Email varchar(50),
	_Mobile varchar(20),
	_ReportingManagerId bigint,
	_ManagerName varchar(100),
    _UserId long,
    out _ProcessingResult varchar(100)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
                             
				Set sql_safe_updates = 1;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_attendance_insupd_by_monthandyear', 1, 0, @Result);
			end;
            
            Set _ProcessingResult = '';
			Begin
				If not exists (Select 1 from attendance where EmployeeId = _EmployeeId and UserTypeId = _UserTypeId 
								and ForMonth = _ForMonth and ForYear = _ForYear) then
                Begin
					Insert into attendance values(
						default,
						_EmployeeId,
						_UserTypeId,
						_AttendanceDetail,
						_TotalDays,
                        _TotalWeekDays,
						_DaysPending,
						_TotalBurnedMinutes,
                        _ForYear,
						_ForMonth,
                        utc_timestamp(),
						utc_timestamp(),
                        _UserId,
                        null,
						_PendingRequestCount,
						_EmployeeName,
						_Email,
						_Mobile,
						_ReportingManagerId,
						_ManagerName
					);
                End;
                Else
                Begin
                
					Set sql_safe_updates = 0;
					Update attendance Set
						EmployeeId				=		_EmployeeId,
						UserTypeId				=		_UserTypeId,
						AttendanceDetail		=		_AttendanceDetail,
						TotalDays				=		_TotalDays,
                        TotalWeekDays			=		_TotalWeekDays,
						DaysPending				=		_DaysPending,
						TotalBurnedMinutes		=		_TotalBurnedMinutes,
                        UpdatedOn				=		utc_timestamp(),
                        EmployeeName			=		_EmployeeName,
						Email					=		_Email,
						Mobile					=		_Mobile,
						ReportingManagerId		=		_ReportingManagerId,
						ManagerName				=		_ManagerName,
                        UpdatedBy				= 		_UserId
					where EmployeeId 			= 		_EmployeeId and 
						  UserTypeId 			= 		_UserTypeId and 
                          ForMonth 				= 		_ForMonth and 
                          ForYear 				= 		_ForYear;
                End;
                End if;	
                
                Set sql_safe_updates = 1;
                Set _ProcessingResult = 'Inserted/Updated successfully';
			End;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_requests_by_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_requests_by_filter`(
    _ReportingManagerId bigint,
    _FromDate datetime,
    _ToDate datetime
    
    
    # call sp_attendance_requests_by_filter (2, '2023-03-31 18:30:00', '2023-04-29 18:30:00')
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_attendance_requests_by_filter', 1, 0, @Result);
		end;
        
        begin
			set @ManagerName = '';
			set @ManagerMobile = '';
			set @ManagerEmail = '';
			select 
				Concat(FirstName, ' ', LastName) ManagerName,
				Mobile,
				Email into @ManagerName, @ManagerMobile, @ManagerEmail
			from employees
			where EmployeeUid = _ReportingManagerId;
            
            /*
			set @prevMonth = _ForMonth;
			if ( _ForMonth > 0) then
			begin
				set @prevMonth = (_ForMonth -1);
			end;
			end if;
            */
                        
			select a.*, e.Mobile,
			@ManagerName ManagerName, 
			@ManagerMobile ManagerMobile, 
			@ManagerEmail ManagerEmail,
            u.FilePath, u.FileExtension, u.FileName
			from daily_attendance a
			inner join employees e on a.EmployeeId = e.EmployeeUid
            left join userfiledetail u on u.FileOwnerId = a.EmployeeId and u.UserTypeId = 2 and u.FileName like '%profile%'
			where e.ReportingManagerId = _ReportingManagerId
			and a.AttendanceDate between _FromDate and _ToDate;
        End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_attendance_update_request` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_attendance_update_request`(
    _AttendanceId bigint,
    _ReviewerId bigint,
    _ReviewerEmail varchar(100),
    _ReviewerName varchar(100),
    _AttendanceStatus int,
    _UserId bigint,
    out _ProcessingResult varchar(100)
)
Begin  
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Set _ProcessingResult = 'fail';
		Call sp_LogException (@Message, '', 'sp_attendance_update_request', 1, 0, @Result);
	end;
    
	Set _ProcessingResult = '';
	if exists (select 1 from daily_attendance where AttendanceId = _AttendanceId) then
	Begin
		update daily_attendance Set
			ReviewerId 				=		_ReviewerId,
			ReviewerEmail			=		_ReviewerEmail,
			ReviewerName			=		_ReviewerName,
			AttendanceStatus		=		_AttendanceStatus,
            UpdatedBy 				=		_UserId,
            UpdatedOn				=		utc_timestamp()
		where AttendanceId 			= 		_AttendanceId;    
		set _ProcessingResult = 'updated';
	End;
	End if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_AuthenticationToken_VerifyAndGet` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_AuthenticationToken_VerifyAndGet`(
	_UserId bigint,
    _Mobile varchar(20),
    _Email varchar(50)
    
    
    
    
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, @OperationStatus, 'SP_AuthenticationToken_VerifyAndGet', 1, 0, @Result);
	end;    

	If exists(Select 1 from UserDetail Where (Mobile = _Mobile Or EmailId = _Email Or UserId  = _UserId)) then
	Begin
        If (_UserId <= 0) then
		Begin	
            Select UserId from userdetail 
			where (Mobile = _Mobile Or EmailId = _Email Or UserId  = _UserId)
			Into _UserId;
		End;
        End if;
    
		If Exists(SELECT 1 FROM  RefreshToken r WHERE
					UserId = _UserId AND DATEDIFF(r.ExpiryTime, NOW()) >= 0) then
        Begin
			SELECT * FROM  RefreshToken r WHERE
					UserId = _UserId AND DATEDIFF(r.ExpiryTime, NOW()) >= 0;
        End;
        Else
        Begin
			Delete from RefreshToken 
            where UserId = _UserId;
        End;
        End if;
	End;
    End if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_bank_accounts_getById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_bank_accounts_getById`(
	_BankAccountId int
    

	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_bank_accounts_getById', 1, 0, @Result);
			end;  
            
			Select * from bank_accounts
			where BankAccountId = _BankAccountId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_bank_accounts_getby_cmpId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_bank_accounts_getby_cmpId`(


	_SearchString varchar(500),
    _SortBy varchar(100),
    _PageIndex int,
    _PageSize int
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_bank_accounts_getby_cmpId', 1, 0, @Result);
		End;

        Begin

			if(_SortBy is null Or _SortBy = '') then
				Set _SortBy = ' UpdatedOn Desc, CreatedOn Desc ';
			end if;

           Set @activeQuery = Concat('
				Select *
				from bank_accounts 
				where ', _SearchString, '
			');	

            Set @SelectQuery = '';
			Set @SelectQuery = concat('
				select *, Count(1) Over() as Total from (
					', @activeQuery ,'
				)T Order by ', _SortBy ,' limit ', _PageSize ,' offset ', (_PageIndex - 1) * 10
			);
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_bank_accounts_get_by_orgId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_bank_accounts_get_by_orgId`(
	_OrganizationId int
    

	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_bank_accounts_get_by_orgId', 1, 0, @Result);
			end;  
            
			Select * from bank_accounts
			where OrganizationId = _OrganizationId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_bank_accounts_intupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_bank_accounts_intupd`(
	_BankAccountId int,
    _OrganizationId int,
    _CompanyId int,
    _BankName varchar(100),
    _BranchCode varchar(20),    
    _Branch varchar(50),
    _IFSC varchar(20),
    _AccountNo varchar(45),
    _OpeningDate datetime,
    _ClosingDate datetime,
    _IsPrimaryAccount bit,
    _AdminId bigint,
	out _ProcessingResult varchar(50)
    

	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				 Set autocommit = ON;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, '', 'sp_bank_accounts_intupd', 1, 0, @Result);
			end;  
			start transaction;
            
            if (_IsPrimaryAccount = 1) then 
            begin
				SET SQL_SAFE_UPDATES = 0;
				Update bank_accounts Set
					IsPrimaryAccount 			=			false
					where CompanyId 			= 			_CompanyId;
				SET SQL_SAFE_UPDATES = 1;
            end;
            end if;
            
			if not exists(select * from bank_accounts where BankAccountId = _BankAccountId) then
            begin
				Set autocommit = OFF;
				Set @bankAccountId = 0;
				Select BankAccountId from bank_accounts order by BankAccountId desc limit 1 into @bankAccountId ;
				Set @bankAccountId = @bankAccountId+1;

				Insert into bank_accounts values(
					@bankAccountId,
					_OrganizationId,
                    _CompanyId,
					_BankName,
                    _BranchCode,
					_Branch,    
					_IFSC,
					_AccountNo,
					_OpeningDate,
                    _ClosingDate,
					_IsPrimaryAccount,
                    _AdminId,
                    null,
                    utc_timestamp(),
                    null
				);
                
                Set _ProcessingResult = 'inserted';
			end;
            else 
            begin
				Update bank_accounts Set
					OrganizationId			=			_OrganizationId,
                    CompanyId				=			_CompanyId,
					BankName				=			_BankName,
					BranchCode				=			_BranchCode,
					Branch					=			_Branch,
					IFSC					=			_IFSC,
					AccountNo				=			_AccountNo,
					OpeningDate				=			_OpeningDate,
                    ClosingDate				=			_ClosingDate,
                    IsPrimaryAccount 		=			_IsPrimaryAccount,
                    UpdatedBy				=			_AdminId,
                    UpdatedOn				=			utc_timestamp()
                where BankAccountId 		= 			_BankAccountId;
                
                Set _ProcessingResult = 'updated';
            end;
            end if;
            Set autocommit = ON;
            commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_billdata_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_billdata_get`(
	_BillTypeUid bigint


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_billdata_get', 1, 0, @Result);
		End;

        Begin
			Set @NewBillNo = '';
			select Fn_GenerateRandom_nextBill(_BillTypeUid) Into @NewBillNo;
			select BillUid, 
				LastBillNo, 
				LastBillNo + 1 as NextBillNo, 
				@NewBillNo GeneratedBillNo,
                BillNoLength
            from bills where BillTypeUId = _BillTypeUid;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_billdetail_and_template_by_billno` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_billdetail_and_template_by_billno`(

	# call sp_billdetail_and_template_by_billno(00000335, 5);

    _BillNo varchar(45),
    _EmployeeId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_Billing_detail', 1, 0, @Result);
	end;
           
    select * from employees
    where EmployeeUid = _EmployeeId;
    
    select 
		Email, 
        OtherEmail_1 FirstEmail, 
        OtherEmail_2 SecondEmail, 
        OtherEmail_3 ThirdEmail, 
        OtherEmail_4 ForthEmail
	from clients c
    inner join billdetail b on b.ClientId = c.ClientId
    where b.BillNo = _BillNo;
    
    select 
		c.Email, 
        c.FirstEmail, 
        c.SecondEmail, 
        c.ThirdEmail, 
        c.ForthEmail 
	from company c
    inner join employeelogin e on c.CompanyId = e.CompanyId
    where e.EmployeeId = _EmployeeId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_billdetail_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_billdetail_filter`(
	_Type varchar(20),
	_Uid bigint,
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_billdetail_filter', 1, 0, @Result);
		End;

        Begin
			If(_sortBy is NULL OR _sortBy = '') then
            begin
				Set _sortBy = ' b.BillUpdatedOn DESC ';
			end;
			End if;
            
            Set _SearchString = Concat(_SearchString, ' AND f.UserTypeId != 6 ');
            If (_Uid > 0) then
            begin
				Set _SearchString = Concat(_SearchString, ' AND f.FileOwnerId = ', _Uid, ' ');
            end;
            end if;
			
				Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					f.FilePath,
					f.FileName,
					f.FileExtension,
					s.Status,
                    coalesce(g.gststatus, 2) GstStatus,
					DATE_FORMAT(b.BillUpdatedOn, ''%d %M %Y'') GeneratedOn,
					DATE_FORMAT(b.PaidOn, ''%d %M %Y'') PaidOn,
					Convert(f.FileId, char) as FileUid,
					f.FileOwnerId,
					b.BillForMonth Month,
                    b.BillYear Year,
                    b.NoOfDaysAbsent Absents,
					b.TDS,
                    b.NoOfDays,
					b.PaidAmount SalaryAmount,
                    (Select TakeHomeByCandidate from employeemappedclients
						where EmployeeUid = e.EmployeeUid and ClientUid = c.ClientId
                        and IsActive = 1) TakeHome,
					b.IGST,
					b.SGST,
					b.CGST,
					c.ClientName,
					c.ClientId,
                    c.CompanyId,
					b.BillNo,
                    b.BillStatusId,
                    Concat(e.FirstName, '' '', e.LastName) Name,
                    Count(1) Over() as Total 
                    from employees e
					Inner Join filedetail f on f.FileOwnerId = e.EmployeeUid
                    inner join billdetail b on b.FileDetailId = f.FileId
					left join itemstatus s on s.ItemStatusId = f.ItemStatusId
					left Join clients c on c.ClientId = b.ClientId
                    left Join gstdetail g on g.billno = b.BillNo
				where ', _SearchString, '
			)T where RowIndex between ', (_pageIndex - 1) * _pageSize + 1 ,' and ', (_pageIndex * _pageSize)) ;
            
			
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;	
            
            Select 
				concat(e.FirstName, ' ', e.LastName) Name,
				e.Mobile,
                e.Email
			from employees e 
            Where EmployeeUid = _Uid;
            
            Select 
				EmployeeUId,
				concat(e.FirstName, ' ', e.LastName) Name,
				e.Mobile,
                e.Email
			from employees e;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_billingdetail_byempid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_billingdetail_byempid`(
	_EmployeeUid bigint
    )
Begin      
        Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, @OperationStatus, 'sp_billingdetail_byempid', 1, 0, @Result);
		end;
		Begin
            Select FileOwnerId, FilePath, FileName, FileExtension, PaidOn, concat (E.FirstName, '  ', E.LastName) as FileOwnerName from filedetail as FD
			inner join employees as E
			On FD.FileOwnerId = E.EmployeeUid
			where EmployeeUid = _EmployeeUid;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Billing_detail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Billing_detail`(

# call sp_Billing_detail(1, 3, '00000330', 5, 2, '2023-11-01 18:30:00', '2023-11-30 18:30:00', 1, 1)

    _Sender bigint,
    _Receiver bigint,
    _BillNo varchar(45),
    _EmployeeId bigint,
    _UserTypeId int,
    _StartDate datetime,
    _EndDate datetime,
    _BillTypeUid bigint,
    _CompanyId int
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
                                            
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_Billing_detail', 1, 0, @Result);
			end;
            
            
            Select * from company 
            where CompanyId = _sender;
            
            Select * from clients 
            where clients.ClientId = _receiver;

            select f.* from billdetail b
			inner join filedetail f on b.FileDetailId = f.FileId
			where b.BillNo = _billNo;
            
            Select 
				a.*
			from employee_timesheet a   
			Where a.EmployeeId = _employeeId
			And ((TimesheetStartDate BETWEEN _StartDate AND _EndDate)
			OR (TimesheetEndDate BETWEEN _StartDate AND _EndDate)
			OR (TimesheetStartDate <= _StartDate AND TimesheetEndDate >= _EndDate))
			And a.ClientId = _receiver;
            
			Set @NewBillNo = '';
			select Fn_GenerateRandom_nextBill(_BillTypeUid) Into @NewBillNo;
			select BillUid, 
				LastBillNo, 
				LastBillNo + 1 as NextBillNo, 
				@NewBillNo GeneratedBillNo,
                BillNoLength
            from bills where BillTypeUId = _BillTypeUid;
            
            select * from bank_accounts
            where (CompanyId = _CompanyId and IsPrimaryAccount = true);
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_bonus_shift_overtime_ins_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_bonus_shift_overtime_ins_upd`(
	_BonusShiftOvertimeId bigint,
    _EmployeeId bigint,
    _IsBonus bit,
    _IsShift bit,
    _IsOvertime bit,
    _ForYear int,
    _ForMonth int,
    _CompanyId int,
    _OrganizationId int,
    _ComponentId varchar(20),
    _Amount decimal,
    _Comments varchar(500),
    _Status int,
    _TotalMinutes int,
    _UpdatedBy bigint,
    _UpdatedOn datetime,
    out _ProcessingResult varchar(100)
/*

	set @result= '';
	call sp_bonus_shift_overtime_ins_upd(1, 1, 1, 0, 0, 2024, 3, 1, 1, 'RB', 2235.50, '', 2, 0, 1, now(), @result);
	select @result;

*/

)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_bonus_shift_overtime_ins_upd', 1, 0, @Result);
		End;
        
		Set _ProcessingResult = '';
        if not exists(select 1 from bonus_shift_overtime where BonusShiftOvertimeId = _BonusShiftOvertimeId) then
        begin
            set @BonusShiftOvertimeId = 0;
            select BonusShiftOvertimeId into @BonusShiftOvertimeId from bonus_shift_overtime
            order by BonusShiftOvertimeId desc limit 1;
            
            set @BonusShiftOvertimeId = @BonusShiftOvertimeId + 1;
            
			insert into bonus_shift_overtime values(
				@BonusShiftOvertimeId,
				_EmployeeId,
                _IsBonus,
				_IsShift,
				_IsOvertime,
				_ForYear,
				_ForMonth,
				_CompanyId,
				_OrganizationId,
				_ComponentId,
				_Amount,
				_Comments,
				_Status,
				_TotalMinutes,
				_UpdatedBy,
				_UpdatedOn
			);
            
            Set _ProcessingResult = 'inserted';
        end;
        else 
        begin
			update bonus_shift_overtime set
				EmployeeId 					= 		_EmployeeId,
				IsBonus						=		_IsBonus,
				IsShift						=		_IsShift,
				IsOvertime					=		_IsOvertime,
				ForYear 					= 		_ForYear,
				ForMonth 					= 		_ForMonth,
				CompanyId 					= 		_CompanyId,
				OrganizationId 				= 		_OrganizationId,
				ComponentId 				= 		_ComponentId,
				Amount 						= 		_Amount,
				Comments					=		_Comments,
				Status						=		_Status,
				TotalMinutes				=		_TotalMinutes,
				UpdatedBy					=		_UpdatedBy,
				UpdatedOn					=		_UpdatedOn
			where BonusShiftOvertimeId 		= 		_BonusShiftOvertimeId;
            
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_candidatefiledetail_InsUpd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_candidatefiledetail_InsUpd`(
	_FileId long,
	_FilePath varchar(500), 
	_FileName varchar(100),
	_FileExtension varchar(10),
    _UserTypeId int
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, @OperationStatus, 'sp_candidatefiledetail_InsUpd', 1, 0, @Result);
		end;
        Begin
			if not exists (select 1 from candidatefiledetail where FileId 	= _FileId) then
			Begin
				insert into candidatefiledetail values (
					default,
					_FilePath,
					_FileName,
					_FileExtension, 
					_UserTypeId,
					utc_timestamp(), 
					null
				);
			End;
			Else
			Begin
				update candidatefiledetail set
						FilePath 		= 	_FilePath,
						FileName		=	_FileName,
						FileExtension	=	_FileExtension, 
						UserTypeId		=	_UserTypeId,
						UpdatedOn		=	utc_timestamp()
				where	FileId 			= 	_FileId;
			End;
			End if;
		End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Candidatelogin_Auth` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Candidatelogin_Auth`(


	_UserId bigint,
	_MobileNo varchar(20),
	_EmailId varchar(50),
    _UserTypeId int,
    _Password varchar(100)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_Candidatelogin_Auth', 1, 0, @Result);
			end;  
            
            Set @UserExistsFlag = 0;
			Begin				
				Set @pass = '';
				Select Password from candidatelogin 
				where Email = _EmailId Or Mobile = _MobileNo
				into @pass;
				
				If (@pass = _Password) then
				Begin
					Set @UserExistsFlag = 1;
				End;
				End if;
                
                If (@UserExistsFlag = 1)then
				Begin
					Set @AccessLevelId = 0;
                    Select AccessLevelId from candidatelogin 
                    Where Email = _EmailId Or Mobile = _MobileNo
                    into @AccessLevelId;
                    
					Select 
						UserId,
                        FirstName,
                        LastName,
                        Email,
                        Mobile,
                        AccessLevelId,
                        _UserTypeId UserTypeId
                    from candidatelogin 
                    Where Email = _EmailId Or Mobile = _MobileNo;
								 
					Select RM.Catagory, RM.Childs, RM.Link, RM.Icon, RM.Badge, 
					RM.BadgeType, RM.AccessCode, 
					AccessibilityId Permission from rolesandmenu RM
					left Join role_accessibility_mapping r on r.AccessCode = RM.AccessCode
					where r.AccessLevelId = @AccessLevelId 
					and r.AccessibilityId > 0;
						
                    Call sp_ColumnMapping_GetByPageName('all');
				End;
                End if;
			End;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_catagory_getby_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_catagory_getby_filter`(
	_SearchString varchar(250),
	_SortBy varchar(50),
	_PageIndex int,
	_PageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_catagory_getby_filter', 1, 0, @Result);
		End;

        Begin
			If(_SortBy is NULL OR _SortBy = '') then
				Set _SortBy = 'CatagoryId';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _SortBy, ') as RowIndex,
						CatagoryId,
						GroupId,
						CatagoryCode,
						CatagoryDescription,
					Count(1) Over() as Total from catagory
				Where ', _SearchString, '
			)T where RowIndex between ', ((_PageIndex - 1 ) * _PageSize + 1), ' and ', (_PageIndex * _PageSize));
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_catagory_getby_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_catagory_getby_id`(
	_CatagoryId int
    


)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_catagory_getby_id', 1, 0, @Result);
		End;
		     
        select *
		from catagory
        where CatagoryId = _CatagoryId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_catagory_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_catagory_insupd`(
	   

	_CatagoryId int,
    _GroupId int,
    _CatagoryCode varchar(45),
    _CatagoryDescription varchar(500),
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            RollBack;
            Call sp_LogException (@Message, '', 'sp_catagory_insupd', 1, 0, @Result);
		end;

		Start Transaction;
        set autocommit = 0;
		SET SQL_SAFE_UPDATES=0;
        begin
			If not exists (Select * from catagory Where CatagoryId = _CatagoryId) then
			Begin
				Set @catagoryId = 0;
				Select CatagoryId from catagory order by CatagoryId desc limit 1 into @catagoryId ;
				Set @catagoryId = @catagoryId+1;

				Insert into catagory Values (
					@catagoryId, 
					_GroupId,
					_CatagoryCode,
					_CatagoryDescription
				);
				Set _ProcessingResult = "inserted";
			End;
			Else
			Begin
				Update catagory SET 
					GroupId									=			_GroupId,
					CatagoryCode							=			_CatagoryCode,
					CatagoryDescription						=			_CatagoryDescription
				Where CatagoryId 							=			_CatagoryId;
				
				Set _ProcessingResult = "updated";
			End;
			End if;
		end;
        Set sql_safe_updates = 1;
		Set autocommit = 1;
        Commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_cleanup_employees` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_cleanup_employees`(


	_CompanyId int,
	_AdminEmail long
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		
        Rollback;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_cleanup_employees', 1, 0, @Result);
	end;  
	
    Start Transaction;
	Begin
		set sql_safe_updates = 0;

		delete from employee_performance
		where EmployeeId not in (
			select EmployeeUid from employees where CompanyId = _CompanyId and Email = _AdminEmail
		);
		
		delete from employeepersonaldetail
		where EmployeeUid not in (
			select EmployeeUid from employees where CompanyId = _CompanyId and Email = _AdminEmail
		);

		delete from employeeprofessiondetail
		where EmployeeUid not in (
			select EmployeeUid from employees where CompanyId = _CompanyId and Email = _AdminEmail
		);

		delete from employee_declaration
		where EmployeeId not in (
			select EmployeeUid from employees where CompanyId = _CompanyId and Email = _AdminEmail
		);

		delete from employee_leave_request
		where EmployeeId not in (
			select EmployeeUid from employees where CompanyId = _CompanyId and Email = _AdminEmail
		);

		delete from employee_salary_detail
		where EmployeeId not in (
			select EmployeeUid from employees where CompanyId = _CompanyId and Email = _AdminEmail
		);
        
        delete from daily_attendance
		where EmployeeId not in (
			select EmployeeUid from employees where CompanyId = _CompanyId and Email = _AdminEmail
		);
        
		delete from project_members_detail
		where EmployeeId not in (
			select EmployeeUid from employees where CompanyId = _CompanyId and Email = _AdminEmail
		);   

		delete from employee_pf_detail
		where EmployeeId not in (
			select EmployeeUid from employees where CompanyId = _CompanyId and Email = _AdminEmail
		);       

		delete from employeelogin where CompanyId = _CompanyId and Email != _AdminEmail;

		delete from employees where CompanyId = _CompanyId and Email != _AdminEmail;

		set sql_safe_updates = 1;
	end;
    
	Commit;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_ClientsAndSender_Emails_By_Id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_ClientsAndSender_Emails_By_Id`(
	_SenderId bigint,
	_ReceiverId bigint,
    _FileId bigint


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_ClientsAndSender_Emails_By_Id', 1, 0, @Result);
		End;

		Select * from clients
        where ClientId = _SenderId
        
        Union
        
        Select * from clients
        where ClientId = _ReceiverId;
        
        select * from filedetail
        where FileId = _FileId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_Clients_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Clients_Get`(
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_Clients_Get', 1, 0, @Result);
		End;

        Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'CreatedOn, UpdatedOn Desc';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					ClientId, 
					ClientName,
					PrimaryPhoneNo,
					Email,
					FirstAddress,
                    City,
                    OtherEmail_1,
                    OtherEmail_2,
                    OtherEmail_3,
                    OtherEmail_4,
                    WorkShiftId,
					Count(1) Over() as Total from clients
				Where ', _SearchString, '
			)T where RowIndex between ', (_pageIndex - 1) * _pageSize + 1 ,' and ', (_pageIndex * _pageSize));
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_Client_ById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Client_ById`(
	_ClientId bigint,
	_IsActive bit,
    _UserTypeId int,
    _CompanyId int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_Client_ById', 1, 0, @Result);
		End;

	
		Select * from clients Where ClientId = _ClientId;
        
		Select FileId, FilePath, FileName, FileExtension, UserTypeId from userfiledetail 
		where FileOwnerId = _ClientId and FileName like '%profile%' and UserTypeId = _UserTypeId;
        
        select * from work_shifts
        where CompanyId = _CompanyId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_Client_IntUpd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Client_IntUpd`(
	_ClientId bigint,
    _CompanyId int,
	_ClientName varchar(100),
	_PrimaryPhoneNo varchar(20),
	_SecondaryPhoneNo varchar(20),
	_MobileNo varchar(20),
	_Email varchar(50),
    _OtherEmail_1 varchar(100),
    _OtherEmail_2 varchar(100),
    _OtherEmail_3 varchar(100),
    _OtherEmail_4 varchar(100),
	_Fax varchar(20),
	_GSTNO varchar(20),
	_PanNo varchar(20),
	_Pincode int,
	_Country varchar(50),
	_State varchar(50),
	_City varchar(50),
	_FirstAddress varchar(100),
	_SecondAddress varchar(100),
	_ThirdAddress varchar(100),
	_ForthAddress varchar(100),
	_IFSC varchar(15),
	_AccountNo varchar(25),
	_BankName varchar(100),
	_BranchName varchar(100),
    _WorkShiftId int,
	_AdminId bigint,
	out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		
		RollBack;
		SET autocommit = 1;
		Call sp_LogException (@Message, '', 'SP_Client_IntUpd', 1, 0, @Result);
	end;
	
	SET autocommit = 0;
	Start Transaction;
	Begin 
		If not exists (Select 1 from clients Where ClientId = _ClientId) then
		Begin
			select count(1) into _ClientId from clients;
            set _ClientId = _ClientId + 1;
            
			if (_WorkShiftId = 0) then
            begin
				set _WorkShiftId = 1;
            end;
            end if;
			
			Insert into clients Values(
				_ClientId,
                _CompanyId,
				_ClientName,
				_MobileNo,
				_PrimaryPhoneNo,
				_SecondaryPhoneNo,						
				_Email,
				_Fax,
				_FirstAddress,
				_SecondAddress,
				_ThirdAddress,
				_ForthAddress,
				_Pincode,
				_City, 
				_State, 
				_Country,
				_GSTNO,
				_AccountNo,
				_BankName,
				_BranchName,
				_IFSC,
				_PanNo,
				_AdminId,
				null,
				utc_timestamp(),
				null,
				_OtherEmail_1,
				_OtherEmail_2,
				_OtherEmail_3,
				_OtherEmail_4,
                _WorkShiftId
			);
				
			Set _ProcessingResult = 'Created successfully';
		End;
		Else
		Begin
			Update clients SET 
				ClientName			=	_ClientName,
				MobileNo			=	_MobileNo,
				PrimaryPhoneNo		=	_PrimaryPhoneNo,
				SecondaryPhoneNo	=	_SecondaryPhoneNo,						
				Email				=	_Email,
				Fax					=	_Fax,
				FirstAddress		=	_FirstAddress,
				SecondAddress		=	_SecondAddress,
				ThirdAddress		=	_ThirdAddress,
				ForthAddress		=	_ForthAddress,
				Pincode				=	_Pincode,
				City				=	_City, 
				State				=	_State, 
				Country				=	_Country,
				GSTNO				=	_GSTNO,
				AccountNo			=	_AccountNo,
				BankName			=	_BankName,
				BranchName			=	_BranchName,
				IFSC				=	_IFSC,
				PanNo				=	_PanNo,
				OtherEmail_1		=	_OtherEmail_1,
				OtherEmail_2		=	_OtherEmail_2,
				OtherEmail_3		=	_OtherEmail_3,
				OtherEmail_4		=	_OtherEmail_4,
                WorkShiftId			=	_WorkShiftId,
				UpdatedBy			= 	_AdminId,
				UpdatedOn			= 	utc_timestamp()
			Where 	ClientId 		= 	_ClientId;
			
			Set _ProcessingResult = 'Updated successfully';
		End;
		End if;
	End;
    
	COMMIT;
    SET autocommit = 1;
	Select * from clients
	where ClientId = _ClientId;	
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_ColumnMapping_GetByPageName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ColumnMapping_GetByPageName`(
	


	_PageName varchar(100)
)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, @OperationStatus, 'sp_ColumnMapping_GetByPageName', 1, 0, @Result);
	end;

	If (_PageName = 'all') then
    Begin
		Select PageName, 
			ColumnName, 
			DisplayName, 
			Style, 
			ClassName,
			IsHidden
		from tablecolumnmapping;
	End;
    Else
    Begin
		Select PageName, 
			ColumnName, 
			DisplayName, 
			Style, 
			ClassName,
			IsHidden
		from tablecolumnmapping
        Where PageName = _PageName;
    End;
    End if;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_ColumnMapping_InsUpd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ColumnMapping_InsUpd`(
	


	_MappingId bigint,
	_PageName varchar(100),
    _ColumnName varchar(50),    
    _DisplayName varchar(50),
    _Style varchar(250),
    _ClassName varchar(250),
    _IsHidden bit
)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, @OperationStatus, 'sp_ColumnMapping_InsUpd', 1, 0, @Result);
	end;

	if not exists(Select 1 from TableColumnMapping where MappingId = _MappingId)then
	Begin 
		Insert into TableColumnMapping values(default, 
			_PageName, 
            _ColumnName, 
            _DisplayName, 
            _Style, 
            _ClassName,
			_IsHidden
		);
	end;
	else
	begin
		Update TableColumnMapping Set 
			PageName = _PageName, 
            ColumnName = _ColumnName, 
            Style = _Style, 
			DisplayName = _DisplayName, 
            ClassName = _ClassName
		Where MappingId = _MappingId;
	End;
	End if;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_calendar_get_by_company` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_calendar_get_by_company`(
    _CompanyId int


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;										
		
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_company_calendar_get_by_company', 1, 0, @Result);
	End;
	
	select * from company_calendar
	where CompanyId = _CompanyId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_calendar_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_calendar_insupd`(
	   

	_CompanyCalendarId bigint,
    _CompanyId int,
    _HolidayDate datetime,
    _EventName varchar(250),
    _IsHoliday bit,
    _IsHalfDay bit,
    _DescriptionNote text,
    _ApplicableFor int,
    _Year int,
    _IsPublicHoliday bit,
    _IsCompanyCustomHoliday bit,
    _Country varchar(65),
    _AdminId bigint,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            RollBack;
            Call sp_LogException (@Message, '', 'sp_company_calendar_insupd', 1, 0, @Result);
		end;

		Start Transaction;
        begin
			If not exists (Select 1 from company_calendar Where CompanyCalendarId = _CompanyCalendarId) then
			Begin
				set @companycalendarid = 0;
                select CompanyCalendarId into @companycalendarid from company_calendar
                order by CompanyCalendarId desc limit 1;
                set @companycalendarid = @companycalendarid + 1;
            
				Insert into company_calendar Values (
					@companycalendarid,
					_CompanyId ,
					_HolidayDate,
					_EventName,
					_IsHoliday,
					_IsHalfDay,
					_DescriptionNote,
					_ApplicableFor,
                    _Year,
                    _IsPublicHoliday,
                    _Country,
                    _IsCompanyCustomHoliday,
					_AdminId,
                    null,
                    utc_timestamp(),
                    null
				);
				Set _ProcessingResult = "inserted";
			End;
			Else
			Begin
				Update company_calendar SET 
					CompanyId				=			_CompanyId,
					HolidayDate				=			_HolidayDate,
					EventName				=			_EventName,
					IsHoliday				=			_IsHoliday,
					IsHalfDay				=			_IsHalfDay,
					DescriptionNote			=			_DescriptionNote,
					ApplicableFor			=			_ApplicableFor,
                    Year					=			_Year,
                    IsPublicHoliday			=			_IsPublicHoliday,
                    IsCompanyCustomHoliday	=			_IsCompanyCustomHoliday,
                    Country					=			_Country,
					UpdatedBy				=			_AdminId,
                    UpdatedOn				=			utc_timestamp()
				Where CompanyCalendarId = _CompanyCalendarId;
				
				Set _ProcessingResult = "updated";
			End;
			End if;
		end;
        Commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_calender_delete_by_calenderid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_calender_delete_by_calenderid`(
	   
	_CompanyCalendarId bigint,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_company_calender_delete_by_calenderid', 1, 0, @Result);
		end;
        
        delete from company_calendar where CompanyCalendarId = _CompanyCalendarId;
        Set _ProcessingResult = 'deleted';
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_company_calender_getby_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_company_calender_getby_filter`(
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int

	# call SP_company_calender_getby_filter('1=1', null, 1, 10)
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_company_calender_getby_filter', 1, 0, @Result);
		End;

        Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'HolidayDate';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					CompanyCalendarId, 
					CompanyId ,
					HolidayDate,
					EventName,
					IsHoliday,
					IsHalfDay,
					DescriptionNote,
					ApplicableFor,
                    Year,
                    IsPublicHoliday,
                    Country,
                    IsCompanyCustomHoliday,
					Count(1) Over() as Total from company_calendar
				Where ', _SearchString, '
			)T where RowIndex between ', ((_pageIndex - 1 ) * _pageSize + 1), ' and ', (_pageIndex * _pageSize));
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_files_delete_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_files_delete_by_id`(


	_CompanyFileId int
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_company_files_delete_by_id', 1, 0, @Result);
		end;  
		
		delete from company_files where CompanyFileId = _CompanyFileId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_files_get_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_files_get_byid`(


	_CompanyId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_company_files_get_byid', 1, 0, @Result);
	end;  
		
	select 
		CompanyFileId FileId, 
        CompanyId,
        FileName,
        FileDescription,
        FilePath,
        FileRole,
        FileExtension
    from company_files
    where CompanyId = _CompanyId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_files_get_byids_json` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_files_get_byids_json`(


	_CompanyFileId json
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_company_files_get_byids_json', 1, 0, @Result);
	end;  
		
		
		select c.* from company_files c
		inner join (
		SELECT *
			 FROM
			   JSON_TABLE(
				 _CompanyFileId,
				 "$[*]"
				 COLUMNS(
				   col INT PATH "$"
				 )
			   ) data
		) t on c.CompanyFileId = t.col;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_files_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_files_insupd`(


	_CompanyFileId int,
	_CompanyId int,
	_FileName varchar(145),
	_FileDescription varchar(500),
	_FileExtension varchar(10),
	_FilePath text,
	_FileRole varchar(100),
	_AdminId bigint,
	out _ProcessingResult varchar(50)
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_company_files_insupd', 1, 0, @Result);
		end;  
	Set @FileId = 0;
	set autocommit = 0;
	SET SQL_SAFE_UPDATES=0;
	if not exists (select 1 from company_files where CompanyFileId = _CompanyFileId) then
    begin
		Set @FileId = 0;
		Select CompanyFileId from company_files order by CompanyFileId desc limit 1 into @FileId ;
		Set @FileId = @FileId+1;
        
		Insert into company_files values(
			@FileId,
			_CompanyId,
			_FileName,
			_FileDescription,
			_FileExtension,
			_FilePath,
			_FileRole,
			_AdminId,
			_AdminId,
			utc_timestamp(),
			null    
        );
		Set _ProcessingResult = @FileId;
    end;
    else
    begin
		Set @FileId = _CompanyFileId;
		update company_files set 
			CompanyId			=		_CompanyId,
			FileName			=		_FileName,
			FileDescription		=		_FileDescription,
			FileExtension 		=		_FileExtension,
			FilePath			=		_FilePath,
			FileRole			=		_FileRole,
			UpdatedBy			=		_AdminId,
			UpdatedOn			=		utc_timestamp()
        where CompanyFileId = _CompanyFileId;
        Set _ProcessingResult = @FileId;
    end;
    end if;	
    Set sql_safe_updates = 1;
	Set autocommit = 1;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_get`(


	
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_company_get', 1, 0, @Result);
		end;  
		
		Select * from company;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_getById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_getById`(
	_CompanyId int


	
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_company_getById', 1, 0, @Result);
		end;  
		
		Select c.*, s.ProbationPeriodInDays, s.NoticePeriodInDays from company c
        left join bank_accounts b on c.CompanyId = b.CompanyId
        left join company_setting s on s.CompanyId = b.CompanyId
		where c.CompanyId = _CompanyId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_intupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_intupd`(
	_CompanyId int,
	_OrganizationId int,
	_OrganizationName varchar(250),
	_CompanyName varchar(150),
	_CompanyDetail varchar(250),
	_SectorType int,
	_Country varchar(50),
	_State varchar(100),
	_City varchar(100),
	_FirstAddress varchar(100),
	_SecondAddress varchar(100),
	_ThirdAddress varchar(100),
	_ForthAddress varchar(100),
	_FullAddress varchar(150),
	_MobileNo varchar(20),
	_Email varchar(50),
	_FirstEmail varchar(100),
	_SecondEmail varchar(100),
	_ThirdEmail varchar(100),
	_ForthEmail varchar(100),
	_PrimaryPhoneNo varchar(20),
	_SecondaryPhoneNo varchar(20),
	_Fax varchar(50),
	_Pincode int,
	_FileId bigint,
	_LegalDocumentPath varchar(250),
	_LegalEntity varchar(50),
	_TypeOfBusiness varchar(150),
	_InCorporationDate datetime,
	_IsPrimaryCompany bit(1),
	_FixedComponentsId json,    
	_BankAccountId int,
	_BankName varchar(100),
	_BranchCode varchar(20),
	_Branch varchar(50),
	_IFSC varchar(20),
    _PANNo varchar(45),
    _GSTNo varchar(45),
    _TradeLicenseNo varchar(45),
    _AdminId long,    
	out _ProcessingResult varchar(50)
    

	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_company_intupd', 1, 0, @Result);
			end;  
                    		select * from company;    
            if not exists(select 1 from company where CompanyId = _CompanyId) then
            begin
				if exists(select 1 from company where lower(CompanyName) = lower(_CompanyName)) then
                begin
					select CompanyId from company 
                    where lower(CompanyName) = lower(_CompanyName) into _CompanyId;
                end;
                end if;
            end;
            end if;
            
            set @organizationName = '';
            select OrganizationName into @organizationName 
            from organization_detail
            where OrganizationId = _OrganizationId;

			if not exists(select 1 from company where CompanyId = _CompanyId) then
            begin
				Insert into company values(
					_CompanyId,
					_OrganizationId,
					@organizationName,
					_CompanyName,
					_CompanyDetail,
					_SectorType,
					_Country,
					_State,
					_City,
					_FirstAddress,
					_SecondAddress,
					_ThirdAddress,
					_ForthAddress,
					_FullAddress,
					_MobileNo,
					_Email,
					_FirstEmail,
					_SecondEmail,
					_ThirdEmail,
					_ForthEmail,
					_PrimaryPhoneNo,
					_SecondaryPhoneNo,
					_Fax,
					_Pincode,
					_FileId,
					_LegalDocumentPath,
					_LegalEntity,
					_TypeOfBusiness,
					_InCorporationDate,
                    _PANNo,
					_GSTNo,
					_TradeLicenseNo,
					_IsPrimaryCompany,
					_FixedComponentsId,
					_AdminId,
					null,
					utc_timestamp(),
					null
				);
                
                Set _ProcessingResult = 'inserted';
			end;
            else 
            begin
				update company set
					OrganizationId					=			_OrganizationId,
					OrganizationName				=			@organizationName,
					CompanyName						=			_CompanyName,
					CompanyDetail					=			_CompanyDetail,
					SectorType						=			_SectorType,
					Country							=			_Country,
					State							=			_State,
					City							=			_City,
					FirstAddress					=			_FirstAddress,
					SecondAddress					=			_SecondAddress,
					ThirdAddress					=			_ThirdAddress,
					ForthAddress					=			_ForthAddress,
					FullAddress						=			_FullAddress,
					MobileNo						=			_MobileNo,
					Email							=			_Email,
					FirstEmail						=			_FirstEmail,
					SecondEmail						=			_SecondEmail,
					ThirdEmail						=			_ThirdEmail,
					ForthEmail						=			_ForthEmail,
					PrimaryPhoneNo					=			_PrimaryPhoneNo,
					SecondaryPhoneNo				=			_SecondaryPhoneNo,
					Fax								=			_Fax,
					Pincode							=			_Pincode,
					FileId							=			_FileId,
					LegalDocumentPath				=			_LegalDocumentPath,
					LegalEntity						=			_LegalEntity,
					TypeOfBusiness					=			_TypeOfBusiness,
					InCorporationDate				=			_InCorporationDate,
                    PANNo							=			_PANNo,
					GSTNo							=			_GSTNo,
					TradeLicenseNo					=			_TradeLicenseNo,
					IsPrimaryCompany				=			_IsPrimaryCompany,
					FixedComponentsId				=			_FixedComponentsId,
					UpdatedBy						=			_AdminId,
                    UpdatedOn						=			utc_timestamp()
				where CompanyId 					= 			_CompanyId;
                
                Set _ProcessingResult = 'updated';
            end;
            end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_company_notification_getby_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_company_notification_getby_filter`(
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_company_notification_getby_filter', 1, 0, @Result);
		End;

        Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'UpdatedOn, CreatedOn Desc';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
						NotificationId,
						Topic,
						CompanyId,
						BriefDetail,
						Departments,
						CompleteDetail,
                        StartDate,
						EndDate,
						IsGeneralAnnouncement,
						AnnouncementType,
						FileIds,
						CreatedOn,
						UpdatedOn,
					Count(1) Over() as Total from company_notification
				Where ', _SearchString, '
			)T where RowIndex between ', ((_pageIndex - 1 ) * _pageSize + 1), ' and ', (_pageIndex * _pageSize));
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_company_notification_getby_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_company_notification_getby_id`(
	_NotificationId bigint


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
            RollBack;
			Call sp_LogException(@Message, '', 'SP_company_notification_getby_id', 1, 0, @Result);
		End;

		select * from company_notification where NotificationId = _NotificationId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_notification_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_notification_insupd`(
	   

	_NotificationId bigint,
    _Topic varchar(100),
    _BriefDetail varchar(250),
    _CompanyId int,
    _Departments json,
    _CompleteDetail text,
    _StartDate datetime,
    _EndDate datetime,
    _IsGeneralAnnouncement bit,
    _AnnouncementType int,
    _FileIds json,
    _AdminId bigint,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            RollBack;
            Call sp_LogException (@Message, '', 'sp_company_notification_insupd', 1, 0, @Result);
		end;

		Start Transaction;
        begin
			If not exists (Select * from company_notification Where NotificationId = _NotificationId) then
			Begin
				Insert into company_notification Values (
					default,
					_Topic,
					_CompanyId,
					_BriefDetail,
					_Departments,
					_CompleteDetail,
                    _StartDate,
					_EndDate,
					_IsGeneralAnnouncement,
					_AnnouncementType,
					_FileIds,
					_AdminId,
                    null,
                    utc_timestamp(),
                    null
				);
				Set _ProcessingResult = "inserted";
			End;
			Else
			Begin
				Update company_notification SET 
					CompanyId				=			_CompanyId,
					Topic					=			_Topic,
					BriefDetail				=			_BriefDetail,
					Departments				=			_Departments,
					CompleteDetail			=			_CompleteDetail,
                    StartDate				=			_StartDate,
					EndDate					=			_EndDate,
					IsGeneralAnnouncement	=			_IsGeneralAnnouncement,
					AnnouncementType		=			_AnnouncementType,
					FileIds					=			_FileIds,
					UpdatedBy				=			_AdminId,
                    UpdatedOn				=			utc_timestamp()
				Where NotificationId 		=			_NotificationId;
				
				Set _ProcessingResult = "updated";
			End;
			End if;
		end;
        Commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_primary_logo_get_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_primary_logo_get_byid`(


	_CompanyId int,
    _FileRole varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_company_primary_logo_get_byid', 1, 0, @Result);
	end;  
		
	select 
		CompanyFileId FileId, 
        CompanyId,
        FileName,
        FileDescription,
        FilePath,
        FileRole,
        FileExtension
    from company_files
    where CompanyId = _CompanyId and FileRole = _FileRole;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_setting_get_all` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_setting_get_all`(	
    

)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_company_setting_get_all', 1, 0, @Result);
	end;
    
	select s.*, c.OrganizationName, c.CompanyName from company c
    inner join company_setting s on c.CompanyId = s.CompanyId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_setting_get_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_setting_get_byid`(	
    _CompanyId int
    

)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_company_setting_get_byid', 1, 0, @Result);
	end;
    begin    
		select * from company_setting c
		where c.CompanyId = _CompanyId Or IsPrimary = 1;
        
        select * from employee_roles;
	end;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_company_setting_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_company_setting_insupd`(	
    _SettingId bigint,
    _CompanyId int,
    _ProbationPeriodInDays int,
    _NoticePeriodInDays int,
	_DeclarationStartMonth int,
	_DeclarationEndMonth int,
	_IsPrimary bit,
	_FinancialYear int,
    _AttendanceSubmissionLimit int,
    _LeaveAccrualRunCronDayOfMonth int,
    _EveryMonthLastDayOfDeclaration int,
    _TimezoneName varchar(100),
    _IsJoiningBarrierDayPassed bit,
    _NoticePeriodInProbation int,
    _ExcludePayrollFromJoinDate int,
	_AdminId bigint,
	_TimeDifferences varchar(10),
    out _ProcessingResult varchar(50)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_company_setting_insupd', 1, 0, @Result);
	end;
    begin
		if not exists (select * from company_setting where CompanyId = _CompanyId) then
		begin
			insert into company_setting values (
				default,
                _CompanyId,
				_ProbationPeriodInDays,
				_NoticePeriodInDays,
                _NoticePeriodInProbation,
                _DeclarationStartMonth,
				_DeclarationEndMonth,
                _FinancialYear,
                _ExcludePayrollFromJoinDate,
                _AdminId,
                null,
                utc_timestamp(),
                null,
				_IsPrimary,
                _AttendanceSubmissionLimit,
                _TimezoneName,
				_LeaveAccrualRunCronDayOfMonth,
				_EveryMonthLastDayOfDeclaration,
                _IsJoiningBarrierDayPassed,
				_TimeDifferences
            );
            set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update company_setting set
					ProbationPeriodInDays				=		_ProbationPeriodInDays,
					NoticePeriodInDays					=		_NoticePeriodInDays,
                    DeclarationStartMonth				=		_DeclarationStartMonth,
					DeclarationEndMonth					=		_DeclarationEndMonth,
					IsPrimary							=		_IsPrimary,
					FinancialYear						=		_FinancialYear,
					UpdatedBy							=		_AdminId,
					UpdatedOn							= 		utc_timestamp(),
                    AttendanceSubmissionLimit			=		_AttendanceSubmissionLimit,
                    LeaveAccrualRunCronDayOfMonth		=		_LeaveAccrualRunCronDayOfMonth,
					EveryMonthLastDayOfDeclaration		=		_EveryMonthLastDayOfDeclaration,
                    IsJoiningBarrierDayPassed			=		_IsJoiningBarrierDayPassed,
                    ExcludePayrollFromJoinDate			=		ExcludePayrollFromJoinDate,
					NoticePeriodInProbation				=		_NoticePeriodInProbation,
					TimeDifferences						=		_TimeDifferences
			where 	SettingId 							= 		_SettingId;
			
			set _ProcessingResult = 'updated';
        end;
        end if;
        
        update payroll_cycle_setting set
			PayCycleMonth = _DeclarationStartMonth
		where CompanyId = _CompanyId;
	end;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_complaint_or_request_get_by_attendanceid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_complaint_or_request_get_by_attendanceid`(
	_AttendanceId int,
	_EmployeeId bigint


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_complaint_or_request_get_by_attendanceid', 1, 0, @Result);
	End;
    
    select * from attendance
    where AttendanceId = _AttendanceId;

	Select *
	from complaint_or_request
	Where TargetId = _AttendanceId;
    
    select e.*, w.Duration, w.LunchDuration, w.OfficeTime from employees e
    left join work_shifts w on 
    case 
		when e.WorkShiftId > 0
		then w.WorkShiftId = e.WorkShiftId
        else w.WorkShiftId = 1
	end
    where EmployeeUid = _EmployeeId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_complaint_or_request_get_by_employeeid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_complaint_or_request_get_by_employeeid`(
	_SearchString varchar(500),
    _SortBy varchar(50),
    _PageSize int,
    _PageIndex int


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_complaint_or_request_get_by_employeeid', 1, 0, @Result);
	End;
    
	If(_SortBy is NULL OR _SortBy = '') then
		Set _SortBy = 'AttendanceDate desc, UpdatedOn desc';
        
	End if;
	Set @SelectQuery = CONCAT('Select * from (
		Select 
			Row_Number() over(Order by ', _SortBy, ') as RowIndex,
				ComplaintOrRequestId,
				RequestTypeId,
				TargetId,
                TargetOffset,
				EmployeeId, 
				EmployeeName, 
				Email, 
				Mobile,
                ManagerId,
                ManagerName,
                ManagerEmail,
                ManagerMobile,
                EmployeeMessage,
                ManagerComments,
                CurrentStatus,
                RequestedOn,
                AttendanceDate,
                LeaveFromDate,
                LeaveToDate,
                Notify,
                UpdatedOn,
			Count(1) Over() as Total from complaint_or_request
		Where ', _SearchString, '
	)T where RowIndex between ', ((_PageIndex - 1 ) * _PageSize + 1), ' and ', (_PageIndex * _PageSize));
	
	
	prepare SelectQuery from @SelectQuery;
	execute SelectQuery;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_complaint_or_request_InsUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_complaint_or_request_InsUpdate`(
	_AttendanceId int,
    _AttendanceStatus int,
    _TotalMinutes int,
    _ComplaintOrRequestId int,
	_RequestTypeId int,
	_TargetId int,
    _TargetOffset int,
	_EmployeeId bigint,
	_EmployeeName varchar(100),
	_Email varchar(50),
	_Mobile varchar(20),
	_ManagerId bigint,
	_ManagerName varchar(100),
	_ManagerEmail varchar(50),
	_ManagerMobile varchar(20),
	_EmployeeMessage text,
	_ManagerComments text,
	_CurrentStatus int,
	_RequestedOn datetime,
    _AttendanceDate datetime,
    _LeaveFromDate datetime,
    _LeaveToDate datetime,
    _Notify json,
	_ExecutedByManager bit,
	_ExecuterId bigint,
	_ExecuterName varchar(100),
	_ExecuterEmail varchar(50),
    out _ProcessingResult varchar(100)
    

    
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;

		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Set _ProcessingResult = @Message;    
		Call sp_LogException (@Message, '', 'sp_complaint_or_request_InsUpdate', 1, 0, @Result);
	end;

	set @complaintOrRequestId = 0;
	select ComplaintOrRequestId into @complaintOrRequestId from complaint_or_request 
	order by ComplaintOrRequestId desc limit 1;
	set @complaintOrRequestId = @complaintOrRequestId + 1;            

	If not exists (Select 1 from complaint_or_request Where ComplaintOrRequestId = _ComplaintOrRequestId) then
	Begin
		Insert into complaint_or_request Values (
			@complaintOrRequestId,
			_RequestTypeId,
			_TargetId,
            _TargetOffset,
			_EmployeeId,
			_EmployeeName,
			_Email,
			_Mobile,
			_ManagerId,
			_ManagerName,
			_ManagerEmail,
			_ManagerMobile,
			_EmployeeMessage,
			_ManagerComments,
			_CurrentStatus,
            _RequestedOn,
			_AttendanceDate,
			_LeaveFromDate,
			_LeaveToDate,
            _Notify,
            _ExecutedByManager,
			_ExecuterId,
			_ExecuterName,
			_ExecuterEmail,
            utc_timestamp()
		);
		
		Set _ProcessingResult = 'inserted';
	End;
	Else
	Begin
		Update complaint_or_request SET 
			ManagerComments			=		_ManagerComments,
			CurrentStatus			=		_CurrentStatus,
            UpdatedOn				= 		utc_timestamp(),
            RequestedOn				=		_RequestedOn,
            EmployeeMessage			= 		_EmployeeMessage,
            Notify					=		_Notify,
			ExecutedByManager		=		_ExecutedByManager,
			ExecuterId				=		_ExecuterId,
			ExecuterName			=		_ExecuterName,
			ExecuterEmail			=		_ExecuterEmail
		Where ComplaintOrRequestId 	= _ComplaintOrRequestId;
		
		Set _ProcessingResult = 'updated';
	End;
	End if;
    
    if exists (select 1 from daily_attendance where AttendanceId = _AttendanceId) then
    begin
		update attendance set
			AttendanceStatus = 		_AttendanceStatus,
            TotalMinutes	 =		_TotalMinutes
		where AttendanceId = _AttendanceId;
    end;
    end if;

End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_complaint_or_request_update_status` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_complaint_or_request_update_status`(
	_ComplaintOrRequestId int,
	_ExecutedByManager bit,
	_ExecuterId bigint,
	_ExecuterName varchar(100),
	_ExecuterEmail varchar(50),
    _ManagerComments varchar(500),
    _StatusId int,
	_AttendanceId int,
    _AttendanceStatus int,
	_ReviewerName varchar(100),
    _UserId bigint,  
    _ReviewerId bigint,
    _ReviewerEmail varchar(100),
    _TotalMinutes int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_complaint_or_request_update_status', 1, 0, @Result);
	end;

	If exists (Select 1 from complaint_or_request Where ComplaintOrRequestId = _ComplaintOrRequestId) then
	Begin
		Update complaint_or_request SET 
			ManagerComments			=		_ManagerComments,
			CurrentStatus			=		_StatusId,
            UpdatedOn				= 		utc_timestamp(),       
			ExecutedByManager		= 		_ExecutedByManager,
			ExecuterId				=		_ExecuterId,
			ExecuterName			=		_ExecuterName,
			ExecuterEmail			=		_ExecuterEmail
		Where ComplaintOrRequestId 	= 		_ComplaintOrRequestId;
	End;
	End if;
    
	if exists (select 1 from daily_attendance where AttendanceId = _AttendanceId) then
	Begin
		update daily_attendance Set
			AttendanceStatus		=		_AttendanceStatus,
            ReviewerName			=		_ReviewerName,
            ReviewerId				=		_ReviewerId,
            ReviewerEmail			=		_ReviewerEmail,
            TotalMinutes			=		_TotalMinutes,
            UpdatedBy 				=		_UserId,
            UpdatedOn				=		utc_timestamp()
		where AttendanceId 			= 		_AttendanceId;
	End;
	End if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_daily_attendance_bet_dates` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_daily_attendance_bet_dates`(
  _FromDate datetime,
  _ToDate datetime  
)
BEGIN
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_daily_attendance_bet_dates', 1, 0, @Result);
	end;

	SELECT
		AttendanceId,
		EmployeeId,
		EmployeeName,
		EmployeeEmail,
		ReviewerId,
		ReviewerName,
		ReviewerEmail,
		ProjectId,
		TaskId, 
		TaskType,
		LogOn,
		LogOff,
		TotalMinutes,
		Comments, 
		AttendanceStatus,
		WeekOfYear,
		AttendanceDate,
		WorkTypeId,
		IsOnLeave,
		LeaveId,
		Case 
			When AttendanceDate = c.HolidayDate then true
            Else false
		End
		IsHoliday,
		Case 
			When AttendanceDate = c.HolidayDate then c.CompanyCalendarId
            Else 0
		End
        HolidayId
	FROM daily_attendance a
    left Join company_calendar c on AttendanceDate = HolidayDate
	WHERE AttendanceDate between _FromDate And _ToDate;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_daily_attendance_bet_dates_EmpId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_daily_attendance_bet_dates_EmpId`(
  _FromDate datetime,
  _ToDate datetime,
  _EmployeeId bigint
  
)
BEGIN
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_daily_attendance_bet_dates_EmpId', 1, 0, @Result);
	end;

	SELECT
		AttendanceId,
		EmployeeId,
		EmployeeName,
		EmployeeEmail,
		ReviewerId,
		ReviewerName,
		ReviewerEmail,
		ProjectId,
		TaskId, 
		TaskType,
		LogOn,
		LogOff,
		TotalMinutes,
		Comments, 
		AttendanceStatus,
		WeekOfYear,
		AttendanceDate,
		WorkTypeId,
		IsOnLeave,
		LeaveId,
		Case 
			When AttendanceDate = c.HolidayDate then true
            Else false
		End
		IsHoliday,
		Case 
			When AttendanceDate = c.HolidayDate then c.CompanyCalendarId
            Else 0
		End
        HolidayId
	FROM daily_attendance a
    left Join company_calendar c on AttendanceDate = HolidayDate
	WHERE AttendanceDate between _FromDate And _ToDate
    And EmployeeId = _EmployeeId;
    
    set @workshiftid = 0;
    select WorkShiftId into @workshiftid from employees where EmployeeUid = _EmployeeId;
    
    select * from work_shifts where WorkShiftId = @workshiftid;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_daily_attendance_by_user` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_daily_attendance_by_user`(
  _FromDate datetime,
  _ToDate datetime,
  _EmployeeId bigint  
)
BEGIN
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_daily_attendance_by_user', 1, 0, @Result);
	end;

	SELECT
		AttendanceId,
		EmployeeId,
		EmployeeName,
		EmployeeEmail,
		ReviewerId,
		ReviewerName,
		ReviewerEmail,
		ProjectId,
		TaskId, 
		TaskType,
		LogOn,
		LogOff,
		TotalMinutes,
		Comments, 
		AttendanceStatus,
		WeekOfYear,
		AttendanceDate,
		WorkTypeId,
		IsOnLeave,
		LeaveId,
		a.UpdatedOn,
		Case 
			When AttendanceDate = c.HolidayDate then true
            Else false
		End
		IsHoliday,
		Case 
			When AttendanceDate = c.HolidayDate then c.CompanyCalendarId
            Else 0
		End
        HolidayId
	FROM daily_attendance a
    left Join company_calendar c on AttendanceDate = HolidayDate
	WHERE AttendanceDate between _FromDate And _ToDate
    And EmployeeId = _EmployeeId;
    
    
    select * from leave_request_notification
    where EmployeeId = _EmployeeId
	and RequestStatusId = 9;
    
    select e.*, c.AttendanceSubmissionLimit from employees e 
	left join company_setting c on c.CompanyId = e.CompanyId
	Where e.EmployeeUid = _EmployeeId;
    
    select * from work_shifts w
    where w.WorkShiftId = (Select WorkShiftId from employees where EmployeeUid = _EmployeeId); 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_daily_attendance_config_data` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_daily_attendance_config_data`(
  _EmployeeId bigint
)
BEGIN
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_daily_attendance_config_data', 1, 0, @Result);
	end;

    select e.*, c.AttendanceSubmissionLimit 
    from employees e 
	left join company_setting c on c.CompanyId = e.CompanyId
	Where e.EmployeeUid = _EmployeeId;
    
    if exists (select 1 from project_members_detail where EmployeeId = _EmployeeId and IsActive = true) then
    begin
		select * from project p
		inner join project_members_detail pm on pm.ProjectId = p.ProjectId
		where pm.EmployeeId = _EmployeeId
		and pm.IsActive = true;
    end;
    else
    begin
		select * from project where ProjectId = 1;
    end;
    end if;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_daily_attendance_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_daily_attendance_filter`(
	_SearchString varchar(250),
	_SortBy varchar(50),
	_PageIndex int,
	_PageSize int,
	_EmployeeId bigint
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_daily_attendance_filter', 1, 0, @Result);
		End;

        Begin
			If(_sortBy is NULL OR _sortBy = '') then
            begin
				Set _sortBy = ' a.AttendanceDate DESC ';
			end;
			End if;
			
				Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					a.AttendanceId,
					a.EmployeeId,
					a.EmployeeName,
					a.EmployeeEmail,
					a.ReviewerId,
					a.ReviewerName,
					a.ReviewerEmail,
					a.ProjectId,
					a.TaskId, 
					a.TaskType,
					a.LogOn,
					a.LogOff,
					a.TotalMinutes,
					a.Comments, 
					a.AttendanceStatus,
					a.WeekOfYear,
					a.AttendanceDate,
					a.WorkTypeId,
					a.IsOnLeave,
					a.LeaveId,
					Case 
						When a.AttendanceDate = c.HolidayDate then true
						Else false
					End
					IsHoliday,
					Case 
						When a.AttendanceDate = c.HolidayDate then c.CompanyCalendarId
						Else 0
					End
					HolidayId,
                    Count(1) Over() as Total 
				FROM daily_attendance a
                left Join company_calendar c on a. AttendanceDate = c.HolidayDate
				where ', _SearchString, '
			)T where RowIndex between ', (_PageIndex - 1) * _PageSize + 1 ,' and ', (_PageIndex * _PageSize)) ;
            			
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;	

			select * from leave_request_notification
            where EmployeeId = _EmployeeId;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_daily_attendance_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_daily_attendance_get`(

    _EmployeeId bigint,
    _FromDate datetime,
    _ToDate datetime,
    _CompanyId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Drop table if exists employeeTempTable;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, @OperationStatus, 'sp_daily_attendance_get', 1, 0, @Result);
	end;
	
	
	Select 
		a.*
	from daily_attendance a   
	Where a.AttendanceDate between _FromDate and _ToDate
    and a.EmployeeId = _EmployeeId;	
	
    CREATE TEMPORARY TABLE IF NOT EXISTS employeeTempTable As
	select e.*, c.AttendanceSubmissionLimit from employees e 
	left join company_setting c on c.CompanyId = e.CompanyId
	Where e.EmployeeUid = _EmployeeId;
	
    select * from employeeTempTable;
    
	select * from company_calendar where CompanyId = _CompanyId;
    
    set @workShiftId = (select WorkShiftId from employeeTempTable);
    select * from work_shifts
	where 
	case
		when @workShiftId > 0
		then WorkShiftId = @workShiftId
		else WorkShiftId = 1
	end;
    /*
    Select 
		ComplaintOrRequestId,
		RequestTypeId,
		TargetId,
        TargetOffset,
		EmployeeId, 
		EmployeeName, 
		Email, 
		Mobile,
		ManagerId,
		ManagerName,
		ManagerEmail,
		ManagerMobile,
		EmployeeMessage,
		ManagerComments,
		CurrentStatus,
		RequestedOn,
		AttendanceDate,
		LeaveFromDate,
		LeaveToDate,
		Notify,
		UpdatedOn
	from complaint_or_request
	Where RequestTypeId = _RequestTypeId and EmployeeId = _EmployeeId
	and datediff(_AttendanceDate, AttendanceDate) <= 0;
*/    
    drop table if exists employeeTempTable;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_daily_attendance_ins_advance` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_daily_attendance_ins_advance`(
  _FromDate datetime,
  _ToDate datetime,
  _AttendanceStatus int
)
BEGIN
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_daily_attendance_ins_advance', 1, 0, @Result);
	end;

	Set @id = 0;
    select AttendanceId into @id from daily_attendance order by AttendanceId desc limit 1;

	INSERT INTO daily_attendance (
		AttendanceId,
		EmployeeId,
		EmployeeName,
		EmployeeEmail,
		ReviewerId,
		ReviewerName,
		ReviewerEmail,
		ProjectId,
		TaskId,
		TaskType,
		LogOn,
		LogOff,
		TotalMinutes,
		Comments,
		AttendanceStatus,
		WeekOfYear,
		AttendanceDate,
		WorkTypeId,
        IsOnLeave,
        LeaveId,
		CreatedBy,
		CreatedOn,
		UpdatedBy,
		UpdatedOn
	)
	SELECT
		@id:= @id + 1,
		e.EmployeeUid,
		CONCAT(e.FirstName, ' ', e.LastName),
		e.Email,
		0 AS ReviewerId,
		null,
		null,
		0 AS ProjectId,
		0 AS TaskId,
		0 AS TaskType,
		'00:00:00' AS LogOn,
		'00:00:00' AS LogOff,
		480 AS TotalMinutes, -- Random number of minutes (0 to 480)
		'[]' AS Comments,
        Case
			When weekday(DATE_ADD(_FromDate, INTERVAL seq - 0 DAY)) = 6
            then 3
            else _AttendanceStatus
		End AS AttendanceStatus,
		WEEKOFYEAR(DATE_ADD(_FromDate, INTERVAL seq - 1 DAY)) AS WeekOfYear,
		DATE_ADD(_FromDate, INTERVAL seq - 1 DAY) AS AttendanceDate,
		1,
        false,
        0,
		1 AS CreatedBy,
		NOW() AS CreatedOn,
		NULL AS UpdatedBy,
		NULL AS UpdatedOn
	FROM employees e,
		(SELECT (t3.n * 10000) + (t2.n * 1000) + (t1.n * 100) + (t0.n * 10) + (t4.n) + 1 AS seq
		 FROM
			 (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL
			  SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) t0,
			 (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL
			  SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) t1,
			 (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL
			  SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) t2,
			 (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL
			  SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) t3,
			 (SELECT 0 AS n UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL
			  SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) t4
		) numbers
	WHERE
		DATE_ADD(_FromDate, INTERVAL seq - 1 DAY) <= _ToDate;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_daily_attendance_upd_weekly` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_daily_attendance_upd_weekly`(
	_AttendanceId bigint,
	_EmployeeId bigint,
	_EmployeeName varchar(100),
	_EmployeeEmail varchar(100),
	_ReviewerId long,
	_ReviewerName varchar(100),
	_ReviewerEmail varchar(100),
	_ProjectId int,
	_TaskId int,
	_TaskType int,
	_LogOn varchar(10),
	_LogOff varchar(10),
	_TotalMinutes int,
	_Comments json,
	_AttendanceStatus int,
	_WeekOfYear int,
	_AttendanceDate Datetime,
	_WorkTypeId int,
	_IsOnLeave bit,
	_LeaveId int,
	_CreatedBy bigint,
    out _ProcessingResult varchar(100)
)
BEGIN
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_daily_attendance_upd_weekly', 1, 0, @Result);
	end;

	if exists(Select 1 from daily_attendance where AttendanceId = _AttendanceId) then
    begin
		Update daily_attendance
		Set
			EmployeeId          =       _EmployeeId,
			EmployeeName        =       _EmployeeName,
			EmployeeEmail       =       _EmployeeEmail,
			ReviewerId          =       _ReviewerId,
			ReviewerName        =       _ReviewerName,
			ReviewerEmail       =       _ReviewerEmail,
			ProjectId           =       _ProjectId,
			TaskId              =       _TaskId,
			TaskType            =       _TaskType,
			LogOn               =       _LogOn,
			LogOff              =       _LogOff,
			TotalMinutes        =       _TotalMinutes,
			Comments            =       _Comments,
			AttendanceStatus    =       _AttendanceStatus,
			WeekOfYear          =       _WeekOfYear,
			AttendanceDate      =       _AttendanceDate,
			WorkTypeId          =       _WorkTypeId,
			IsOnLeave           =       _IsOnLeave,
			LeaveId             =       _LeaveId,
			CreatedBy           =       _CreatedBy,
			CreatedOn           =       utc_timestamp(),
			UpdatedBy           =       _CreatedBy,
			UpdatedOn           =       utc_timestamp()
		Where AttendanceId      =       _AttendanceId;
        
        Set _ProcessingResult = 'updated';
	end;
    end if;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_dashboard_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_dashboard_get`(



    _userId bigint,
    _employeeUid bigint,
    _fromDate datetime,
    _toDate datetime
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
                                            
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_dashboard_get', 1, 0, @Result);
			end;
            
            Set @workingMonth = Month(utc_date());
            Set @workingYear  = year(utc_date());
            
            if (@workingMonth = 1) then
			Set @workingYear = @workingYear - 1;
            end if;
            
            Set @workingMonth = @workingMonth - 1;
            
            
            
            Select 
				e.FirstName,
                e.LastName,
                e.Email,
                e.Mobile,
                c.ClientName,
                c.ClientId,
                b.PaidAmount,
                b.BillDetailUid,
                b.BillForMonth,
                b.BillYear,
                b.PaidOn,
                b.BillNo,
                b.BillUpdatedOn,
                b.BillStatusId
            from billdetail b 
            Inner join employees e on b.EmployeeUid = e.EmployeeUid
            Left join clients c on b.ClientId = c.ClientId
            where b.BillStatusId = 2 and 
            b.BillForMonth = @workingMonth and 
            b.BillYear = @workingYear;
            
            
            select 
				g.gstId, 
                g.billno, 
                g.amount, 
                c.ClientName, 
                c.ClientId, 
                b.EmployeeUid,
                b.BillStatusId
			from gstdetail g
			inner join billdetail b on g.billno = b.BillNo
			inner join clients c on c.ClientId = b.ClientId
			where g.gststatus = 2 and 
			b.BillYear = year(utc_date());
                     
			
            Select * from attendance a
            where a.ForMonth = Month(utc_date())
            and a.ForYear = Year(utc_date()) and
            a.DaysPending != 0;
            
            select b.PaidAmount, b.BillForMonth, count(b.PaidAmount) TotalBills from billdetail b
			where b.BillYear = Year(utc_date())
			Group by b.BillForMonth;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_DeActivatedEmployee_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_DeActivatedEmployee_Get`(


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_DeActivatedEmployee_Get', 1, 0, @Result);
		End;

        Begin
			
            
            Select e.EmployeeUid,
            e.FirstName,
            e.LastName,
            e.Mobile,
            e.Email,
            ep.AadharNo,
            ep.PANNo,
            ep.AccountNumber,
            ep.BankName,
            ep.IFSCCode,
            ep.Domain,
            ep.Specification,
            ep.ExprienceInYear,
            false isActive,
            0 ActualPackage,
            0 FinalPackage,
            0 TakeHomeByCandidate,
			(
				Select 
					JSON_ARRAYAGG(ClientUid)
				from employeemappedclients 
				where EmployeeUid = e.EmployeeUid
			) as ClientJson
            from employee_archive e 
            Inner Join employeeprofessiondetail_archive ep on ep.EmployeeUid = e.EmployeeUid;
            
            
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_deactivateOrganization_delandgetall` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_deactivateOrganization_delandgetall`(


	_ClientMappedId bigint,
    _UserId bigint
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_deactivateOrganization_delandgetall', 1, 0, @Result);
			end;  
            
            update employeemappedclients
            set IsActive = 0 
            where EmployeeMappedClientsUid = _ClientMappedId;
            
            Select * from employeemappedclients 
            where EmployeeUid = _UserId and IsActive = 1;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_declaration_get_filter_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_declaration_get_filter_by_empid`(
	_searchString varchar(250),
	_CompanyId int

)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_declaration_get_filter', 1, 0, @Result);
		End;

        Begin
            set @financialYear  = 0;
            select FinancialYear into @financialYear from company_setting
            where CompanyId = _CompanyId;
        
			Set @SelectQuery = CONCAT('Select d.*,concat(e.FIrstName, e.LastName) FullName, e.Email from employee_declaration d
				inner join employees e on e.EmployeeUid = d.EmployeeId 
				Where d.DeclarationFromYear = @financialYear and  d.EmployeeId in (', _SearchString, ')'
			);
		
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;
			DEALLOCATE PREPARE SelectQuery;
        
			Set @SelectQuery = CONCAT('Select es.* from employee_salary_detail es 
				Where es.FinancialStartYear = @financialYear and  es.EmployeeId in (', _SearchString, ')'
			);
            
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;
            DEALLOCATE PREPARE SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_deductions_detail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_deductions_detail_insupd`(


	_DeductionId int,
    _DeductionDescription varchar(100),
    _IsPaidByEmployee bit,
    _IsPaidByEmployeer bit,
    _IsMandatory bit,
    _IsFixedAmount bit,
    _Admin bigint,
    out _ProcessingResult varchar(100)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_deductions_detail_insupd', 1, 0, @Result);
			end;  
		
		if not exists(select 1 from deductions_detail where DeductionId = _DeductionId) then
        begin
			insert into deductions_detail
            values(
				default,
				_DeductionDescription,
                _IsPaidByEmployee,
				_IsPaidByEmployeer,
				_IsMandatory,
                _IsFixedAmount,
				utc_timestamp(),
                null,
                _Admin,
                null
            );
            
            Set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update deductions_detail set				
				DeductionDescription			=			_DeductionDescription,
				IsPaidByEmployee				=			_IsPaidByEmployee,
				IsPaidByEmployeer				=			_IsPaidByEmployeer,
				IsMandatory						=			_IsMandatory,
                IsFixedAmount					= 			_IsFixedAmount,
				UpdatedBy						=			_Admin,
                UpdatedOn						=			utc_timestamp()
            where DeductionId = _DeductionId;
            
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_department_and_roles_getall` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_department_and_roles_getall`(
    _CompanyId int


)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_department_and_roles_getall', 1, 0, @Result);
		End;
		     
        select * from department;
        
        select * from employee_roles;
        
        select * from company_files where CompanyId = _CompanyId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_discover_workflow_detail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_discover_workflow_detail`(
	_EmployeeId bigint,
    _ApprovalWorkFlowId int,
    _ProjectId int
    
/*

	call sp_discover_workflow_detail(2, 1, 3);
 
*/


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_discover_workflow_detail', 1, 0, @Result);
	End;
    
    Set @team = '';
    select Team into @team from project_members_detail p
    where p.EmployeeId = _EmployeeId
    and p.ProjectId = _ProjectId;

    select 
		t.EmployeeId, 
        t.DesignationId,
        t.FullName,
        t.Email,
        t.Team
	from approval_work_flow w
	Inner join approval_chain_detail c on w.ApprovalWorkFlowId = c.ApprovalWorkFlowId
    Inner join project_members_detail t on t.DesignationId = c.AssignieId
	where w.ApprovalWorkFlowId = _ApprovalWorkFlowId 
	and c.EmpOrDesignation = 0 
    and t.ProjectId = _ProjectId
	and t.IsActive = true
    and t.Team = @team
    
    union
    
	select 
		tm.EmployeeId, 
        tm.DesignationId,
        tm.FullName,
        tm.Email,
        tm.Team
	from approval_work_flow w
	Inner join approval_chain_detail c on w.ApprovalWorkFlowId = c.ApprovalWorkFlowId
    Inner join project_members_detail tm on tm.EmployeeId = c.AssignieId
	where w.ApprovalWorkFlowId = _ApprovalWorkFlowId 
	and c.EmpOrDesignation = true
    and tm.ProjectId = _ProjectId
	and tm.IsActive = true
	and tm.Team = @team;
    
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_document_filedetail_delete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_document_filedetail_delete`(
	_FileIds varchar(20),
    out _ProcessingResult varchar(100)


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
				
			ROLLBACK;
            Set _ProcessingResult = "Error";
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_document_filedetail_delete', 1, 0, @Result);
		End;

		Set _ProcessingResult = "";
		Start Transaction;
        Begin			
			Set @DeleteQuery = Concat('
				Delete from userfiledetail f where f.FileId in (', _FileIds ,')
            ');
            
			
			prepare DeleteQuery from @DeleteQuery;
			execute DeleteQuery;
            
            Set _ProcessingResult = "Deleted successfully";
		End;
        
        COMMIT;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_document_filedetail_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_document_filedetail_get`(



	_OwnerId bigint,
    _UserTypeId bigint
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
                                            
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_document_filedetail_get', 1, 0, @Result);
			end;
            
			Begin
				Select 
					u.FileId,
                    u.FileOwnerId,
                    u.FilePath,
                    u.ParentFolder,
                    u.FileName,
                    u.FileExtension,
                    u.UserTypeId,
                    u.CreatedBy,
                    u.UpdatedOn
				from userfiledetail u
                Where u.FileOwnerId = _OwnerId And u.UserTypeId = _UserTypeId;
			End;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_document_filedetail_getById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_document_filedetail_getById`(
	_FileIds varchar(20)


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_document_filedetail_getById', 1, 0, @Result);
		End;

        Begin
			Set @SelectQuery = Concat('
				Select 
					f.FileId FileId,
					f.FileOwnerId FileOwnerId,
					f.FileName FileName,
					f.FilePath FilePath,
					f.FileExtension FileExtension,
					f.ItemStatusId StatusId,
					f.UserTypeId UserTypeId,
					f.CreatedBy AdminId  
				from userfiledetail f where f.FileId in (', _FileIds ,')
            ');
            
			
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_document_filedetail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_document_filedetail_insupd`(


    
    _InsertFileJsonData json
)
Begin
	DECLARE i      INT DEFAULT  0;
	DECLARE count INT DEFAULT -1;
    DECLARE _FileId bigint default -1;
	DECLARE _FileOwnerId bigint default -1;
	DECLARE _FileName varchar(100);
	DECLARE _FilePath varchar(500);
	DECLARE _ParentFolder varchar(500);
	DECLARE _FileExtension varchar(100);
	DECLARE _StatusId bigint default -1;
	DECLARE _UserTypeId int default -1;
	DECLARE _AdminId bigint default -1;
    Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_document_filedetail_insupd', 1, 0, @Result);
		end;

		if (_InsertFileJsonData is not null) then
        begin
			Set _FileId = -1;
			Set count = count + JSON_LENGTH(_InsertFileJsonData, '$');
            
            while(i <= count) do
            begin
				Set _FileId = JSON_EXTRACT(_InsertFileJsonData, CONCAT( '$[', i, '].FileId'));
				Set _FileOwnerId = JSON_EXTRACT(_InsertFileJsonData, CONCAT( '$[', i, '].FileOwnerId'));
				Set _FileName = JSON_UNQUOTE(JSON_EXTRACT(_InsertFileJsonData, CONCAT( '$[', i, '].FileName')));
				Set _FilePath = JSON_UNQUOTE(JSON_EXTRACT(_InsertFileJsonData, CONCAT( '$[', i, '].FilePath')));
				Set _ParentFolder = JSON_UNQUOTE(JSON_EXTRACT(_InsertFileJsonData, CONCAT( '$[', i, '].ParentFolder')));
				Set _FileExtension = JSON_UNQUOTE(JSON_EXTRACT(_InsertFileJsonData, CONCAT( '$[', i, '].FileExtension')));
				Set _StatusId = JSON_EXTRACT(_InsertFileJsonData, CONCAT( '$[', i, '].StatusId'));
				Set _UserTypeId = JSON_EXTRACT(_InsertFileJsonData, CONCAT( '$[', i, '].UserTypeId'));
				Set _AdminId = JSON_EXTRACT(_InsertFileJsonData, CONCAT( '$[', i, '].AdminId'));
                
				If not exists (Select 1 from userfiledetail where FileId = _FileId) then
                begin
					Insert into userfiledetail values(
						default, 
						_FileOwnerId,
						_FilePath,
                        _ParentFolder,
						_FileName,
						_FileExtension,
						_StatusId,
						_UserTypeId,
						_AdminId,
						null,
						utc_timestamp(),
						null
					);
                end;
                else 
                begin
					Update userfiledetail Set
						FilePath			=		_FilePath,
                        ParentFolder		=		_ParentFolder,
						FileName			=		_FileName,
						FileExtension		=		_FileExtension,
						ItemStatusId		=		_StatusId,
						UserTypeId			=		_UserTypeId,
						UpdatedBy			=		_AdminId,
						UpdatedOn			=		utc_timestamp()
					Where FileId = _FileId;
                end;
                end if;
				set i = i + 1;
            end;
            end while;
        end; 
        end if;
        
        Select * from userfiledetail where FileOwnerId = _FileOwnerId;
	End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_dynamic_query_ins_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_dynamic_query_ins_upd`(

	_TableName varchar(50),
    _PrimaryKey varchar(50),
    _Rows text,
    out _ProcessingResult varchar(100)
)
Begin
	Declare _id int;

	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_dynamic_query_ins_upd', 1, 0, @Result);
	end;
	
    set _ProcessingResult = 'updated';
	set @id = 0;
	set @lastPrimaryKey = concat(
		'select ', _PrimaryKey ,' into @id from ', 
        _TableName, 
        ' order by ', 
        _PrimaryKey, 
        ' desc limit 1;');
    
    
	prepare LastPrimaryKey from @lastPrimaryKey;
	execute LastPrimaryKey;
    
	set @nonQuery = concat(
        'insert into ', _TableName, ' values', 
		_rows);
    
    
	prepare NonQuery from @nonQuery;
	execute NonQuery;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_email_link_config_getBy_pagename` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_email_link_config_getBy_pagename`(
	_PageName varchar(50),
    _CompanyId int


	
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_email_link_config_getBy_pagename', 1, 0, @Result);
		end;  
		
		select e.*, c.*, concat(f.FilePath, '\\', f.FileName) FilePath from email_templates e
		left join company_files f on f.CompanyFileId = e.FileId
        right join email_link_config c on c.EmailTemplateId = e.EmailTemplateId
		where c.PageName = _PageName
        and c.CompanyId = _CompanyId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_email_link_config_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_email_link_config_insupd`(
	   
	_EmailTemplateId bigint,
    _CompanyId int,
	_TemplateName varchar(145),
	_SubjectLine varchar(100),
	_Salutation varchar(100),
	_EmailClosingStatement varchar(100),
	_BodyContent json,
	_EmailNote varchar(500),
	_SignatureDetail varchar(145),
	_ContactNo varchar(20),
    _EmailTitle varchar(100),
    _FileId int,
	_PageName varchar(50),
	_PageDescription varchar(150),
	_IsEmailGroupUsed bit,
	_EmailGroupId int,
	_IsTriggeredAutomatically bit,
	_EmailsJson json,
    _AdminId bigint,
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_email_link_config_insupd', 1, 0, @Result);
		end;
        Set @TempId = 0;
        set autocommit = 0;
        SET SQL_SAFE_UPDATES=0;
        if not exists (select 1 from email_templates where EmailTemplateId = _EmailTemplateId) then
        begin
			Set @TempId = 0;
			Select EmailTemplateId from email_templates order by EmailTemplateId desc limit 1 into @TempId ;
			Set @TempId = @TempId+1;
			
			Insert into email_templates values(
				 @TempId,
                 _CompanyId,
				_TemplateName,
				_SubjectLine,
                _EmailTitle,
				_Salutation,
				_EmailClosingStatement,
				_BodyContent,
				_EmailNote,
				_SignatureDetail,
				_ContactNo,
                null,
                _FileId,
                _PageDescription,
				_AdminId,
                utc_date()
			);
			
            Insert into email_link_config values(
				@TempId,
				_TemplateName,
				_PageName,
				_PageDescription,
				_IsEmailGroupUsed,
				_EmailGroupId,
				_IsTriggeredAutomatically,
				_EmailsJson,
				_CompanyId,
				_AdminId,
				_AdminId,
				utc_date(),
				utc_date()
			);
             Set _ProcessingResult = @TempId;
        end;
        else
        begin
			set @TempId = _EmailTemplateId;
			update email_templates set 
				TemplateName				=			_TemplateName,
				SubjectLine					=			_SubjectLine,
                EmailTitle						=		_EmailTitle,
				Salutation					=			_Salutation,
				EmailClosingStatement		=			_EmailClosingStatement,
				BodyContent					=			_BodyContent,
				EmailNote					=			_EmailNote,
				SignatureDetail				=			_SignatureDetail,
				ContactNo					=			_ContactNo,
                FileId						=			_FileId,
                Description					=			_PageDescription,
				UpdatedBy					=			_AdminId,
                UpdatedOn					=			utc_date()
			where EmailTemplateId 			= 			_EmailTemplateId;
            
            update email_link_config set 
				TemplateName				=			_TemplateName,
				PageName					=			_PageName,
				PageDescription				=			_PageDescription,
				IsEmailGroupUsed			=			_IsEmailGroupUsed,
				EmailGroupId				=			_EmailGroupId,
				IsTriggeredAutomatically	=			_IsTriggeredAutomatically,
				EmailsJson					=			_EmailsJson,
				CompanyId					=			_CompanyId,
				UpdatedBy					=			_AdminId,
                UpdatedOn					=			utc_date()
			where EmailTemplateId 			= 			_EmailTemplateId;
            Set _ProcessingResult = @TempId;
        end;
        end if;
        Set sql_safe_updates = 1;
		 Set autocommit = 1;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_email_mapped_template_by_comid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_email_mapped_template_by_comid`(
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int


)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_email_mapped_template_by_comid', 1, 0, @Result);
		end;  
		
        Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'UpdatedOn desc, CreatedOn desc';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					EmailTempMappingId, 
					CompanyId,
                    EmailTemplateName,
					TemplateId,
                    UpdatedOn,
                    CreatedOn,
					Count(1) Over() as Total from email_mapped_template
				Where ', _SearchString, '
			)T where RowIndex between ', ((_pageIndex - 1 ) * _pageSize + 1), ' and ', (_pageIndex * _pageSize));
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
		End;
        
        select * from email_templates;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_email_mapped_template_getById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_email_mapped_template_getById`(
	_EmailTempMappingId int


)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_email_mapped_template_getById', 1, 0, @Result);
		end;  
		
		select * from email_mapped_template
		where EmailTempMappingId = _EmailTempMappingId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_email_mapped_template_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_email_mapped_template_insupd`(
	   
	_EmailTempMappingId int,
    _CompanyId int,
    _EmailTemplateName varchar(145),
	_TemplateId int,
    _AdminId bigint,
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_email_mapped_template_insupd', 1, 0, @Result);
		end;
        Set @MappedId = 0;
        if not exists (select 1 from email_mapped_template where EmailTempMappingId = _EmailTempMappingId) then
        begin
			Set @MappedId = 0;
			Select EmailTempMappingId from email_mapped_template order by EmailTempMappingId desc limit 1 into @MappedId ;
			Set @MappedId = @MappedId+1;
	
			Insert into email_mapped_template values(
				@MappedId,
				_CompanyId,
				_EmailTemplateName,
				_TemplateId,
				_AdminId,
                _AdminId,
                utc_timestamp(),
                null
			);
         
             Set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update email_mapped_template set 
				CompanyId						=			_CompanyId,
				EmailTemplateName				=			_EmailTemplateName,
				TemplateId						=			_TemplateId,
				UpdatedBy						=			_AdminId,
                UpdatedOn						=		utc_timestamp()
			where EmailTempMappingId 		= 			_EmailTempMappingId;
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_EmployeeBillDetail_ById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_EmployeeBillDetail_ById`(
	_EmployeeId bigint,
    _ClientId bigint,
    _FileId bigint,
    _ForYear int,
    _FirstDate datetime,
    _LastDate datetime,
    _CompanyId  int

	# call sp_EmployeeBillDetail_ById(5,3, 6, 2023, '2023-01-', '', 1);

)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
            RollBack;
			Call sp_LogException(@Message, '', 'sp_EmployeeBillDetail_ById', 1, 0, @Result);
		End;

		select b.* from billdetail b
        Where b.EmployeeUid = _EmployeeId 
        And b.ClientId = _ClientId
        And b.FileDetailId = _FileId;
        
        Call SP_Employee_GetAll(concat(' 1=1 and emp.EmployeeUid = ', _EmployeeId), null, 1, 10);
        
		Select 
			a.*
		from employee_timesheet a   
		Where a.EmployeeId = _EmployeeId
		And a.ForYear = _ForYear
        And (TimesheetStartDate BETWEEN _firstDate AND _lastDate
           OR TimesheetEndDate BETWEEN _firstDate AND _lastDate
           OR (TimesheetStartDate <= _firstDate AND TimesheetEndDate >= _lastDate))
        And a.ClientId = _ClientId
        and TimesheetStatus != 5;
        
        select * from company
        where CompanyId = _CompanyId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Employeelogin_Auth` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Employeelogin_Auth`(
	_UserId bigint,
	_MobileNo varchar(20),
	_EmailId varchar(50),
    _UserTypeId int,
    _PageSize int
    
/*

	Call sp_Employeelogin_Auth(0, '', 'istiyak.mi@gmail.com', 1, 50)

*/    
    
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_Employeelogin_Auth', 1, 0, @Result);
	end;  

	Set @RoutePrefix = 'bot/ems';
	Set @AccessLevelId = 0;
	Set @CompanyId = 0;
    Set @EmployeeId = 0;
    
	Select EmployeeId, AccessLevelId, CompanyId from employeelogin
	Where (Email = _EmailId Or Mobile = _MobileNo)
	And UserTypeId = _UserTypeId
	into @EmployeeId, @AccessLevelId, @CompanyId;
	

	Select
		e.EmployeeUid UserId,
		e.FirstName,
		e.LastName,
		'NA' Address,
		e.Email as EmailId,
		e.Mobile,
		e.ReportingManagerId,
		(
			select concat(FirstName, ' ', LastName) from employees
			where 
			case
				when e.ReportingManagerId != 0 
				then EmployeeUid = e.ReportingManagerId
				else EmployeeUid = 1
			end
		) ManagerName,
        (
			select Email from employees
			where 
			case
				when e.ReportingManagerId != 0 
				then EmployeeUid = e.ReportingManagerId
				else EmployeeUid = 1
			end
		) ManagerEmailId,
		e.DesignationId,
		@AccessLevelId RoleId,
		_UserTypeId UserTypeId,
		l.OrganizationId,
		l.CompanyId,
		(select EmployeeCurrentRegime from employee_declaration where EmployeeId = e.EmployeeUid) as EmployeeCurrentRegime,
		(select DOB from employeepersonaldetail where EmployeeUid = e.EmployeeUid) as DOB,
		e.UpdatedOn,
		e.CreatedOn,
        e.WorkShiftId
	from employees e
	Inner join employeelogin l on l.EmployeeId = e.EmployeeUid
	Where e.Email = _EmailId Or e.Mobile = _MobileNo;        
   
	if(@AccessLevelId = 1) then
	begin
		Select RM.Catagory, RM.Childs, concat(@RoutePrefix, '/', RM.Link) Link, RM.Icon, RM.Badge,
		RM.BadgeType, RM.AccessCode,  1 as Permission from rolesandmenu RM
		where Catagory <> 'Home' or Childs <> 'Home';
	end;
	else
	begin
		Select RM.Catagory, RM.Childs, concat(@RoutePrefix, '/', RM.Link) Link, RM.Icon, RM.Badge,
		RM.BadgeType, RM.AccessCode,
		AccessibilityId Permission from rolesandmenu RM
		left Join role_accessibility_mapping r on r.AccessCode = RM.AccessCode
		where r.AccessLevelId = @AccessLevelId
		and r.AccessibilityId > 0;
	end;
	end if;

	Select 
		EmployeeUid as I, 
		Concat(FirstName, ' ', LastName) N,
		Email as E,
        DesignationId as D
	from employees
	where CompanyId = @CompanyId And IsActive = true
	Order by  UpdatedOn Desc, CreatedOn Desc
    limit _PageSize;
    
    select * from department;
    
    -- select * from employee_roles;
    select * from org_hierarchy 
    where IsDepartment = 0
    and IsActive = true
    and CompanyId = @CompanyId;
    
    select c.*, cs.FinancialYear from company c
    inner join company_setting cs on c.CompanyId = cs.CompanyId;
    
    select * from user_layout_configuration
    where EmployeeId = @EmployeeId;
    
    select * from company_files where FileRole = 'Company Primary Logo';
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employees_addupdate_remote_client` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employees_addupdate_remote_client`(
	_employeeMappedClientsUid bigint,
	_employeeUid bigint,
	_clientUid bigint,
    _finalPackage float(9, 2),
    _actualPackage float(9, 2),
    _takeHome float(9, 2),
    _isPermanent bit,
    _BillingHours int,
	_DaysPerWeek int,
    _DateOfLeaving datetime,
    _AssigneDate datetime


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;						
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employees_addupdate_remote_client', 1, 0, @Result);
	End;
	Set @ClientName = '';
	Select ClientName from clients where ClientId = _clientUid into @ClientName;
	Begin
		If exists(Select 1 from employeemappedclients  where EmployeeMappedClientsUid = _employeeMappedClientsUid) then 
		Begin
			if (_DateOfLeaving is null) then
			begin
				Update employeemappedclients Set 					
					ClientUid 				=		_clientUid, 
					ClientName				=		 @ClientName, 
					FinalPackage			=		_finalPackage, 
					ActualPackage			=		_actualPackage, 
					TakeHomeByCandidate		=		_takeHome, 
					IsPermanent				=		_isPermanent,
					BillingHours			=		_BillingHours,
					DaysPerWeek				=		_DaysPerWeek,
                    AssigneDate 			=		_AssigneDate
				Where EmployeeMappedClientsUid = _employeeMappedClientsUid;
			end;
			else
			begin
				Update employeemappedclients Set 					
					ClientUid 				=		_clientUid, 
					ClientName				=		 @ClientName, 
					FinalPackage			=		_finalPackage, 
					ActualPackage			=		_actualPackage, 
					TakeHomeByCandidate		=		_takeHome, 
					IsPermanent				=		_isPermanent,
					BillingHours			=		_BillingHours,
					DaysPerWeek				=		_DaysPerWeek,
					DateOfLeaving			=		_DateOfLeaving,
                    AssigneDate 			=		_AssigneDate
				Where EmployeeMappedClientsUid = _employeeMappedClientsUid;
			end;
			end if;
		end;
		else
		Begin
			Set @empMappedId = 0;
			Select EmployeeMappedClientsUid from employeemappedclients order by EmployeeMappedClientsUid desc limit 1 into @empMappedId ;
			Set @empMappedId = @empMappedId + 1;

			Insert into employeemappedclients values(
				@empMappedId, 
				_employeeUid, 
				_clientUid, 
				@ClientName, 
				_finalPackage, 
				_actualPackage, 
				_takeHome, 
				_isPermanent,
				1,
				_BillingHours,
				_DaysPerWeek,
				utc_timestamp(),
				null,
                _AssigneDate
			);
		end;
		end if;
	End;
	
	Select * from employeemappedclients 
	where EmployeeUid = _employeeUid and IsActive = 1;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_Employees_ById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Employees_ById`(
	_EmployeeId int,
    _IsActive int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_Employees_ById', 1, 0, @Result);
		End;

        Begin			
            if(_IsActive = 1) then
            begin				
                Select 
					e.EmployeeUid, 
                    l.OrganizationId,
					e.FirstName,
					e.LastName,
					e.Mobile,
					e.Email,
                    e.LeavePlanId,
                    e.PayrollGroupId,
                    e.SalaryGroupId,
					e.CompanyId,
					e.NoticePeriodId,
					ep.SecondaryMobile,
					ep.Gender,
                    ep.FatherName,
                    ep.DOB,
					ep.Address,
					ep.IsPermanent,
					ep.ActualPackage,
					ep.FinalPackage,
					ep.TakeHomeByCandidate,					
					epro.EmpProfDetailUid,
					epro.ExprienceInYear,
					epro.Specification,
					epro.PANNo,
					epro.AadharNo,
					epro.AccountNumber,
					epro.BankName,
					epro.BranchName,
					epro.Domain,
					epro.IFSCCode,
					epro.LastCompanyName,
                    l.AccessLevelId,
                    l.UserTypeId,
                    e.CreatedOn,
					epf.EmployeePfDetailId,
					epf.PFNumber,
					epf.UniversalAccountNumber,
					epf.PFJoinDate,
                    pfs.PFEnable as IsPFEnable,
					epro.ProfessionalDetail_Json
				from employees e
                inner join employeelogin l on l.EmployeeId = e.EmployeeUid
				Left Join employeepersonaldetail ep on e.EmployeeUid = ep.EmployeeUid
				left join employeeprofessiondetail epro on e.EmployeeUid = epro.EmployeeUid
                left Join employee_pf_detail epf on e.EmployeeUid = epf.EmployeeId
                left join pf_esi_setting pfs on pfs.CompanyId = e.CompanyId
				Where e.EmployeeUid = _EmployeeId;
			end;
            elseif(_IsActive = 0) then
            begin
                Select 
					e.EmployeeId, 
					e.FirstName,
					e.LastName,
					e.Mobile,
					e.Email,
					ep.SecondaryMobile,
					ep.Gender,
                    ep.FatherName,
                    ep.DOB,
					ep.Address,
					ep.IsPermanent,
					ep.ActualPackage,
					ep.FinalPackage,
					ep.TakeHomeByCandidate,					
					epro.ExprienceInYear,
					epro.Specification,
					epro.PANNo,
					epro.AadharNo,
					epro.AccountNumber,
					epro.BankName,
					epro.BranchName,
					epro.Domain,
					epro.IFSCCode,
					epro.LastCompanyName,
                    l.AccessLevelId,
                    l.UserTypeId,
                    e.CreatedOn,
					epf.EmployeePfDetailId,
					epf.PFNumber,
					epf.UniversalAccountNumber,
					epf.PFJoinDate,
                    pfs.PFEnable as IsPFEnable,
					epro.ProfessionalDetail_Json
				from employee_archive e
                inner join employeelogin l on l.EmployeeId = e.EmployeeUid
				Left Join employeepersonaldetail_archive ep on e.EmployeeUid = ep.EmployeeUid
				left join employeeprofessiondetail_archive epro on e.EmployeeUid = epro.EmployeeUid
                left Join employee_pf_detail epf on e.EmployeeUid = epf.EmployeeId
                left join pf_esi_setting pfs on pfs.CompanyId = e.CompanyId
				Where e.EmployeeUid = _EmployeeId;
            end;
            else
            begin
				Select 
					e.EmployeeUid, 
					e.FirstName,
					e.LastName,
					e.Mobile,
					e.Email,
					ep.SecondaryMobile,
					ep.Gender,
                    ep.FatherName,
                    ep.DOB,
					ep.Address,
					ep.IsPermanent,
					ep.ActualPackage,
					ep.FinalPackage,
					ep.TakeHomeByCandidate,
					epro.ExprienceInYear,
					epro.Specification,
					epro.PANNo,
					epro.AadharNo,
					epro.AccountNumber,
					epro.BankName,
					epro.BranchName,
					epro.Domain,
					epro.IFSCCode,
					epro.LastCompanyName,
                    l.AccessLevelId,
                    l.UserTypeId,
                    e.CreatedOn,
                    epf.EmployeePfDetailId,
					epf.PFNumber,
					epf.UniversalAccountNumber,
					epf.PFJoinDate,
                    pfs.PFEnable as IsPFEnable,
					epro.ProfessionalDetail_Json                  
				from (
						Select * from employees 
                        union distinct
                        Select * from employee_archive
				) e
                inner join employeelogin l on l.EmployeeId = e.EmployeeUid
				Left Join employeepersonaldetail_archive ep on e.EmployeeUid = ep.EmployeeUid
				left join employeeprofessiondetail_archive epro on e.EmployeeUid = epro.EmployeeUid
                left Join employee_pf_detail epf on e.EmployeeUid = epf.EmployeeId
                left join pf_esi_setting pfs on pfs.CompanyId = e.CompanyId
				Where e.EmployeeUid = _EmployeeId;
            end;
			end if;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employees_by_offset` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employees_by_offset`(
    _pageSize int,
    _offsetSize int


)
Begin
	set _offsetSize = _offsetSize - 1;
    select e.EmployeeUid, e.FirstName, e.LastName, e.Mobile, e.Email from employees e    
    where IsActive = 1
    order by EmployeeUid
    limit _pageSize offset _offsetSize;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employees_create` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employees_create`(
	_FirstName varchar(50),
	_LastName varchar(50),
	_Mobile varchar(20),
	_Email varchar(100),
    _LeavePlanId int,
    _PayrollGroupId int,
    _SalaryGroupId int,
	_ReportingManagerId bigint,
    _DesignationId int,
    _RegistrationDate datetime,    
    _CompanyId int,    
    _NoticePeriodId int,
    _WorkShiftId int,    
    _UserTypeId int,
    _AdminId bigint,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);  
		
		set _ProcessingResult = 0;
		Call sp_LogException (@Message, '', 'sp_employees_create_employee', 1, 0, @Result);
	end;
        
	Set @EmpId = 0;
	if(_UserTypeId = 0) then
		Set _UserTypeId = 2;
	end if;

	Set _ProcessingResult = 0;
	Select EmployeeUid from employees order by EmployeeUid desc limit 1 into @EmpId ;
	Set @EmpId = @EmpId + 1;
 
	Set _ProcessingResult = @EmpId; 
	Insert into employees (
		EmployeeUid, FirstName, LastName, Mobile, Email, IsActive, 
        CreatedBy, UpdatedBy, CreatedOn, UpdatedOn, ReportingManagerId, DesignationId, 
        UserTypeId, LeavePlanId, CompanyId, PayrollGroupId, SalaryGroupId, NoticePeriodId, 
        WorkShiftId, ProjectId
	) Values (
		@EmpId,
		_FirstName,
		_LastName,
		_Mobile,
		_Email,
        1,
        _AdminId,
        null, 
		_RegistrationDate,
		null,
		_ReportingManagerId,
		_DesignationId,
		_UserTypeId,
		_LeavePlanId,        
        _CompanyId,
		_PayrollGroupId,
		_SalaryGroupId,
		_NoticePeriodId,
		_WorkShiftId,
		0
	);
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employees_create_employee` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employees_create_employee`(
	_FirstName varchar(50),
	_LastName varchar(50),
	_Mobile varchar(20),
	_Email varchar(100),
    _LeavePlanId int,
    _PayrollGroupId int,
    _SalaryGroupId int,
	_ReportingManagerId bigint,
    _DesignationId int,
    _RegistrationDate datetime,    
    _CompanyId int,    
    _NoticePeriodId int,
    _WorkShiftId int,    
    _UserTypeId int,
    _AdminId bigint,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);  
		
		set _ProcessingResult = 0;
		Call sp_LogException (@Message, '', 'sp_employees_create_employee', 1, 0, @Result);
	end;
        
	Set @EmpId = 0;
	if(_UserTypeId = 0) then
		Set _UserTypeId = 2;
	end if;

	Set _ProcessingResult = 0;
	Select EmployeeUid from employees order by EmployeeUid desc limit 1 into @EmpId ;
	Set @EmpId = @EmpId+1;
 
	Set _ProcessingResult = @EmpId; 

	Insert into employees (EmployeeUid, FirstName, LastName, Mobile, 
		Email, LeavePlanId, PayrollGroupId, IsActive, CreatedBy, UpdatedBy,  CreatedOn, UpdatedOn, 
		ReportingManagerId, DesignationId, UserTypeId, SalaryGroupId, CompanyId, NoticePeriodId, WorkShiftId, ProjectId
	) Values (
		@EmpId,
		_FirstName,
		_LastName,
		_Mobile,
		_Email,
		_LeavePlanId,
		_PayrollGroupId,
		1,
		_AdminId,
		null, 
		_RegistrationDate,
		null,
		_ReportingManagerId,
		_DesignationId,
		_UserTypeId,
		_SalaryGroupId,
		_CompanyId,
		_NoticePeriodId,
		_WorkShiftId,
		0
	);
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_Employees_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Employees_Get`(
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_Employees_Get', 1, 0, @Result);
		End;

        Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'UpdatedOn, CreatedOn Desc';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					EmployeeUid, 
					FirstName,
                    0 ClientUid,
					LastName,
					Mobile,
					Email,
                    IsActive,
                    ReportingManagerId,
					Count(1) Over() as Total from employees
				Where ', _SearchString, '
			)T where RowIndex between ', ((_pageIndex - 1 ) * _pageSize + 1), ' and ', (_pageIndex * _pageSize));
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employees_ins_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employees_ins_upd`(
	_EmployeeUid bigint,
    _OrganizationId int,
	_FirstName varchar(50),
	_LastName varchar(50),
	_Mobile varchar(20),
	_Email varchar(100),
    _LeavePlanId int,
    _PayrollGroupId int,
    _SalaryGroupId int,
    _CompanyId int,
    _NoticePeriodId int,
    _SecondaryMobile varchar(20),
    _FatherName varchar(50),
    _MotherName varchar(50),
    _SpouseName varchar(50),
    _Gender bit(1),
    _State varchar(75),
    _City varchar(75),
    _Pincode int,
    _Address varchar(100),
    _PANNo varchar(20),
    _AadharNo varchar(20),
    _AccountNumber varchar(50),
    _BankName varchar(100),
    _BranchName varchar(100),
    _IFSCCode varchar(20),
    _Domain varchar(250),
    _Specification varchar(250),
    _ExprienceInYear float(5,2),
    _LastCompanyName varchar(100),
    _IsPermanent bit(1),
	_ActualPackage float(10,2),
    _FinalPackage float(10,2),
    _TakeHomeByCandidate float(10,2),
    _ReportingManagerId bigint,
    _DesignationId int,
    _ProfessionalDetail_Json json,
    _Password varchar(150),
    _AccessLevelId int,
    _UserTypeId int,
	_CTC decimal,
	_GrossIncome decimal,
	_NetSalary decimal,
	_CompleteSalaryDetail Json,
    _NewSalaryDetail json,
	_TaxDetail Json,
	_AdminId bigint,
    _DOB datetime,
    _RegistrationDate datetime,
    _EmployeeDeclarationId bigint,
    _DeclarationDetail json,
    _WorkShiftId int,
    _IsPending bit,
    _IsNewRegistration bit,
	_PFNumber varchar(30),
    _PFJoinDate datetime,
	_UniversalAccountNumber varchar(40),
    _SalaryDetailId int,
    out _ProcessingResult varchar(100)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);  
            
            RollBack;
            set _ProcessingResult = 0;
            Call sp_LogException (@Message, '', 'sp_employees_ins_upd', 1, 0, @Result);
		end;
        
		set @financialYear = 0;
		set @startMonth = 0;
		set @endMonth = 0;
		select 
			FinancialYear, 
			DeclarationStartMonth,
			DeclarationEndMonth into @financialYear, @startMonth, @endMonth
		from company_setting
		where 
			Case when _CompanyId > 0 Then  CompanyId = _CompanyId
			Else IsPrimary = 1
		End;
        
        Set @EmpId = _EmployeeUid;
        Start Transaction;
		Begin 
        
			if(_UserTypeId = 0) then
				Set _UserTypeId = 2;
			end if;
        
			If (_IsNewRegistration = true) then
			Begin
				Insert into employeepersonaldetail (
					EmployeePersonalDetailId, EmployeeUid, Mobile, SecondaryMobile, 
                    Email, Gender, FatherName, SpouseName, MotherName, Address,  State,  
                    City, Pincode, IsPermanent, ActualPackage, FinalPackage, 
                    TakeHomeByCandidate, CreatedBy, UpdatedBy, CreatedOn, UpdatedOn, DOB
				) Values (
					default,
					@EmpId,
					_Mobile,
					_SecondaryMobile,
					_Email,
					_Gender,
					_FatherName,
					_SpouseName,
					_MotherName,
					_Address,
					_State,
					_City,
					_Pincode,
					_IsPermanent,
					_ActualPackage,
					_FinalPackage,
					_TakeHomeByCandidate,
					_AdminId,
					null,
					_RegistrationDate,
					null,
                    _DOB
				);
				
				Insert into employeeprofessiondetail Values (
					default,
					@EmpId, 
					_FirstName,
					_LastName,
					_Mobile,
					_SecondaryMobile,
					_Email, 
					_PANNo,
					_AadharNo,
					_AccountNumber,
					_BankName,
					_BranchName,
					_IFSCCode,
					_Domain,
					_Specification,
					_ExprienceInYear,
					_LastCompanyName,
					_AdminId,
					null,
					_RegistrationDate,
					null,
					_ProfessionalDetail_Json
				);
			
                Insert into employeelogin
				Values(
					default, 
					@EmpId, 
					2, 
					_AccessLevelId, 
					_Password, 
					_Email, 
					_Mobile,
                    _OrganizationId,
					_CompanyId,
					_AdminId, 
					null, 
					_RegistrationDate, 
					null
				);
                set @taxRegime = 0;
                select TaxRegimeDescId from tax_regime_desc
				where IsDefaultRegime = 1 into @taxRegime;
                
                Set @decId = 0;
				Select EmployeeDeclarationId from employee_declaration order by EmployeeDeclarationId desc limit 1 into @decId ;
				Set @decId = @decId+1;

				Insert into employee_declaration values(
					@decId,
					@EmpId,
					'',
					_DeclarationDetail,
					'{}',
					0,
					0,
					0,
					@taxRegime,
					@startMonth,
					@endMonth,
					@financialYear,
					@financialYear + 1
				);
                
                set @leaveRequestId = 0;
                select LeaveRequestId into @leaveRequestId from employee_leave_request 
                order by LeaveRequestId desc limit 1;
                set @leaveRequestId = @leaveRequestId + 1;

                insert into employee_leave_request values(
					@leaveRequestId,
                    @EmpId,
                    '[]',
                    year(utc_timestamp()),
                    _IsPending,
                    0,
                    0,
                    0,
                    0,
                    '[]',
                    _RegistrationDate
                );
                
                
			End;
			Else
			Begin
				Set _ProcessingResult = '0';
				Set @EmpId = _EmployeeUid;
                set sql_safe_updates = 0;
                Update employees SET 
						FirstName				=		_FirstName,
						LastName				=		_LastName,
						Mobile					=		_Mobile,
						Email					=		_Email,
						UpdatedBy				=		_AdminId, 
						UpdatedOn				=		now(),
                        ReportingManagerId		=		_ReportingManagerId,
                        DesignationId			=		_DesignationId,
                        UserTypeId				=		_UserTypeId,
                        LeavePlanId				=		_LeavePlanId,
						PayrollGroupId			=		_PayrollGroupId,
                        SalaryGroupId			=		_SalaryGroupId,
						CompanyId				=		_CompanyId,
						NoticePeriodId			=		_NoticePeriodId,
                        WorkShiftId				=		_WorkShiftId
					Where 	EmployeeUid 	= _EmployeeUid;
                
				Update employeepersonaldetail Set
					Mobile						=	_Mobile,
					SecondaryMobile				=	_SecondaryMobile,
					Email						=	_Email,
					Gender						=	_Gender,
					FatherName					=	_FatherName,
					SpouseName					=	_SpouseName,
					MotherName					=	_MotherName,
					Address						=	_Address,
					DOB							=	_DOB,
					State						=	_State, 
					City						=	_City,
					Pincode						=	_Pincode,
					IsPermanent					=	_IsPermanent,
					ActualPackage				=	_ActualPackage,
					FinalPackage				=	_FinalPackage,
					TakeHomeByCandidate			=	_TakeHomeByCandidate,
					UpdatedBy					=	_AdminId,
					UpdatedOn					=	now()
				Where	EmployeeUid				=	_EmployeeUid;
                
				Update	employeeprofessiondetail Set
						FirstName		=	_FirstName,
						LastName		=	_LastName,
						Mobile			=	_Mobile,
						SecondaryMobile	=	_SecondaryMobile,
						Email			=	_Email, 
						PANNo			=	_PANNo,
						AadharNo		=	_AadharNo,
						AccountNumber	=	_AccountNumber,
						BankName		=	_BankName,
						BranchName		=	_BranchName, 
						IFSCCode		=	_IFSCCode,
						Domain			=	_Domain,
						Specification	=	_Specification,
						ExprienceInYear	=	_ExprienceInYear,
						LastCompanyName	=	_LastCompanyName,
						UpdatedBy		=	_AdminId,
						UpdatedOn		=	now(),
						ProfessionalDetail_Json = _ProfessionalDetail_Json
				 Where	EmployeeUid		=	_EmployeeUid;

				if(_UserTypeId = 1) then
					Set _AccessLevelId = 1;
				end if;
				
				Update employeelogin
					Set 
                    AccessLevelId 		= 			_AccessLevelId,
					Email 				= 			_Email,
					UserTypeId 			=			_UserTypeId,
					Mobile 				= 			_Mobile,
					OrganizationId		= 			_OrganizationId,
					CompanyId			= 			_CompanyId,
					UpdatedBy 			= 			_AdminId,
					UpdatedOn   		= 			now()
				Where EmployeeId 		= 			_EmployeeUid;
                
				Update employee_declaration Set
					DeclarationDetail			=			_DeclarationDetail
				where EmployeeDeclarationId  	= 			_EmployeeDeclarationId;
			End;
			End if;		
            
                
			if not exists (select 1 from employee_pf_detail Where EmployeeId = _EmployeeUid) then
            begin
				 set @employeePfDetailId = 0;
				select EmployeePfDetailId into @employeePfDetailId from employee_pf_detail 
				order by EmployeePfDetailId desc limit 1;
				set @employeePfDetailId = @employeePfDetailId + 1;
                
                insert into employee_pf_detail values(
					@employeePfDetailId,
                    @EmpId,
                    _PFNumber,
                    _UniversalAccountNumber,
                    _PFJoinDate
                );
			end;
            else
            begin
             Update employee_pf_detail Set
                    PFNumber						=			_PFNumber,
                    UniversalAccountNumber			=			_UniversalAccountNumber,
                    PFJoinDate						=			_PFJoinDate
                Where EmployeeId 					= 			_EmployeeUid;
			end;
            end if;
            
            Set @groupId = 1;
            -- Set @groupId = 0;
            set @salarydetailId = 0;
			select SalaryDetailId into @salarydetailId from employee_salary_detail 
            where EmployeeId = @EmpId order by SalaryDetailId desc limit 1;

			Call sp_employee_salary_detail_InsUpd(
				@salarydetailId,
				@EmpId, 
                _CTC, 
                _GrossIncome, 
                _NetSalary, 
                _CompleteSalaryDetail, 
                _NewSalaryDetail, 
                @groupId, 
                _TaxDetail, 
                @financialYear, 
                _ProcessingResult
			);
            
		Set _ProcessingResult =  @EmpId;
		COMMIT;
		End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employees_mappedClient_get_all_active` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employees_mappedClient_get_all_active`(
	


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employees_mappedClient_get_all_active', 1, 0, @Result);
	End;

	Select Row_Number() over(order by m.EmployeeMappedClientsUid) as RowIndex, 
    m.* from employeemappedclients m
	where IsActive = 1;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employees_mappedClient_get_by_employee_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employees_mappedClient_get_by_employee_id`(
		_EmployeeId bigint


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employees_mappedClient_get_by_employee_id', 1, 0, @Result);
	End;

	Select Row_Number() over(order by m.EmployeeMappedClientsUid) as RowIndex, 
    m.* from employeemappedclients m
	where IsActive = 1 and EmployeeUid = _EmployeeId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Employee_Activate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Employee_Activate`(


	_EmployeeId bigint,
	_FirstName varchar(50),
	_LastName varchar(50),
	_Mobile varchar(20),
	_Email varchar(100),
	_IsActive bit,
	_ReportingManagerId bigint,
	_DesignationId int,
	_UserTypeId int,
	_LeavePlanId int,
	_PayrollGroupId int,
	_SalaryGroupId int,
	_CompanyId int,
	_NoticePeriodId int,
	_SecondaryMobile varchar(20),
	_PANNo varchar(20),
	_AadharNo varchar(20),
	_AccountNumber varchar(50),
	_BankName varchar(100),
	_BranchName varchar(100),
	_IFSCCode varchar(20),
	_Domain varchar(250),
	_Specification varchar(250),
	_ExprienceInYear float,
	_LastCompanyName varchar(100),
	_ProfessionalDetail_Json json,
	_Gender bit,
	_FatherName varchar(50),
	_SpouseName varchar(50),
	_MotherName varchar(50),
	_Address varchar(100),
	_State varchar(75),
	_City varchar(75),
	_Pincode int,
	_IsPermanent bit,
	_ActualPackage float,
	_FinalPackage float,
	_TakeHomeByCandidate float,
	_AccessLevelId bigint,
	_Password varchar(150),
	_EmployeeDeclarationId bigint,
	_DocumentPath varchar(250),
	_DeclarationDetail json,
	_HouseRentDetail json,
	_TotalDeclaredAmount decimal,
	_TotalApprovedAmount decimal,
	_LeaveRequestId bigint,
	_LeaveDetail json,
	_Year int,
	_EmployeeNoticePeriodId bigint,
	_ApprovedOn datetime,
	_ApplicableFrom datetime,
	_ApproverManagerId int,
	_ManagerDescription varchar(500),
	_AttachmentPath varchar(200),
	_EmailTitle varchar(100),
	_OtherApproverManagerIds json,
	_ITClearanceStatus int,
	_ReportingManagerClearanceStatus int,
	_CanteenClearanceStatus int,
	_ClientClearanceStatus int,
	_HRClearanceStatus int,
	_OfficialLastWorkingDay datetime,
	_PeriodDuration int,
	_EarlyLeaveStatus int,
	_EmployeeComment varchar(500), 
	_CTC decimal,
	_GrossIncome decimal,
	_NetSalary decimal,
	_CompleteSalaryDetail json,
	_GroupId int,
	_TaxDetail json,
	_TimesheetId bigint,
	_ClientId bigint,
	_TimesheetWeeklyJson Json,
	_ExpectedBurnedMinutes int,
	_ActualBurnedMinutes int,
	_TotalWeekDays int,
	_TotalWorkingDays int,
	_TimesheetStatus int,
	_TimesheetStartDate datetime,
    _TimesheetEndDate datetime,
    _UserComments varchar(500),
	_ForYear int,
	_EmployeeMappedClientUid bigint,
	_ClientName varchar(250),
	_BillingHours int,
	_DaysPerWeek int,
	_DateOfJoining datetime,
	_DateOfLeaving datetime,
    _DOB datetime,
    _OrganizationId int,
    _AvailableLeaves decimal,
	_TotalLeaveApplied decimal,
	_TotalApprovedLeave decimal,
	_TotalLeaveQuota decimal,
	_LeaveQuotaDetail json,
    _TotalRejectedAmount decimal,
	_EmployeeCurrentRegime int,
	_DeclarationStartMonth int,
	_DeclarationEndMonth int,
	_DeclarationFromYear int,
	_DeclarationToYear int,
    _WorkShiftId int,
	_AdminId long,
    _IsSaved bit,
	_IsSubmitted bit,
    _IsPending bit,
    _NewSalaryDetail json,
    _AssigneDate datetime,
    _FinancialStartYear int,
	out _ProcessingResult varchar(50)
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            
            RollBack;
            Set autocommit = 1;
            Set sql_safe_updates = 1;
            
			Call sp_LogException (@Message, '', 'sp_Employee_Activate', 1, 0, @Result);
		end;  
		set autocommit = 0;
        Set @schemaName = 'bottomhalf';
        Set @employeeId = 0;
		start transaction;
        begin		
			Set @EmpId = 0;
			Select EmployeeUid from employees order by EmployeeUid desc limit 1 into @EmpId ;
			Set @EmpId = @EmpId+1;

			Insert into employees values (
				@EmpId,
				_FirstName,
				_LastName,
				_Mobile,
				_Email,
				_IsActive,
				_AdminId,
				_AdminId,
				utc_date(),
				utc_timestamp(),
				_ReportingManagerId,
				_DesignationId,
				_UserTypeId,
				_LeavePlanId,
				_PayrollGroupId,
				_SalaryGroupId,
				_CompanyId,
				_NoticePeriodId,
                _WorkShiftId,
                0
			);
			         
			Insert into employeeprofessiondetail values (
				default,
				@EmpId,
				_FirstName,
				_LastName,
				_Mobile,
				_SecondaryMobile,
				_Email,
				_PANNo,
				_AadharNo,
				_AccountNumber,
				_BankName,
				_BranchName,
				_IFSCCode,
				_Domain,
				_Specification,
				_ExprienceInYear,
				_LastCompanyName,
				_AdminId,
				_AdminId,
				utc_date(),
				utc_date(),
				_ProfessionalDetail_Json
			 );

			Insert into employeepersonaldetail values (
				default,
				@EmpId,
				_Mobile,
				_SecondaryMobile,
				_Email,
				_Gender,
				_FatherName,
				_SpouseName,
				_MotherName,
				_Address,
				_State,
				_City,
				_Pincode,
				_IsPermanent,
				_ActualPackage,
				_FinalPackage,
				_TakeHomeByCandidate,
				_AdminId,
				_AdminId,
				utc_date(),
				utc_date(),
                _DOB
			  );

				Insert into employeelogin values (
					default,
					@EmpId, 
					_UserTypeId, 
					_AccessLevelId, 
					_Password, 
					_Email, 
					_Mobile,
                    _OrganizationId,
					_CompanyId,
					_AdminId, 
					_AdminId, 
					utc_date(), 
					utc_date()
				);
			                                      
				Insert into employee_declaration values (
					default,
					@EmpId,
					_DocumentPath,
					_DeclarationDetail,
                    _HouseRentDetail,
                    _TotalDeclaredAmount,
					_TotalApprovedAmount,
                    _TotalRejectedAmount,
                    _EmployeeCurrentRegime,
                    _DeclarationStartMonth,
                    _DeclarationEndMonth,
                    _DeclarationFromYear,
                    _DeclarationToYear
				);

				Insert into employee_leave_request values (
					default,
					@EmpId,
					_LeaveDetail,
					_Year,
                    _IsPending,
                    _AvailableLeaves,
                    _TotalLeaveApplied,
                    _TotalApprovedLeave,
                    _TotalLeaveQuota,
                    _LeaveQuotaDetail,
                    utc_date()
                );
                       
				Insert into employee_notice_period values (
					default,
					@EmpId,
					_ApprovedOn,
					_ApplicableFrom,
					_ApproverManagerId,
					_ManagerDescription,
					_AttachmentPath,
					_EmailTitle,
					_OtherApproverManagerIds,
					_ITClearanceStatus,
					_ReportingManagerClearanceStatus,
					_CanteenClearanceStatus,
					_ClientClearanceStatus,
					_HRClearanceStatus,
					_OfficialLastWorkingDay,
					_PeriodDuration,
					_EarlyLeaveStatus,
					_EmployeeComment,
					_AdminId,
					_AdminId,
					utc_date(),
					utc_date()
                );
                        select * from employee_salary_detail;
				Insert into employee_salary_detail values (
					@EmpId,
					_CTC,
					_GrossIncome,
					_NetSalary,
					_CompleteSalaryDetail,
                    _NewSalaryDetail,
					_GroupId,
					_TaxDetail,
                    _FinancialStartYear,
                    null
                );

                set @timesheetId = 0;
				select TimesheetId into @timesheetId from employee_timesheet
				order by TimesheetId desc limit 1;
				set @timesheetId = @timesheetId + 1;
				Insert into employee_timesheet values (
					@timesheetId,
					_EmployeeId,
					_ClientId,
					_TimesheetWeeklyJson,
					_ExpectedBurnedMinutes,
					_ActualBurnedMinutes,
					_TotalWeekDays,
					_TotalWorkingDays,
					_TimesheetStatus,
					_TimesheetStartDate,
					_TimesheetEndDate,
					_UserComments,
					_ForYear,
					utc_date(),
					utc_date(),
					_AdminId,
					_AdminId,
                    _IsSaved,
					_IsSubmitted
                );

				Insert into employeemappedclients values (
					_EmployeeMappedClientUid,
					@EmpId,
					_ClientId,
					_ClientName,
					_FinalPackage,
					_ActualPackage,
					_TakeHomeByCandidate,
					_IsPermanent,
					_IsActive,
					_BillingHours,
					_DaysPerWeek,
					_DateOfJoining,
					_DateOfLeaving,
                    _AssigneDate
                );

			set sql_safe_updates = 0;
			delete from employee_archive where EmployeeId = _EmployeeId;
        end;        
        commit;
        set _ProcessingResult = 'updated';
        Set sql_safe_updates = 1;
		 Set autocommit = 1;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_and_all_clients_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_and_all_clients_get`(
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_Employees_Get', 1, 0, @Result);
		End;

        Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'UpdatedOn, CreatedOn Desc';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					EmployeeUid, 
					FirstName,
                    0 ClientUid,
					LastName,
					Mobile,
					Email,
                    IsActive,
                    CreatedOn,
                    ReportingManagerId,
                    (
						Select 
							JSON_ARRAYAGG(
								json_object(
									''CompanyId'', ClientUid,
									''CompanyName'', ClientName,
									''ActualPackage'', ActualPackage
								)
                            )
						from employeemappedclients 
						where EmployeeUid = emp.EmployeeUid and IsActive = true
					) as ClientJson,
                    (select EmployeeCurrentRegime from employee_declaration where EmployeeId = emp.EmployeeUid) as EmployeeCurrentRegime,
                    (select DOB from employeepersonaldetail where EmployeeUid = emp.EmployeeUid) as DOB,
                    UpdatedOn,
					Count(1) Over() as Total from employees emp
				Where ', _SearchString, '
			)T where RowIndex between ', ((_pageIndex - 1 ) * _pageSize + 1), ' and ', (_pageIndex * _pageSize));
            
			
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;	
            
            select * from clients;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_and_declaration_get_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_and_declaration_get_byid`(
	_EmployeeId bigint
    


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_and_declaration_get_byid', 1, 0, @Result);
	End;

	select e.*, ed.EmployeeDeclarationId from employees e
	inner join employee_declaration ed on e.EmployeeUid = ed.EmployeeId
    where e.EmployeeUid = _EmployeeId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_attendance_clean_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_attendance_clean_by_id`(


	_EmployeesId varchar(50),
    _Month int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		SET SQL_SAFE_UPDATES = 1;	
        drop table if exists emp_list;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_attendance_clean_by_id', 1, 0, @Result);
	end;
	
    SET SQL_SAFE_UPDATES = 0;

    drop table if exists emp_list;
	create temporary table emp_list as (
		SELECT 
			row_number() over(order by id) row_index,
			id
			FROM
			JSON_TABLE(
				_EmployeesId,
				'$[*]'
				COLUMNS (
					id int path '$'
				)
			) AS t
	);
    
    
    SET @counter = 1;
    
    
    SET @condition_count = (SELECT COUNT(*) FROM emp_list);
    SET @current_id = 0;
    
    
    WHILE @counter <= @condition_count DO
		
		SELECT id into @current_id FROM emp_list WHERE row_index = @counter;
		
		DELETE FROM attendance WHERE EmployeeId = @current_id
        and 
        Case 
			when _Month > 0 then ForMonth = _Month
            else 1
		end;

		
		SET @counter = @counter + 1;
	END WHILE;
    
    drop table if exists emp_list;    
	SET SQL_SAFE_UPDATES = 1;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_autocomplete_data` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_autocomplete_data`(


	_SearchString varchar(500),
    _PageIndex int,
    _PageSize int,
    _CompanyId int
    
/*

	call sp_employee_autocomplete_data('raj', 1, 5, 1)

*/    
    
)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_autocomplete_data', 1, 0, @Result);
	End;

	Set _PageIndex = (_PageIndex - 1) * _PageSize;

	Select * from (	
		Select 
			DesignationId designationId,
            false as selected,
			Email email,
			EmployeeUid value, 
			Concat(FirstName, ' ', LastName) text
		from employees
		where CompanyId = _CompanyId And IsActive = true And
		CASE 
			When _SearchString is null OR _SearchString = ''
			then 1=1
			Else (FirstName like concat(_SearchString, '%') OR LastName  like concat(_SearchString, '%'))
		END
		Order by FirstName
	)T limit _PageSize offset _PageIndex;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_brakup_detail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_brakup_detail_insupd`(


	_EmployeeId bigint,
    _BreakUpDetail Json,
    _BreakUpHeaderCount int,
    _DeductionDetail Json,
    _DeductionHeaderCount int,
    out _ProcessingResult varchar(100)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_employee_brakup_detail_insupd', 1, 0, @Result);
			end;  
		
		if not exists(select 1 from employee_brakup_detail where EmployeeId = _EmployeeId) then
        begin
			insert into employee_brakup_detail
            values(
				_EmployeeId,
				_BreakUpDetail,
                _BreakUpHeaderCount,
				_DeductionDetail,
				_DeductionHeaderCount,
				utc_date()
            );
            
            Set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update employee_brakup_detail set				
				BreakUpDetail					=			_BreakUpDetail,
				BreakUpHeaderCount				=			_BreakUpHeaderCount,
				DeductionDetail					=			_DeductionDetail,
				DeductionHeaderCount			=			_DeductionHeaderCount,
                UpdatedOn						=			utc_date()
            where EmployeeId = _EmployeeId;
            
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_by_role_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_by_role_id`(
	_RoleId int,
    _ProjectId int

	# call sp_employee_by_role_id(8)
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_employee_by_role_id', 1, 0, @Result);
		End;
		
        
        select p.FullName as Name, p.EmployeeId as EmployeeUid, p.Email, p.DesignationId from project_members_detail p where p.ProjectId = _ProjectId and p.MemberType = _RoleId;
        
        
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Employee_DeActivate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Employee_DeActivate`(


	_EmployeeId bigint,
	_FullName varchar(150),
	_Mobile varchar(20),
	_Email varchar(100),
	_Package decimal,
	_DateOfJoining datetime,
	_DateOfLeaving datetime,
	_EmployeeCompleteDetailModal Json,
    _AdminId long,
    out _ProcessingResult varchar(50)
)
Begin
    Set @OperationStatus = '';
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            
            RollBack;
            Set autocommit = 1;
            Set sql_safe_updates = 1;
            
			Call sp_LogException (@Message, @OperationStatus, 'sp_Employee_DeActivate', 1, 0, @Result);
		end;  
	
		set autocommit = 0;

		start transaction;
        begin
			Set @EmpId = 0;
			Select EmployeeId from employee_archive order by EmployeeId desc limit 1 into @EmpId ;
			Set @EmpId = @EmpId+1;
            
            insert into employee_archive values(
				@EmpId,
				_FullName,
				_Mobile,
				_Email,
				_Package,
				_DateOfJoining,
				_DateOfLeaving,
				_EmployeeCompleteDetailModal,
                _AdminId,
                utc_timestamp()
            );
            
            Set sql_safe_updates = 0;

			delete from employeepersonaldetail
			where EmployeeUid = _EmployeeId;

			delete from employeeprofessiondetail
			where EmployeeUid = _EmployeeId;

			delete from employeelogin
			where EmployeeId = _EmployeeId;
			
			delete from employee_declaration
			where EmployeeId = _EmployeeId;
			
			delete from employee_leave_request
			where EmployeeId = _EmployeeId;
			
			delete from employee_notice_period
			where EmployeeId = _EmployeeId;
            
			delete from employee_salary_detail
			where EmployeeId = _EmployeeId;
			
			delete from employee_timesheet
			where EmployeeId = _EmployeeId;
			
			delete from employeemappedclients
			where EmployeeUid = _EmployeeId;
            
			delete from employees e
			where e.EmployeeUid = _EmployeeId;
        end;        
        commit;
        
        set _ProcessingResult = 'updated';
        Set sql_safe_updates = 1;
        Set autocommit = 1;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_declaration_and_file_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_declaration_and_file_get`(


	 _DeclarationId bigint,
     _FileId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_declaration_and_file_get', 1, 0, @Result);
	end;  
	
	select 
		*
	from employee_declaration
	where EmployeeDeclarationId = _DeclarationId;
    
    select * from userfiledetail
    where FileId = _FileId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_declaration_components_get_byId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_declaration_components_get_byId`(


	 _EmployeeDeclarationId bigint
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_declaration_components_get_byId', 1, 0, @Result);
		end;  
		
		select 
			*
		from employee_declaration
		where EmployeeDeclarationId = _EmployeeDeclarationId;
        
        Select * from salary_components;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_declaration_detail_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_declaration_detail_get`(


	 _EmployeeId bigint
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_declaration_detail_get', 1, 0, @Result);
		end;  
		
		select 
			d.*, e.Email
		from employee_declaration d
        inner join employees e on e.EmployeeUid = d.EmployeeId
		where EmployeeId = _EmployeeId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_declaration_detail_get_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_declaration_detail_get_by_empid`(


	 _EmployeeId bigint
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_declaration_detail_get_by_empid', 1, 0, @Result);
		end;  
		
		select 
			d.*, e.Email
		from employee_declaration d
        inner join employees e on e.EmployeeUid = d.EmployeeId
		where EmployeeId = _EmployeeId;
        
        select * from employee_salary_detail
        where EmployeeId = _EmployeeId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_declaration_get_byEmployeeId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_declaration_get_byEmployeeId`(


	 _EmployeeId bigint,
     _UserTypeId int
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_declaration_get_byEmployeeId', 1, 0, @Result);
		end;  
		
		select 
			d.*, e.Email, e.DOB
		from employee_declaration d
        inner join employeepersonaldetail e on e.EmployeeUid = d.EmployeeId
		where EmployeeId = _EmployeeId;
        
        Select * from userfiledetail
        where FileOwnerId = _EmployeeId and 
        UserTypeId = _UserTypeId;
        
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_declaration_get_byId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_declaration_get_byId`(


	 _EmployeeDeclarationId bigint
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_declaration_get_byId', 1, 0, @Result);
		end;  
		
		select 
			*
		from employee_declaration
		where EmployeeDeclarationId = _EmployeeDeclarationId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_declaration_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_declaration_insupd`(
	_EmployeeDeclarationId bigint,
	_EmployeeId bigint,
    _DocumentPath varchar(250),
	_DeclarationDetail text,
    _HouseRentDetail Json,
    _TotalDeclaredAmount decimal,
    _TotalApprovedAmount decimal,
    _TotalRejectedAmount decimal,
    _EmployeeCurrentRegime int,
    out _ProcessingResult varchar(100)
    
/*

	set @result = null;
	call sp_employee_declaration_insupd(5, 6, '', '[{"Section": "", "MaxLimit": 0.0, "ComponentId": "BS", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "BASIC SALARY"}, {"Section": null, "MaxLimit": 0.0, "ComponentId": "BT", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "BONUS TETSTING"}, {"Section": "", "MaxLimit": 0.0, "ComponentId": "CA", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "CONVEYANCE ALLOWANCE"}, {"Section": "10(14)(I)", "MaxLimit": 21600.0, "ComponentId": "CRA", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "CAR RUNNING ALLOWANCE"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "DA", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "DEFERRED ANNURITY"}, {"Section": "80GGC", "MaxLimit": -1.0, "ComponentId": "DPP", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "DONATIONS TO POLITICAL PARTIES"}, {"Section": "80U", "MaxLimit": 125000.0, "ComponentId": "DPSPD", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "DEDUCTION WITH RESPECT TO PERSON SUFFERING FROM PHYSICAL DISABILITY"}, {"Section": "", "MaxLimit": 0.0, "ComponentId": "ECI", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "EMPLOYER CONTRIBUTION TOWARDS INSURANCE"}, {"Section": "", "MaxLimit": 0.0, "ComponentId": "EPER-PF", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "EMPLOYER CONTRIBUTION TOWARDS PF"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "EPF", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "EMPLOYEES PROVIDENT FUND"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "ETF", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "EDUCATION TUTION FEES"}, {"Section": "", "MaxLimit": 0.0, "ComponentId": "GRA", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "EMPLOYER CONTRIBUTION TOWARDS GRATUITY"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "HL", "DeclaredValue": 51745.8, "UploadedFileIds": "[]", "ComponentFullName": "HOUSING LOAN (PRINCIPLE)"}, {"Section": "80EE", "MaxLimit": 50000.0, "ComponentId": "HLIFTHO", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "HOME LOAN INTEREST FOR FIRST TIME HOME OWNERS"}, {"Section": "", "MaxLimit": 0.0, "ComponentId": "HP", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "HOUSING PROPERTY"}, {"Section": "", "MaxLimit": 0.0, "ComponentId": "HRA", "DeclaredValue": 300000.0, "UploadedFileIds": "[]", "ComponentFullName": "HOUSE RENT ALLOWANCE"}, {"Section": "80EEB", "MaxLimit": 150000.0, "ComponentId": "ILAEV", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "INTEREST ON LOAN FOR ACQUIRING ELECTRIC VEHICLE"}, {"Section": "80EEA", "MaxLimit": 150000.0, "ComponentId": "ILARHP", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "INTEREST ON LOAN FOR ACQUIRING RESIDENTIAL HOUSE PROPERTY"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "LIP", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "LIFE INSURANCE POLICY"}, {"Section": "10(5)", "MaxLimit": 30000.0, "ComponentId": "LTA", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "TRAVEL REIMBURSSEMENT"}, {"Section": "", "MaxLimit": 0.0, "ComponentId": "MA", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "MEDICAL ALLOWANCE"}, {"Section": "80DD", "MaxLimit": 125000.0, "ComponentId": "MEHR", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "MEDICAL EXPENDITURE FOR A HANDICAPPED RELATIVE"}, {"Section": "80DDB", "MaxLimit": 100000.0, "ComponentId": "MES", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "MEDICAL EXPENDITURE ON SELF OR DEPENDENT"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "MF", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "MUTUAL FUND"}, {"Section": "80CCC", "MaxLimit": 0.0, "ComponentId": "MFP", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "MUTUAL FUND PENSION"}, {"Section": "80D", "MaxLimit": 50000.0, "ComponentId": "MIP", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "MEDICAL INSURANCE PREMIUM"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "NNB", "DeclaredValue": 48500.0, "UploadedFileIds": "[]", "ComponentFullName": "NABARD NOTIFIED BONDS"}, {"Section": "80CCD(1)", "MaxLimit": 0.0, "ComponentId": "NPSEC", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "NPS EMPLOYEE CONTRIBUTION"}, {"Section": "80CCD(1B)", "MaxLimit": 50000.0, "ComponentId": "NPSEMP", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "NPS EMPLOYEE CONTRIBUTION"}, {"Section": "80CCD(2)", "MaxLimit": -1.0, "ComponentId": "NPSEMPR", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "NPS EMPLOYER CONTRIBUTION"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "NSC", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "NATIONAL SAVING CERTIFICATE"}, {"Section": "18C", "MaxLimit": 50000.0, "ComponentId": "NT", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "NEW TEST COMPONENT"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "OTHER", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "OTHER"}, {"Section": "80D", "MaxLimit": 5000.0, "ComponentId": "PHC", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "PREVENTIVE HEALTH CHECK-UP"}, {"Section": "80D", "MaxLimit": 50000.0, "ComponentId": "PMIP", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "PARENTS MEDICAL INSURANCE PREMIUM"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "POTD", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "POST OFFICE TIME DEPOSITE"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "PPF", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "PUBLIC PROVIDENT FUND"}, {"Section": "80D", "MaxLimit": 5000.0, "ComponentId": "PPHC", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "PARENTS PREVENTIVE HEALTH CHECK-UP"}, {"Section": "16(III)", "MaxLimit": 0.0, "ComponentId": "PTAX", "DeclaredValue": 2400.0, "UploadedFileIds": "[]", "ComponentFullName": "PROFESSIONAL TAX"}, {"Section": "80QQB", "MaxLimit": 300000.0, "ComponentId": "RB", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "ROYALTY PN BOOK"}, {"Section": "80E", "MaxLimit": -1.0, "ComponentId": "RIHEL", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "REPAYMENT OF INTEREST ON HIGHER EDUCATION LOAN"}, {"Section": "80RRB", "MaxLimit": 300000.0, "ComponentId": "RP", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "ROYALTY ON PATENT"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "SA", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "SUPER ANNUATION"}, {"Section": "80TTA", "MaxLimit": 10000.0, "ComponentId": "SAIT", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "SAVINGS ACCOUNT INTEREST TAX"}, {"Section": "80TTB", "MaxLimit": 50000.0, "ComponentId": "SAIT(SC)", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "SAVINGS ACCOUNT INTEREST TAX (SENIOR CITIZENS)"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "SBFD", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "SCHEDULE BANK FD"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "SCSS", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "SENIOR CITIZEN SAVING SCHEME"}, {"Section": "", "MaxLimit": 0.0, "ComponentId": "SHA", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "SHIFT ALLOWANCE"}, {"Section": "", "MaxLimit": 0.0, "ComponentId": "SPA", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "SPECIAL ALLOWANCE"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "SSY", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "SUKANYA SAMRIDDHI YOJNA"}, {"Section": "16(IA)", "MaxLimit": 50000.0, "ComponentId": "STD", "DeclaredValue": 50000.0, "UploadedFileIds": "[]", "ComponentFullName": "STANDARD DEDUCTION"}, {"Section": "10(14)(I)", "MaxLimit": 18000.0, "ComponentId": "TIA", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "TELEPHONE AND INTERNET ALLOWANCE"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "ULIP", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "UNITED LINKED INSURANCE PLAN"}, {"Section": "80C", "MaxLimit": 0.0, "ComponentId": "VPF", "DeclaredValue": 0.0, "UploadedFileIds": "[]", "ComponentFullName": "VOLUNTARY PROVIDENT FUND"}]', 
    '{}', 1, 1, 0, 1, @result)
    select @result;
    

*/    
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_declaration_insupd', 1, 0, @Result);
	end;  
    
	if (_EmployeeCurrentRegime = 0) then
    begin
		select TaxRegimeDescId into _EmployeeCurrentRegime 
        from tax_regime_desc
        where IsDefaultRegime = 1;
    end;
    end if;
        
	if not exists(Select 1 from employee_declaration where EmployeeDeclarationId = _EmployeeDeclarationId) then
	begin
		set @startmonth = 0;
		set @endmonth = 0;
		set @financialStartYear = 0;
		
		select 
			DeclarationStartMonth,
			DeclarationEndMonth,
			FinancialYear into @startmonth, @endmonth, @financialStartYear
		from company_setting
		where IsPrimary = 1;
		
		if not exists(select 1 from employee_declaration where EmployeeId = _EmployeeId) then
		begin
			Insert into employee_declaration values(
				default,
				_EmployeeId,
				_DocumentPath,
				_DeclarationDetail,
				_HouseRentDetail,
				_TotalDeclaredAmount,
				_TotalApprovedAmount,
				_TotalRejectedAmount,
				_EmployeeCurrentRegime,
				@startmonth,
				@endmonth,
				@financialStartYear,
				@financialStartYear + 1
			);            
		end;
		end if;
		
		Set _ProcessingResult = 'inserted';
	end;
	else
	begin
		if (_HouseRentDetail is not null and _TotalDeclaredAmount > 0 and _TotalApprovedAmount > 0) then
		begin
			Update employee_declaration Set
				DeclarationDetail			=			_DeclarationDetail,
				DocumentPath				=			_DocumentPath,
				HouseRentDetail				=			_HouseRentDetail,
				TotalDeclaredAmount			=			_TotalDeclaredAmount,
				TotalApprovedAmount			=			_TotalApprovedAmount,
				EmployeeCurrentRegime		= 			_EmployeeCurrentRegime
			where EmployeeDeclarationId 	= 			_EmployeeDeclarationId;
		end;
		elseif (_HouseRentDetail is not null) then
		begin
			Update employee_declaration Set
				DeclarationDetail			=			_DeclarationDetail,
				DocumentPath				=			_DocumentPath,
				HouseRentDetail				=			_HouseRentDetail,
				EmployeeCurrentRegime		= 			_EmployeeCurrentRegime
			where EmployeeDeclarationId 	= 			_EmployeeDeclarationId;
		end;
		elseif (_TotalDeclaredAmount > 0 and _TotalApprovedAmount > 0) then
		begin
			Update employee_declaration Set
				DeclarationDetail			=			_DeclarationDetail,
				DocumentPath				=			_DocumentPath,
				TotalDeclaredAmount			=			_TotalDeclaredAmount,
				TotalApprovedAmount			=			_TotalApprovedAmount,
				TotalRejectedAmount			= 			(_TotalDeclaredAmount - _TotalApprovedAmount),
				EmployeeCurrentRegime		= 			_EmployeeCurrentRegime
			where EmployeeDeclarationId 	= 			_EmployeeDeclarationId;
		end;
		else
		begin
			Update employee_declaration Set
				DeclarationDetail			=			_DeclarationDetail,
				EmployeeCurrentRegime		= 			_EmployeeCurrentRegime
			where EmployeeDeclarationId 	= 			_EmployeeDeclarationId;
		end;
		end if;
		
		Set _ProcessingResult = 'updated';
	end;
	end if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_declaration_ins_new` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_declaration_ins_new`(


     _EmployeeId bigint,
     _FinancialYear int,
	 _StartMonth int,
	 _EndMonth int
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_declaration_ins_new', 1, 0, @Result);
		end;  
        
		set @EmpDecId = 0;
		select 
			EmployeeDeclarationId into @EmpDecId 
        from employee_declaration  
        where EmployeeId = _EmployeeId 
        and DeclarationFromYear = _FinancialYear;
		        
		if exists (select 1 from employee_declaration where EmployeeDeclarationId = @EmpDecId) then
        begin
			Set @i = 0;
			Set @total = 0;
			Set @jsonArray = '';
			Set @seperater = '';
			
			Select Count(1) from salary_components into @total;
			
			while @i < @total do
			begin
				Set @jsonArray = Concat(@jsonArray, @seperater,
					(Select jsonData from(
						Select Row_number() over(order by ComponentId) as rowIndex, JSON_OBJECT(
							'ComponentId', ComponentId,
							'ComponentFullName', ComponentFullName,
							'ComponentDescription', ComponentDescription,
							'CalculateInPercentage', if(CalculateInPercentage = 1, cast(TRUE as json), cast(FALSE as json)),
							'TaxExempt', if(TaxExempt = 1, cast(TRUE as json), cast(FALSE as json)),
							'ComponentTypeId', ComponentTypeId,
							'PercentageValue', PercentageValue,
							'MaxLimit', MaxLimit,
							'DeclaredValue', DeclaredValue,
							'Formula', Formula,
							'EmployeeContribution', EmployeeContribution,
							'EmployerContribution', EmployerContribution,
							'IncludeInPayslip', if(IncludeInPayslip = 1, cast(TRUE as json), cast(FALSE as json)),
							'Section', Section,
							'SectionMaxLimit', SectionMaxLimit,
							'IsAdHoc', if(IsAdHoc = 1, cast(TRUE as json), cast(FALSE as json)),
							'AdHocId', AdHocId,
							'IsOpted', if(IsOpted = 1, cast(TRUE as json), cast(FALSE as json)),
							'IsActive', if(IsActive = 1, cast(TRUE as json), cast(FALSE as json))
						) as jsonData from salary_components
					)T where rowIndex = @i + 1)
				);
				
				Set @seperater = ','; 
				Set @i = @i + 1;
			end;
			end while;
			
            Insert into employee_declaration values(
				default,
				_EmployeeId,
				'',
				_DeclarationDetail,
				'{}',
				0,
				0,
				0,
				0,
				_StartMonth,
				_EndMonth,
				_FinancialYear,
				_FinancialYear + 1
			); 
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_declaration_upd_declarationdetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_declaration_upd_declarationdetail`(


     _EmployeeDeclarationId bigint,
     _EmployeeId bigint,
     _FinancialYear int
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_declaration_upd_declarationdetail', 1, 0, @Result);
		end;  
        
		set @EmpDecId = 0;
		select 
			EmployeeDeclarationId into @EmpDecId 
        from employee_declaration  
        where EmployeeId = _EmployeeId 
        and DeclarationFromYear = _FinancialYear;
		        
		if exists (select 1 from employee_declaration where EmployeeDeclarationId = @EmpDecId) then
        begin
			Set @i = 0;
			Set @total = 0;
			Set @jsonArray = '';
			Set @seperater = '';
			
			Select Count(1) from salary_components into @total;
			
			while @i < @total do
			begin
				Set @jsonArray = Concat(@jsonArray, @seperater,
					(Select jsonData from(
						Select Row_number() over(order by ComponentId) as rowIndex, JSON_OBJECT(
							'ComponentId', ComponentId,
							'ComponentFullName', ComponentFullName,
							'ComponentDescription', ComponentDescription,
							'CalculateInPercentage', if(CalculateInPercentage = 1, cast(TRUE as json), cast(FALSE as json)),
							'TaxExempt', if(TaxExempt = 1, cast(TRUE as json), cast(FALSE as json)),
							'ComponentTypeId', ComponentTypeId,
							'PercentageValue', PercentageValue,
							'MaxLimit', MaxLimit,
							'DeclaredValue', DeclaredValue,
							'Formula', Formula,
							'EmployeeContribution', EmployeeContribution,
							'EmployerContribution', EmployerContribution,
							'IncludeInPayslip', if(IncludeInPayslip = 1, cast(TRUE as json), cast(FALSE as json)),
							'Section', Section,
							'SectionMaxLimit', SectionMaxLimit,
							'IsAdHoc', if(IsAdHoc = 1, cast(TRUE as json), cast(FALSE as json)),
							'AdHocId', AdHocId,
							'IsOpted', if(IsOpted = 1, cast(TRUE as json), cast(FALSE as json)),
							'IsActive', if(IsActive = 1, cast(TRUE as json), cast(FALSE as json))
						) as jsonData from salary_components
					)T where rowIndex = @i + 1)
				);
				
				Set @seperater = ','; 
				Set @i = @i + 1;
			end;
			end while;
			select @jsonArray;
			
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_delete_by_EmpId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_delete_by_EmpId`(
	_EmployeeId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);  
		
		Call sp_LogException (@Message, '', 'sp_employee_delete_by_EmpId ', 1, 0, @Result);
	end;
        
	delete from employees where EmployeeUid = _EmployeeId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_email_mobile_duplicate_checked` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_email_mobile_duplicate_checked`(
	_Mobile varchar(20),
    _Email varchar(100)


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_email_mobile_duplicate_checked', 1, 0, @Result);
	End;

	Set @EmailCount = 0;
    Set @MobileCount = 0;
    
	select count(e.EmployeeUid) into @EmailCount from employees e
	where e.Email = _Email;
	
	select count(e.EmployeeUid) into @MobileCount from employees e
	where e.Mobile = _Mobile;
    
    select @MobileCount MobileCount, @EmailCount EmailCount;
    
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_Employee_GetAll` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Employee_GetAll`(


	_SearchString varchar(500),
    _SortBy varchar(100),
    _PageIndex int,
    _PageSize int
    
    # call SP_Employee_GetAll('1=1', null, 1, 10)
    
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_Employee_GetAll', 1, 0, @Result);
		End;

        Begin
        
			if(_SortBy is null Or _SortBy = '') then
				Set _SortBy = ' UpdatedOn Desc, CreatedOn Desc ';
			end if;
            
            Set @activeQuery = Concat('
				Select emp.EmployeeUid, 
					emp.FirstName,
					emp.LastName,
					emp.Mobile,
					emp.Email,
                    emp.CompanyId,
                    emp.DesignationId,
                    emp.LeavePlanId,
                    emp.IsActive,
					eprof.AadharNo,
					eprof.PANNo,
					eprof.AccountNumber,
					eprof.BankName,
					eprof.IFSCCode,
					eprof.Domain,
					eprof.Specification,
					eprof.ExprienceInYear,
					eper.ActualPackage,
					eper.FinalPackage,
					eper.TakeHomeByCandidate,
					(
						Select 
							JSON_ARRAYAGG(
								json_object(
									''CompanyId'', ClientUid,
									''CompanyName'', ClientName,
									''ActualPackage'', ActualPackage
								)
                            )
						from employeemappedclients 
						where EmployeeUid = emp.EmployeeUid and IsActive = 1
					) as ClientJson,
                    emp.WorkShiftId,
                    emp.ProjectId,
                    emp.UpdatedOn, 
                    emp.CreatedOn,
                    u.FilePath,
                    u.FileName,
                    u.FileExtension
				from employees emp
                inner join employeelogin l on emp.EmployeeUid = l.EmployeeId
				Left Join employeepersonaldetail eper on emp.EmployeeUid = eper.EmployeeUid
				left join employeeprofessiondetail eprof on emp.EmployeeUid = eprof.EmployeeUid
                left join userfiledetail u on u.FileOwnerId = l.EmployeeId and u.UserTypeId = 2 and FileName like ''%profile%''
				where ', _SearchString, '
			');	
            
            Set @SelectQuery = '';
			Set @SelectQuery = Concat('
				select *, Row_Number() over() as RowIndex, Count(1) Over() as Total from (
					', @activeQuery ,'
				)T Order by ', _SortBy ,' limit ', _PageSize ,' offset ', (_PageIndex - 1) * 10
			);
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_Employee_GetAllInActive` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Employee_GetAllInActive`(


	_SearchString varchar(500),
    _SortBy varchar(100),
    _PageIndex int,
    _PageSize int
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_Employee_GetAllInActive', 1, 0, @Result);
		End;

        Begin
        
			if(_SortBy is null Or _SortBy = '') then
				Set _SortBy = ' CreatedOn Desc ';
			end if;
            
            Set @activeQuery = Concat('
				Select 
					emp.EmployeeId,
					emp.EmployeeCompleteJsonData,
                    emp.CreatedBy,
                    emp.CreatedOn,
                    (
						Select 
							JSON_ARRAYAGG(
								json_object(
									''CompanyId'', ClientUid,
									''CompanyName'', ClientName,
									''ActualPackage'', ActualPackage
								)
                            )
						from employeemappedclients 
						where EmployeeUid = emp.EmployeeId
					) as ClientJson,
                    u.FilePath,
                    u.FileName,
                    u.FileExtension
				from employee_archive emp
                left join userfiledetail u on u.FileOwnerId = emp.EmployeeId
				where ', _SearchString, '
			');	
            
            Set @SelectQuery = '';
			Set @SelectQuery = Concat('
				select *, Count(1) Over() as Total from (
					', @activeQuery ,'
				)T Order by ', _SortBy ,' limit ', _PageSize ,' offset ', (_PageIndex - 1) * 10
			);
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Employee_GetArcheiveCompleteDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Employee_GetArcheiveCompleteDetail`(
	_EmployeeId bigint


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
            RollBack;
			Call sp_LogException(@Message, '', 'sp_Employee_GetArcheiveCompleteDetail', 1, 0, @Result);
		End;
        
        select * from employee_archive
        where EmployeeId = _EmployeeId;
        
        
        
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_getbyid_to_reg_or_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_getbyid_to_reg_or_upd`(
	_EmployeeId bigint,	
	_Mobile varchar(20),
    _Email varchar(100),
    _CompanyId int

/*

	call sp_employee_getbyid_to_reg_or_upd(1, '', 'rohit@mail.com', 1)

*/

)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_getbyid_to_reg_or_upd', 1, 0, @Result);
	End;

	Set @EmailCount = 0;
    Set @MobileCount = 0;
    Set @EmployeeCount = 0;
    
    if exists (select 1 from employees e where e.EmployeeUid = _EmployeeId And e.IsActive = true) then  
    begin
		Set @EmployeeCount = 1;
        
		select count(e.EmployeeUid) into @EmailCount from employees e
		where e.Email = _Email And e.EmployeeUid <> _EmployeeId;
		
		select count(e.EmployeeUid) into @MobileCount from employees e
		where e.Mobile = _Mobile And e.EmployeeUid <> _EmployeeId;
    
		select e.*
		from employees e
		where e.EmployeeUid = _EmployeeId
		And e.IsActive = true;
    end;
    else
    begin
		select count(e.EmployeeUid) into @EmployeeCount from employees e
		where e.EmployeeUid = _EmployeeId;
    
		select count(e.EmployeeUid) into @EmailCount from employees e
		where e.Email = _Email;
    
		select count(e.EmployeeUid) into @MobileCount from employees e
		where e.Mobile = _Mobile;    
        
		select e.*
		from employees e
		where e.EmployeeUid = _EmployeeId
		And e.IsActive = true;
    end;    
    end if;

	set @financialYear = 0;
	set @startMonth = 0;
	set @endMonth = 0;
	select 
		FinancialYear, 
		DeclarationStartMonth,
		DeclarationEndMonth into @financialYear, @startMonth, @endMonth
	from company_setting
	where 
		Case when _CompanyId > 0 Then  CompanyId = _CompanyId
		Else IsPrimary = 1
	End;
    
    select * from employee_declaration
    where EmployeeId = _EmployeeId
    and DeclarationFromYear = @financialYear;
    
    select * from employee_salary_detail
    where EmployeeId = _EmployeeId
    and FinancialStartYear = @financialYear;
    
    select * from salary_components;
    
	set @stateName = '';
    select State into @stateName from company where CompanyId = _CompanyId limit 1;
    
	select s.*, @stateName as StateName from company_setting s
	where 
		Case when _CompanyId > 0 Then s.CompanyId = _CompanyId
		Else s.IsPrimary = true
	End;
    
    select @EmployeeCount EmployeeCount, @MobileCount MobileCount, @EmailCount EmailCount;

	select * from ptax_slab where LOWER(StateName) = LOWER(@stateName);
    
    select * from surcharge_slab;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_getbyid_to_reg_or_upd_by_excel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_getbyid_to_reg_or_upd_by_excel`(
	_EmployeeId bigint,	
	_Mobile varchar(20),
    _Email varchar(100),
    _CompanyId int

/*

	call sp_employee_getbyid_to_reg_or_upd_by_excel(1, '', 'rohit@mail.com', 1)

*/

)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_getbyid_to_reg_or_upd_by_excel', 1, 0, @Result);
	End;

	Set @EmailCount = 0;
    Set @MobileCount = 0;
    Set @EmployeeCount = 0;
    
    if exists (select 1 from employees e where e.EmployeeUid = _EmployeeId And e.IsActive = true) then  
    begin
		Set @EmployeeCount = 1;
        
		select count(e.EmployeeUid) into @EmailCount from employees e
		where e.Email = _Email And e.EmployeeUid <> _EmployeeId;
		
		select count(e.EmployeeUid) into @MobileCount from employees e
		where e.Mobile = _Mobile And e.EmployeeUid <> _EmployeeId;
    
		select e.*
		from employees e
		where e.EmployeeUid = _EmployeeId
		And e.IsActive = true;
    end;
    else
    begin
		select count(e.EmployeeUid) into @EmployeeCount from employees e
		where e.EmployeeUid = _EmployeeId;
    
		select count(e.EmployeeUid) into @EmailCount from employees e
		where e.Email = _Email;
    
		select count(e.EmployeeUid) into @MobileCount from employees e
		where e.Mobile = _Mobile;    
        
		select e.*
		from employees e
		where e.EmployeeUid = _EmployeeId
		And e.IsActive = true;
    end;    
    end if;

	set @financialYear = 0;
	select 
		FinancialYear into @financialYear
	from company_setting
	where 
		Case when _CompanyId > 0 Then  CompanyId = _CompanyId
		Else IsPrimary = 1
	End;
    
    select * from employee_declaration
    where EmployeeId = _EmployeeId
    and DeclarationFromYear = @financialYear;
    
    select * from employee_salary_detail
    where EmployeeId = _EmployeeId
    and FinancialStartYear = @financialYear;
    
    select @EmployeeCount EmployeeCount, @MobileCount MobileCount, @EmailCount EmailCount;

end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Employee_GetCompleteDetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Employee_GetCompleteDetail`(
	_EmployeeId bigint


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
            RollBack;
			Call sp_LogException(@Message, '', 'sp_Employee_GetCompleteDetail', 1, 0, @Result);
		End;
        
		select e.* from employees e
		where e.EmployeeUid = _EmployeeId;

		select * from employeepersonaldetail
        where EmployeeUid = _EmployeeId;

		select * from employeeprofessiondetail
		where EmployeeUid = _EmployeeId;

		select * from employeelogin
		where EmployeeId = _EmployeeId;
        
        select * from employee_declaration
        where EmployeeId = _EmployeeId;
        
        select * from employee_leave_request
        where EmployeeId = _EmployeeId;
        
        select * from employee_notice_period
        where EmployeeId = _EmployeeId;
        
        
        
        select * from employee_salary_detail
        where EmployeeId = _EmployeeId;
        
        select * from employee_timesheet
        where EmployeeId = _EmployeeId;
        
        select * from employeemappedclients
        where EmployeeUid = _EmployeeId;
        
        
        
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_get_bonus_shift_overtime` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_get_bonus_shift_overtime`(
    _CompanyId int,
    _ForMonth int,
    _ForYear int

/*

	call sp_employee_get_bonus_shift_overtime(1, 3, 2024);

*/
)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
													
			Set @Message = CONCAT('ERROR ', '',  ' (', @sqlstate, '): ', @errortext);
            Rollback;            
			Call sp_LogException(@Message, '', 'sp_employee_get_bonus_shift_overtime', 1, 0, @Result);
		End;
        
        set @financialYear = 0;
        select FinancialYear into @financialYear from company_setting
        where CompanyId = _CompanyId;
		
        select 
			b.BonusShiftOvertimeId, 
            b.EmployeeId,
            b.IsBonus,
            b.IsShift,
            b.IsOvertime,
            b.ForYear,
            b.ForMonth,
            b.CompanyId,
            b.OrganizationId,
            s.ComponentFullName, 
            b.Amount,
            b.TotalMinutes,
            e.FirstName, 
            e.LastName, 
            h.PaymentActionType, 
            h.Comments,
            h.IsCompOff,
            h.OTCalculatedOn,
            p.PayCalculationId,
            es.CompleteSalaryDetail,
            case
				when h.SalaryAdhocId is null then 0
                else h.SalaryAdhocId
			end SalaryAdhocId
		from bonus_shift_overtime b
		left join hike_bonus_salary_adhoc h on h.EmployeeId = b.EmployeeId 
        left join salary_components s on s.ComponentId = b.ComponentId
        left join employee_salary_detail es on es.EmployeeId = b.EmployeeId
        left join payroll_cycle_setting p on p.CompanyId = b.CompanyId
        left join employees e on e.EmployeeUid = b.EmployeeId and
        es.FinancialStartYear = @financialYear and
		b.ForYear = _ForYear and b.ForMonth = _ForMonth and b.CompanyId = _CompanyId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_get_newjoinee_exiting` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_get_newjoinee_exiting`(
    _CompanyId int

/*

	call sp_employee_get_newjoinee_exiting(1);

*/
)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
													
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
            Rollback;            
			Call sp_LogException(@Message, '', 'sp_employee_get_newjoinee_exiting', 1, 0, @Result);
		End;
		
        set @noticePeriodDays = 0;
        set @probationPeriodDays = 0;
        
        select ProbationPeriodInDays, NoticePeriodInDays into @probationPeriodDays, @noticePeriodDays
        from company_setting where CompanyId = _CompanyId;
        
        select e.EmployeeUid as EmployeeId, 
			e.FirstName, 
            e.LastName, 
            e.Mobile, 
            e.Email,
            e.CreatedOn,
            null as DOL,
            s.CTC,
            datediff(utc_timestamp(), CreatedOn) InDays,
            false as IsServingNotice,
            true as InProbation,
            4 as ResignationStatus,
            null Reason,
            h.PaymentActionType,
            h.Comments,
            case
				when h.SalaryAdhocId is null then 0
                else h.SalaryAdhocId
			end SalaryAdhocId
		from employees e
        inner join employee_salary_detail s on e.EmployeeUid = s.EmployeeId
        left join hike_bonus_salary_adhoc h on h.EmployeeId = e.EmployeeUid
        and h.ForYear = 2024 and h.ForMonth = 3
		where datediff(utc_timestamp(), CreatedOn) <= @probationPeriodDays         
        
        Union all
        
        select e.EmployeeUid as EmployeeId, 
			e.FirstName, 
            e.LastName, 
            e.Mobile, 
            e.Email,
            e.CreatedOn,
            n.OfficialLastWorkingDay as DOL,
            s.CTC,
            datediff(n.OfficialLastWorkingDay, utc_timestamp()) InDays,
            true as IsServingNotice,
            case
				when datediff(utc_timestamp(), e.CreatedOn) <= @probationPeriodDays 
                then true 
                else false
			end as InProbation,
            n.ResignationStatus,
            n.EmployeeReason Reason,
            h.PaymentActionType,
            h.Comments,
            case
				when h.SalaryAdhocId is null then 0
                else h.SalaryAdhocId
			end SalaryAdhocId
		from employees e
        inner join employee_salary_detail s on e.EmployeeUid = s.EmployeeId
        inner join employee_notice_period n on e.EmployeeUid = n.EmployeeId
        left join hike_bonus_salary_adhoc h on h.EmployeeId = e.EmployeeUid and
        h.ForYear = 2024 and h.ForMonth = 3
        where n.IsExited = false;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_get_reimburs_adhoc_and_deduction` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_get_reimburs_adhoc_and_deduction`(
    _CompanyId int,
    _ForMonth int,
    _ForYear int

/*

	call sp_employee_get_reimburs_adhoc_and_deduction(1, 3, 2024);

*/
)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
													
			Set @Message = CONCAT('ERROR ', '',  ' (', @sqlstate, '): ', @errortext);
            Rollback;            
			Call sp_LogException(@Message, '', 'sp_employee_get_reimburs_adhoc_and_deduction', 1, 0, @Result);
		End;
        	
        select 
			b.ReimbursAdhocAndDeduction, 
            b.EmployeeId,
            b.IsReimburs,
            b.IsAdhoc,
            b.IsDeduction,
            b.ForYear,
            b.ForMonth,
            b.CompanyId,
            b.OrganizationId,
            s.ComponentFullName, 
            e.FirstName, 
            e.LastName, 
            h.PaymentActionType, 
            h.Comments,
            b.Amount,
            ct.ComponentDescription,
            case
				when h.SalaryAdhocId is null then 0
                else h.SalaryAdhocId
			end SalaryAdhocId
		from reimburs_adhoc_and_deduction b
		left join hike_bonus_salary_adhoc h on h.EmployeeId = b.EmployeeId 
        left join salary_components s on s.ComponentId = b.ComponentId
        left join employees e on e.EmployeeUid = b.EmployeeId 
        left join component_type ct on ct.ComponentTypeId = s.ComponentTypeId and
		b.ForYear = _ForYear and b.ForMonth = _ForMonth and b.CompanyId = _CompanyId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_lastId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_lastId`(
	_IsActive bit,
    out _ProcessingResult varchar(100)
    
 
   
)
Begin
    select EmployeeUid into _ProcessingResult from employees
    order by EmployeeUid desc limit 1;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leaveplan_mapping_GetByPlanId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leaveplan_mapping_GetByPlanId`(
	_LeavePlanId int
    

    
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_employee_leaveplan_mapping_GetByPlanId', 1, 0, @Result);
		end;
        
        select * from employee_leaveplan_mapping
        where 	LeavePlanId 			= 		_LeavePlanId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leaveplan_mapping_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leaveplan_mapping_insupd`(	
	_EmployeeLeaveplanMappingId bigint,
    _EmployeeId bigint,
    _LeavePlanId int,
    _IsAdded bit,
    out _ProcessingResult varchar(50)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_leaveplan_mapping_insupd', 1, 0, @Result);
	end;
   
   if (_IsAdded) then
   begin
	   if not exists(select 1 from employee_leaveplan_mapping where EmployeeLeaveplanMappingId = _EmployeeLeaveplanMappingId) then
	   begin
			insert into employee_leaveplan_mapping values(
				default,
				_EmployeeId,
				_LeavePlanId
			);
			
			set _ProcessingResult = 'inserted';
	   end;
	   else
	   begin
			update employee_leaveplan_mapping set
				EmployeeId		=		_EmployeeId,
				LeavePlanId		=		_LeavePlanId
			where EmployeeLeaveplanMappingId = _EmployeeLeaveplanMappingId;
			
			set _ProcessingResult = 'updated';
	   end;
	   end if;
	end;
    else
    begin
		if exists(select 1 from employee_leaveplan_mapping where EmployeeLeaveplanMappingId = _EmployeeLeaveplanMappingId) then
		begin
			delete from employee_leaveplan_mapping
			where EmployeeLeaveplanMappingId = _EmployeeLeaveplanMappingId;
			
			set _ProcessingResult = 'deleted';
	   end;
       end if;
    end;
    end if;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leaveplan_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leaveplan_upd`(	
    _EmployeeId bigint,
    _LeavePlanId int,
    _AdminId bigint,
    out _ProcessingResult varchar(50)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_leaveplan_upd', 1, 0, @Result);
	end;
    begin
		update employees set
				LeavePlanId		=		_LeavePlanId,
                UpdatedBy		=		_AdminId,
                UpdatedOn		= 		now()
		where EmployeeUid		=		_EmployeeId;
        
		set _ProcessingResult = 'updated';
	end;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leave_clean_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leave_clean_by_id`(


	_EmployeesId varchar(50)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		SET SQL_SAFE_UPDATES = 1;	
        drop table if exists emp_list;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_leave_clean_by_id', 1, 0, @Result);
	end;
	
    SET SQL_SAFE_UPDATES = 0;

    drop table if exists emp_list;
	create temporary table emp_list as (
		SELECT 
			row_number() over(order by id) row_index,
			id
			FROM
			JSON_TABLE(
				_EmployeesId,
				'$[*]'
				COLUMNS (
					id int path '$'
				)
			) AS t
	);
    
    
    SET @counter = 1;
    
    
    SET @condition_count = (SELECT COUNT(*) FROM emp_list);
    SET @current_id = 0;
    
    
    WHILE @counter <= @condition_count DO
		
		SELECT id into @current_id FROM emp_list WHERE row_index = @counter;
		
		DELETE FROM leave_request_notification WHERE EmployeeId = @current_id;
		
        update employee_leave_request set
			LeaveDetail			= 		'[]',
            LeaveQuotaDetail	=		'[]',
            TotalLeaveQuota		=		0,
            IsPending			=		false
		where EmployeeId = @current_id;
		
		SET @counter = @counter + 1;
	END WHILE;
    
    drop table if exists emp_list;    
	SET SQL_SAFE_UPDATES = 1;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leave_level_migration` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leave_level_migration`(
		_Year int,
        _CompanyId int
        
        
)
Begin
	select n.LeaveRequestNotificationId,
    n.LeaveRequestId,
    n.UserMessage,
    n.EmployeeId,
    n.AssigneeId,
    n.ReportingManagerId,
    n.ProjectId,
    n.ProjectName,
    n.FromDate LeaveFromDay,
    n.ToDate LeaveToDay,
    n.NumOfDays,
    n.RequestStatusId,
    n.LeaveTypeId,
    n.FeedBackMessage,
    n.RecordId,
    n.LastReactedOn,
    n.CreatedOn,
    n.UpdatedOn,
    n.CreatedBy,
    n.UpdatedBy, 
    r.LeaveDetail, r.LeaveQuotaDetail from leave_request_notification n
    inner join employee_leave_request r on n.LeaveRequestId = r.LeaveRequestId
    inner join employees e on e.EmployeeUid = r.EmployeeId
	where r.IsPending = true and r.Year = _Year
    and n.RequestStatusId = 2 and e.CompanyId = _CompanyId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leave_payroll_and_otherdetail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leave_payroll_and_otherdetail_insupd`(
	   
	_EmployeeId bigint, 
    _LeaveTypeBriefJson text,  
    _AccrualRunDay int, 
    _NextAccrualRunDate datetime
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_employee_leave_payroll_and_otherdetail_insupd', 1, 0, @Result);
		end;
        if not exists (select 1 from employee_leave_payroll_and_otherdetail where EmployeeId = _EmployeeId) then
        begin
			
			Insert into employee_leave_payroll_and_otherdetail values(
				_EmployeeId, 
				_LeaveTypeBriefJson, 
				_AccrualRunDay, 
				_NextAccrualRunDate
			);
 
        end;
        else
        begin
			update employee_leave_payroll_and_otherdetail set 
				LeaveTypeBriefJson				=			_LeaveTypeBriefJson,
				AccrualRunDay					=			_AccrualRunDay,
				NextAccrualRunDate				=			_NextAccrualRunDate
			where EmployeeId 					= 			_EmployeeId;

        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leave_request_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leave_request_by_empid`(
	   
	_EmployeeId bigint,
    _Year int
)
Begin
    Declare Exit handler for sqlexception
    Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

		Call sp_LogException (@Message, '', 'sp_employee_leave_request_by_empid', 1, 0, @Result);
	end;

	select * from employee_leave_request 
    where EmployeeId = _EmployeeId and Year = _Year;
    
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leave_request_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leave_request_filter`(
	_EmployeeId bigint,
	_SearchString varchar(250),
	_SortBy varchar(50),
	_PageIndex int,
	_PageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_employee_leave_request_filter', 1, 0, @Result);
		End;

        Begin
			If(_SortBy is NULL OR _SortBy = '') then
            begin
				Set _sortBy = ' e.Year DESC';
			end;
			End if;
            
            If (_EmployeeId > 0) then
            begin
				Set _SearchString = Concat(_SearchString, ' AND e.EmployeeId = ', _EmployeeId, ' ');
            end;
            end if;
			
				Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _SortBy, ') as RowIndex,
						 e.LeaveRequestId,
						 e.EmployeeId,
						 e.LeaveDetail,
						 e.Year,
						 e.AvailableLeaves,
						 e.TotalLeaveApplied,
						 e.TotalApprovedLeave,
						 e.TotalLeaveQuota,
						 e.LeaveQuotaDetail,
                         e.UpdatedOn,
						 Count(1) Over() as Total 
					from employee_leave_request e
				where ', _SearchString, ' 
			)T where RowIndex between ', (_PageIndex - 1) * _PageSize + 1 ,' and ', (_PageIndex * _PageSize)) ;
			
            
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leave_request_GetById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leave_request_GetById`(
	_LeaveRequestNotificationId bigint
    

    
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_employee_leave_request_GetById', 1, 0, @Result);
		end;
        
        set @leaveTypeId = 0;
        select LeaveTypeId into @leaveTypeId from leave_request_notification
        where LeaveRequestNotificationId = _LeaveRequestNotificationId;
        
        select r.*, n.ReportingManagerId, e.LeavePlanId, n.LeaveTypeId, n.RequestStatusId, n.ReporterDetail Notify, n.NoOfApprovalsRequired, n.FromDate LeaveFromDay, n.ToDate LeaveToDay,
        n.UserMessage Reason,e.FirstName, e.LastName, e.Email, e.Mobile from leave_request_notification n        
        inner join employee_leave_request r on r.LeaveRequestId = n.LeaveRequestId
        Inner join employees e on e.EmployeeUid = r.EmployeeId
        where n.LeaveRequestNotificationId = _LeaveRequestNotificationId;
        
        select * from leave_plans_type
        where LeavePlanTypeId = @leaveTypeId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leave_request_InsUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leave_request_InsUpdate`(
	   
	_LeaveRequestId bigint,
	_EmployeeId bigint,
	_LeaveDetail Json,
    _Year int,
    _IsPending bit,
    _AvailableLeaves decimal,
	_TotalLeaveApplied decimal,
	_TotalApprovedLeave decimal,
	_TotalLeaveQuota decimal,
    _LeaveQuotaDetail json,
    out _ProcessingResult varchar(1000)
    
 
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_employee_leave_request_InsUpdate', 1, 0, @Result);
		end;
        		
		If not exists (Select 1 from employee_leave_request Where LeaveRequestId = _LeaveRequestId Or (EmployeeId = _EmployeeId and Year = _Year)) then
		Begin
			Select LeaveRequestId into @LeaveRequestId from 
            employee_leave_request order by LeaveRequestId desc limit 1;
			Set @LeaveRequestId = @LeaveRequestId + 1;
			
			Insert into employee_leave_request Values (
				@LeaveRequestId,
				_EmployeeId,
				_LeaveDetail,
				_Year,
                _IsPending,
				_AvailableLeaves,
				_TotalLeaveApplied,
				_TotalApprovedLeave,
				_TotalLeaveQuota,
				_LeaveQuotaDetail,
                utc_timestamp()
			);
            Set _ProcessingResult = 'inserted';
		End;
		Else
		Begin
			Update employee_leave_request SET 
				LeaveDetail				=		_LeaveDetail,
				Year					=		_Year,
                IsPending				=		_IsPending,
				AvailableLeaves			=		_AvailableLeaves,
				TotalLeaveApplied		=		_TotalLeaveApplied,
				TotalApprovedLeave		=		_TotalApprovedLeave,
				TotalLeaveQuota			=		_TotalLeaveQuota,
				LeaveQuotaDetail		=		_LeaveQuotaDetail,
                UpdatedOn 				= 		utc_timestamp()
			Where LeaveRequestId 		= 		_LeaveRequestId;
            Set _ProcessingResult = 'updated';
		End;
		End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_leave_request_update_accrual_detail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_leave_request_update_accrual_detail`(
	   
	_EmployeeId bigint,
    _Year int,
    _LeaveTypeBriefJson json
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

		Call sp_LogException (@Message, '', 'sp_employee_leave_request_update_accrual_detail', 1, 0, @Result);
	end;
    
    set @leaveRequestId = 0;
    select LeaveRequestId into @leaveRequestId from employee_leave_request
    where EmployeeId = _EmployeeId and Year = _Year;
	
    if exists(select 1 from employee_leave_request where LeaveRequestId = @leaveRequestId) then
    begin
		Update employee_leave_request set 
			LeaveQuotaDetail = _LeaveTypeBriefJson
        where LeaveRequestId = @leaveRequestId;
    end;
    end if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_notice_period_getby_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_notice_period_getby_empid`(
	_EmployeeId bigint,
    _CompanyId bigint
    


)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_employee_notice_period_getby_empid', 1, 0, @Result);
		End;
		     
        select * from employee_notice_period where EmployeeId = _EmployeeId;
		select * from company_setting where CompanyId = _CompanyId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_notice_period_getby_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_notice_period_getby_id`(
	_EmployeeNoticePeriodId bigint
    


)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_employee_notice_period_getby_id', 1, 0, @Result);
		End;
		     
        select * from employee_notice_period where EmployeeNoticePeriodId = _EmployeeNoticePeriodId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_notice_period_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_notice_period_insupd`(	
    _EmployeeNoticePeriodId bigint,
    _EmployeeId bigint,
    _IsDiscussWithManager bit,
    _ApprovedOn datetime,
    _ApplicableFrom datetime,
    _ApproverManagerId int,
    _ManagerDescription varchar(500),
    _AttachmentPath varchar(200),
    _EmailTitle varchar(100),
    _OtherApproverManagerIds json,
    _ITClearanceStatus int,
    _ReportingManagerClearanceStatus int,
    _CanteenClearanceStatus int,
    _ClientClearanceStatus int,
    _HRClearanceStatus int,
    _OfficialLastWorkingDay datetime,
    _PeriodDuration int,
    _EarlyLeaveStatus int,
    _EmployeeComment varchar(500),
	_EmployeeReason varchar(50),
    _IsDiscussWithEmployee bit,
    _IsEmpResign bit,
    _IsRecommendLastDay bit,
    _IsRehire bit,
    _Summary varchar(200),
    _ManagerComment varchar(500),
    _AdminId bigint,
    out _ProcessingResult varchar(50)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_notice_period_insupd', 1, 0, @Result);
	end;
    begin
		if not exists (select 1 from employee_notice_period where EmployeeNoticePeriodId = _EmployeeNoticePeriodId) then
		begin
			Set @employeeNoticePeriodId = 0;
			Select EmployeeNoticePeriodId from employee_notice_period order by EmployeeNoticePeriodId desc limit 1 into @employeeNoticePeriodId ;
			Set @employeeNoticePeriodId = @employeeNoticePeriodId+1;
            
			insert into employee_notice_period values (
				@employeeNoticePeriodId,
                _EmployeeId,
                _IsDiscussWithManager,
                _IsDiscussWithEmployee,
                _IsEmpResign,
                _IsRecommendLastDay,
                _IsRehire,
				_ApprovedOn,
				_ApplicableFrom,
				_ApproverManagerId,
				_ManagerDescription,
				_AttachmentPath,
				_EmailTitle,
				_OtherApproverManagerIds,
				_ITClearanceStatus,
				_ReportingManagerClearanceStatus,
				_CanteenClearanceStatus,
				_ClientClearanceStatus,
				_HRClearanceStatus,
				_OfficialLastWorkingDay,
				_PeriodDuration,
				_EarlyLeaveStatus,
				_EmployeeComment,
                _EmployeeReason,
                _Summary,
                _ManagerComment,
                _AdminId,
                null,
                now(),
                null
            );
            set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update employee_notice_period set
					ApprovedOn							=		_ApprovedOn,
					ApplicableFrom						=		_ApplicableFrom,
                    IsDiscussWithManager				=		_IsDiscussWithManager,
					ApproverManagerId					=		_ApproverManagerId,
					ManagerDescription					=		_ManagerDescription,
					AttachmentPath						=		_AttachmentPath,
					EmailTitle							=		_EmailTitle,
					OtherApproverManagerIds				=		_OtherApproverManagerIds,
					ITClearanceStatus					=		_ITClearanceStatus,
					ReportingManagerClearanceStatus		=		_ReportingManagerClearanceStatus,
					CanteenClearanceStatus				=		_CanteenClearanceStatus,
					ClientClearanceStatus				=		_ClientClearanceStatus,
					HRClearanceStatus					=		_HRClearanceStatus,
					OfficialLastWorkingDay				=		_OfficialLastWorkingDay,
					PeriodDuration						=		_PeriodDuration,
					EarlyLeaveStatus					=		_EarlyLeaveStatus,
					EmployeeComment						=		_EmployeeComment,
                    EmployeeReason						=		_EmployeeReason,
                    IsDiscussWithEmployee				=		_IsDiscussWithEmployee,
					IsEmpResign							=		_IsEmpResign,
					IsRecommendLastDay					=		_IsRecommendLastDay,
					IsRehire							=		_IsRehire,
					Summary								=		_Summary,
					ManagerComment						=		_ManagerComment,
					UpdatedBy							=		_AdminId,
					UpdatedOn							= 		now()
			where EmployeeId		=		_EmployeeId;
			
			set _ProcessingResult = 'updated';
        end;
        end if;
	end;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_notification_InsUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_notification_InsUpdate`(
	_NotificationId bigint,
	_Message varchar(500),
	_UserId bigint,
	_UserTypeId int,
	_UserName varchar(100),
	_Email varchar(100),
	_Mobile varchar(14),
	_AssigneeId long,
	_Status	int,
	_ActionTakenOn DateTime,
    _RequestTypeId int,
    out _ProcessingResult varchar(100)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Set _ProcessingResult = @Message;    
            
            RollBack;
            SET autocommit = 1;
            Call sp_LogException (@Message, @OperationStatus, 'sp_employee_notification_InsUpdate', 1, 0, @Result);
		end;
        
        Set @ClientName = '';
        Select ClientName from clients where ClientId = _AllocatedClientId into @ClientName;
        
        SET autocommit = 0;
        Start Transaction;
		Begin 
			set @notificationId = 0;
            select NotificationId into @notificationId from employee_notification 
            order by NotificationId desc limit 1;
            set @notificationId = @notificationId + 1;            
			
			If not exists (Select 1 from employee_notification Where NotificationId = _NotificationId) then
			Begin
				Insert into employees Values (
					@notificationId,
					_Message,
					_UserId,
					_UserTypeId,
					_RequestedOn,
					_UserName,
					_Email,
					_Mobile,
					_AssigneeId,
					_Status,
					_ActionTakenOn,
                    _RequestTypeId
				);
                
                Set _ProcessingResult = 'inserted';
			End;
			Else
			Begin
				Update employee_notification SET 
					Message 				= 		_Message,
					UserId 					= 		_UserId,
					UserTypeId 				= 		_UserTypeId,
					RequestedOn 			= 		_RequestedOn,
					UserName 				= 		_UserName,
					Email 					= 		_Email,
					Mobile 					= 		_Mobile,
					AssigneeId 				= 		_AssigneeId,
					Status 					= 		_Status,
					ActionTakenOn 			= 		_ActionTakenOn,
                    RequestTypeId			=		_RequestTypeId
				Where 	NotificationId = _NotificationId;
                
                Set _ProcessingResult = 'updated';
			End;
			End if;
            COMMIT;
		End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_only_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_only_by_id`(
	_EmployeeId bigint
    

    
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);  
		Call sp_LogException (@Message, '', 'sp_employee_only_by_id', 1, 0, @Result);
	end;

	select * from employees
    where EmployeeUid = _EmployeeId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_payroll_get_bet_dates` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_payroll_get_bet_dates`(
    _FromDate datetime,
	_ToDate datetime,
    _OffsetIndex int,
    _PageSize int,
    _CompanyId int

/*

	call sp_employee_payroll_get_bet_dates('2023-03-25 00:00:00', '2023-04-30 00:00:00', 0, 10, 1)

*/
)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		drop table if exists employee_attendance_page;
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_payroll_get_bet_dates', 1, 0, @Result);
	End;
    
    drop table if exists employee_attendance_page;
    
	Set @ForYear  = Year(_ToDate);
	Set @ForMonth = Month(_ToDate);
	Set @PreviousYear = Year(_FromDate);
	Set @PreviousMonth = Month(_FromDate);
    
    set @payrollBarrierDay = 0;
    select ExcludePayrollFromJoinDate into @payrollBarrierDay from company_setting
	where CompanyId = _CompanyId;
        
    create temporary table if not exists employee_attendance_page as (
		select 
			e.EmployeeUid as EmployeeId,
            Concat(e.FirstName, ' ', e.LastName) as EmployeeName,
            e.Email,
			s.CompleteSalaryDetail, 
			s.CTC, 
			s.GroupId, 
			s.TaxDetail,
			e.CompanyId,
            e.WorkShiftId,
			e.CreatedOn as Doj
		from employees e
		inner join employee_salary_detail s on s.EmployeeId = e.EmployeeUid
		where e.CreatedOn <= _ToDate
		Limit _PageSize Offset _OffsetIndex
	);
    
    select e.* from employee_attendance_page e;
    
	select 
		d.*, e.Email
	from employee_declaration d
	inner join employee_attendance_page e on e.EmployeeId = d.EmployeeId
    where d.DeclarationFromYear = @ForYear;
    
    select n.*, l.IsPaidLeave from leave_request_notification n
    inner join leave_plans_type l on l.LeavePlanTypeId = n.LeaveTypeId
    inner join employee_attendance_page e on e.EmployeeId = n.EmployeeId
    where n.RequestStatusId = (select ItemStatusId from itemstatus where Status = 'Approved');
    
	select * from hike_bonus_salary_adhoc h
	where (h.ForYear = @ForYear and h.ForMonth = @ForMonth 
    or h.ForYear = @PreviousYear and h.ForMonth = @PreviousMonth)
	and h.CompanyId = _CompanyId and h.ProgressState = 9;
    
	select EmployeeUid from employees 
		where 
	case
		when Month(CreatedOn) = @ForMonth and Year(CreatedOn) = @ForYear
		then Day(CreatedOn) > @payrollBarrierDay
		else 1=0
	end;
    
    SELECT
		a.AttendanceId,
		a.EmployeeId,
		a.EmployeeName,
		a.EmployeeEmail,
		a.ReviewerId,
		a.ReviewerName,
		a.ReviewerEmail,
		a.ProjectId,
		a.TaskId, 
		a.TaskType,
		a.LogOn,
		a.LogOff,
		a.TotalMinutes,
		a.Comments, 
		a.AttendanceStatus,
		a.WeekOfYear,
		a.AttendanceDate,
		a.WorkTypeId,
		a.IsOnLeave,
		a.LeaveId,
		Case 
			When a.AttendanceDate = c.HolidayDate then true
            Else false
		End
		IsHoliday,
		Case 
			When a.AttendanceDate = c.HolidayDate then c.CompanyCalendarId
            Else 0
		End
        HolidayId
	FROM daily_attendance a
    inner join employee_attendance_page e on e.EmployeeId = a.EmployeeId
    left Join company_calendar c on a.AttendanceDate = c.HolidayDate
	WHERE a.AttendanceDate between _FromDate And _ToDate;

    drop table if exists employee_attendance_page;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_payroll_get_by_page` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_payroll_get_by_page`(
	_ForYear int,
    _ForMonth int,
    _PreviousYear int,
	_PreviousMonth int,
    _OffsetIndex int,
    _PageSize int,
    _CompanyId int

/*

	call sp_employee_payroll_get_by_page(2023, 4, 2023, 5, 0, 10, 1)

*/
)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		drop table if exists employee_attendance_page;
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_payroll_get_by_page', 1, 0, @Result);
	End;
    
    drop table if exists employee_attendance_page;
    
    set @payrollBarrierDay = 0;
    select ExcludePayrollFromJoinDate into @payrollBarrierDay from company_setting
	where CompanyId = _CompanyId;
        
    create temporary table if not exists employee_attendance_page as (
		select 
			e.EmployeeUid as EmployeeId,
            e.Email,
			s.CompleteSalaryDetail, 
			s.CTC, 
			s.GroupId, 
			s.TaxDetail,
			e.CompanyId,
            e.WorkShiftId,
			e.CreatedOn as Doj
		from employees e
		inner join employee_salary_detail s on s.EmployeeId = e.EmployeeUid
		Limit _PageSize Offset _OffsetIndex
	);
    
    select a.*, e.* from employee_attendance_page e
    inner join attendance a on e.EmployeeId = a.EmployeeId
    where 
    (
		a.ForYear = _ForYear and a.ForMonth = _ForMonth
		||
		a.ForYear = _PreviousYear and a.ForMonth = _PreviousMonth
	);
    
	select 
		d.*, e.Email
	from employee_declaration d
	inner join employee_attendance_page e on e.EmployeeId = d.EmployeeId
    where d.DeclarationFromYear = _ForYear;
    
    select l.* from leave_request_notification l
    inner join employee_attendance_page e on e.EmployeeId = l.EmployeeId;
    
	select * from hike_bonus_salary_adhoc h
	where (h.ForYear = _ForYear and h.ForMonth = _ForMonth 
    or h.ForYear = _PreviousYear and h.ForMonth = _PreviousMonth)
	and h.CompanyId = _CompanyId and h.ProgressState = 9;
    
	select EmployeeUid from employees 
		where 
	case
		when Month(CreatedOn) = _ForMonth and Year(CreatedOn) = _ForYear
		then Day(CreatedOn) > @payrollBarrierDay
		else 1=0
	end;

    drop table if exists employee_attendance_page;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_performance_by_managerid_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_performance_by_managerid_get`(


	_ReportingManagerId bigint
)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_performance_by_managerid_get', 1, 0, @Result);
	End;

	
	select ep.*, e.FirstName, e.LastName, e.Mobile, e.Email from employee_performance ep
	inner join employees e on ep.EmployeeId = e.EmployeeUid
	where e.ReportingManagerId = _ReportingManagerId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_performance_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_performance_get`(
	_EmployeeId long,
    _UserTypeId int,
    _ForYear int
    


)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_employee_performance_get', 1, 0, @Result);
		End;
		     
        select *
		from attendance
        where EmployeeId = _EmployeeId
        and UserTypeId = _UserTypeId
        And ForYear = _ForYear;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_performance_getby_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_performance_getby_id`(
	_EmployeePerformanceId bigint
    


)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_employee_performance_getby_id', 1, 0, @Result);
		End;
		     
        select *
		from employee_performance
        where 	EmployeePerformanceId 		= 		   _EmployeePerformanceId;
			
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_performance_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_performance_insupd`(



	_EmployeePerformanceId bigint,
    _EmployeeId bigint,
	_ObjectiveId bigint,
    _CompanyId int,
    _CurrentValue decimal,
    _Status int,
    _Comments varchar(500),
    _PerformanceDetail json,
    _AdminId bigint,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_performance_insupd', 1, 0, @Result);
	end;
	
	Set _ProcessingResult = '';
	Begin
		If not exists (Select 1 from employee_performance where EmployeePerformanceId = _EmployeePerformanceId) then
		Begin
			set @employeePerformanceId = 0;
            select EmployeePerformanceId into @employeePerformanceId from employee_performance
            order by EmployeePerformanceId desc limit 1;
            set @employeePerformanceId = @employeePerformanceId + 1;

			Insert into employee_performance values(
				@employeePerformanceId,
                _ObjectiveId,
				_EmployeeId,
				_CompanyId,
				_CurrentValue,
				_Status,
				_Comments,
				_PerformanceDetail,
                _AdminId,
                utc_timestamp()
			);
			
			Set _ProcessingResult = @employeePerformanceId;
		End;
		Else
		Begin
			Update employee_performance Set
				CurrentValue			=		_CurrentValue,
				Comments				=		_Comments,
				PerformanceDetail		=		_PerformanceDetail,
				Status					=		_Status,
				UpdatedBy           	=       _AdminId,
				UpdatedOn				=		utc_timestamp()
			where 	EmployeePerformanceId 		= 		   _EmployeePerformanceId;
			
			Set _ProcessingResult = _EmployeePerformanceId;
		End;
		End if;	
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_performance_reopen` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_performance_reopen`(
    _EmployeeId bigint,
    _AppraisalDetailId int,
    out _ProcessingResult varchar(50)
    
/*

	Set @result = '';
	call sp_employee_performance_reopen(2, 1, @result)
    select @result;
 
 */


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
        Set _ProcessingResult = 'fail';
		Call sp_LogException(@Message, '', 'sp_employee_performance_reopen', 1, 0, @Result);
	End;
    
	with cte
    as (
		select * from employee_performance where EmployeeId = _EmployeeId and AppraisalDetailId = _AppraisalDetailId
    )
    -- select cte.AppraisalFinalizer from cte;
    update employee_performance af 
    JOIN cte on af.EmployeePerformanceId = cte.EmployeePerformanceId
    set af.Status = 2;
    
    Set _ProcessingResult = 'updated';
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_profile` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_profile`(


	_UserId bigint,
	_Mobile varchar(20),
	_Email varchar(50),
    _UserTypeId int
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_professionaldetail_filter', 1, 0, @Result);
			end;  
            if exists (select 1 from employeeprofessiondetail where EmployeeUid = _UserId) then
            begin
				Select * from employeeprofessiondetail p
				where p.EmployeeUid = _UserId;
            end;
            else
            begin
				Select * from employeeprofessiondetail_archive p
				where p.EmployeeUid = _UserId;
            end;
            end if;
            
            Select * from candidatefiledetail c
            where c.FileOwnerId = _UserId and c.UserTypeId = _UserTypeId;
            
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_registration_common_data` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_registration_common_data`(
    _CompanyId int

/*

	call sp_employee_registration_common_data(1)

*/

)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_registration_common_data', 1, 0, @Result);
	End;

	select * from salary_components;
    
	set @stateName = '';
    select State into @stateName from company where CompanyId = _CompanyId limit 1;
    
	select s.*, @stateName as StateName from company_setting s
	where 
		Case when _CompanyId > 0 Then s.CompanyId = _CompanyId
		Else s.IsPrimary = true
	End;
    select * from ptax_slab where LOWER(StateName) = LOWER(@stateName);
    
    select * from surcharge_slab;

end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_roles_getall` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_roles_getall`(



)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_roles_getall', 1, 0, @Result);
	end;  
    
    select * from employee_roles;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_roles_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_roles_insupd`(
	   
	_RoleId int ,
    _RoleName varchar(50),
	_Description varchar(250),
	_AccessCode int,
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_employee_roles_insupd', 1, 0, @Result);
		end;
        
        if not exists (select 1 from employee_roles where RoleId = _RoleId) then
        begin
			Insert into employee_roles values(
				default,
				_RoleName,
				_Description,
				_AccessCode
			);
         
             Set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update employee_roles set 
				RoleName			=		_RoleName,
				Description			=		_Description,
				AccessCode			=		_AccessCode
			where RoleId			= 			_RoleId;
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_salary_detail_by_empid_year` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_salary_detail_by_empid_year`(



	_EmployeeId bigint,
    _Year int,
    _CompanyId int
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_salary_detail_by_empid_year', 1, 0, @Result);
		end;  
		      
        select * from employee_salary_detail
        where EmployeeId = _EmployeeId 
        and FinancialStartYear = _Year;
        
        select * from payroll_cycle_setting
        where CompanyId = _CompanyId;
        
        set @workShiftId = 0;
        select WorkShiftId into @workShiftId from employees
        where EmployeeUid = _EmployeeId;
        
        select * from work_shifts
        where WorkShiftId = @workShiftId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_salary_detail_component_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_salary_detail_component_by_empid`(

	# call sp_employee_salary_detail_component_by_empid(2024, 2)

	_FinancialStartYear int,
	_EmployeeId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_salary_detail_component_by_empid', 1, 0, @Result);
	end;  

	Select * from employee_salary_detail
	where EmployeeId = _EmployeeId and FinancialStartYear = _FinancialStartYear;
	
	Select * from salary_components
	Where IsActive = true; 
    
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_salary_detail_Filterby_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_salary_detail_Filterby_empid`(

	_SearchString varchar(250),
	_CompanyId int

/*

	call sp_employee_salary_detail_Filterby_empid('2,3', 1)

*/

)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_salary_detail_Filterby_empid', 1, 0, @Result);
		end;  
		 
         Begin
            set @financialYear  = 0;
            select FinancialYear into @financialYear from company_setting
            where CompanyId = _CompanyId;
            
            Set @SelectQuery = CONCAT('Select d.*,concat(e.FIrstName, " " , e.LastName) EmployeeName, e.Email, e.CreatedOn DateOfJoining from employee_salary_detail d
				inner join employees e on e.EmployeeUid = d.EmployeeId 
				Where d.FinancialStartYear = @financialYear and  d.EmployeeId in (', _SearchString, ')'
			);
            
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
        
		End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_salary_detail_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_salary_detail_get`(


)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_salary_detail_get', 1, 0, @Result);
		end;  
		        
        Select * from employee_salary_detail;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_salary_detail_getbyFilter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_salary_detail_getbyFilter`(

	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int,
    _companyId int

/*

	call sp_employee_salary_detail_getbyFilter('1=1 and s.FinancialStartYear = 2024 and e.CompanyId = 1', null, 1, 10, 1)

*/

)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_salary_detail_getbyFilter', 1, 0, @Result);
		end;  
		 
         Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'UpdatedOn Desc';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					s.*,
                    e.FirstName,
                    e.LastName,
                    e.DesignationId,
					Count(1) Over() as Total 
                    from employee_salary_detail s
                    inner join employees e on e.EmployeeUid = s.EmployeeId
				Where ', _SearchString, '
			)T where RowIndex between ', ((_pageIndex - 1 ) * _pageSize + 1), ' and ', (_pageIndex * _pageSize));
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
        
        select * from company_setting where CompanyId = _companyId;
		End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_salary_detail_get_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_salary_detail_get_by_empid`(

	# call sp_employee_salary_detail_get_by_empid(2024, 2)

	_FinancialStartYear int,
	_EmployeeId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_salary_detail_get', 1, 0, @Result);
	end;  

	Select 
		d.EmployeeId, 
		d.CTC,
		d.GrossIncome,
		d.NetSalary, 
		d.CompleteSalaryDetail,
		d.NewSalaryDetail,
		d.FinancialStartYear,
		d.UpdatedOn,
		/*(select EmployeeCurrentRegime from employee_declaration where EmployeeId = d.EmployeeId) as EmployeeCurrentRegime,
		case
			when exists (select 1 from salary_group where d.CTC between MinAmount and MaxAmount)
				then (select SalaryGroupId from salary_group where d.CTC between MinAmount and MaxAmount)
			else 0
		end GroupId,*/
        1,
		d.TaxDetail 
	from employee_salary_detail d
	where EmployeeId = _EmployeeId and FinancialStartYear = _FinancialStartYear;
	
	Select
		e.EmployeeUid as EmployeeId,
		e.FirstName,
		e.LastName,
		e.ReportingManagerId,
		e.DesignationId,
		l.OrganizationId,
		l.CompanyId,
		(select EmployeeCurrentRegime from employee_declaration where EmployeeId = e.EmployeeUid) as EmployeeCurrentRegime,
		(select DOB from employeepersonaldetail where EmployeeUid = e.EmployeeUid) as DOB,
		e.UpdatedOn,
		e.CreatedOn
	from employees e
	Inner join employeelogin l on l.EmployeeId = e.EmployeeUid
	Where e.EmployeeUid = _EmployeeId; 
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_salary_detail_get_by_groupid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_salary_detail_get_by_groupid`(
		
        _SalaryGroupId int

)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_employee_salary_detail_get_by_groupid', 1, 0, @Result);
		end;  
		        
        Select * from employee_salary_detail where GroupId = _SalaryGroupId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_salary_detail_InsUpd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_salary_detail_InsUpd`(
	_SalaryDetailId int,
	_EmployeeId bigint,
    _CTC decimal,
    _GrossIncome decimal,
    _NetSalary decimal,
	_CompleteSalaryDetail json,
    _NewSalaryDetail json,
    _GroupId int,
    _TaxDetail json,
    _FinancialStartYear int,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_salary_detail_InsUpd', 1, 0, @Result);
	end; 
    
	if not exists (select 1 from employee_salary_detail where SalaryDetailId = _SalaryDetailId) then
	Begin
        Set @salaryDetailId = 0;
		Select SalaryDetailId into @salaryDetailId from employee_salary_detail order by SalaryDetailId desc limit 1;
		Set @salaryDetailId = @salaryDetailId + 1;

		insert into employee_salary_detail
		values 
		(
			@salaryDetailId,
			_EmployeeId,
			_CTC,
			_GrossIncome,
			_NetSalary,
			_CompleteSalaryDetail,
			_NewSalaryDetail,
			1,
			_TaxDetail,
			_FinancialStartYear,
			null
		);
        
		Set _ProcessingResult = 'inserted';
	End;
	Else
	Begin
		update employee_salary_detail 
			set	CTC						=		_CTC,
				GrossIncome				=		_GrossIncome,
				NetSalary				=		_NetSalary,
				CompleteSalaryDetail	=		_CompleteSalaryDetail,
				NewSalaryDetail			=		_NewSalaryDetail,
				GroupId					=		@groupId,
				TaxDetail				= 		_TaxDetail,
				FinancialStartYear 		= 		_FinancialStartYear,
				UpdatedOn				= 		utc_timestamp()
		where SalaryDetailId 			= 		_SalaryDetailId;
		Set _ProcessingResult = 'updated';
	End;
	End if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_salary_detail_upd_on_payroll_run` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_salary_detail_upd_on_payroll_run`(
	_FinancialStartYear int,
	_EmployeeId bigint,
    _TaxDetail json,
    _CompleteSalaryDetail json,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_salary_detail_upd_on_payroll_run', 1, 0, @Result);
	end; 

	update employee_salary_detail set	
		TaxDetail				=		_TaxDetail,
        CompleteSalaryDetail	=		_CompleteSalaryDetail
	where EmployeeId = _EmployeeId and FinancialStartYear = _FinancialStartYear;
	Set _ProcessingResult = 'updated';    
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_salary_detail_upd_salarydetail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_salary_detail_upd_salarydetail`(
	_FinancialStartYear int,
	_EmployeeId bigint,
	_CompleteSalaryDetail json,
    _TaxDetail json,
    _CTC decimal,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_salary_detail_upd_salarydetail', 1, 0, @Result);
	end; 
        
	Set @groupId = 1;
	/*Set @groupId = 0;
	select SalaryGroupId into @groupId from salary_group 
	where _CTC >= MinAmount 
	and _CTC < MaxAmount;*/

	update employee_salary_detail 
	set	CompleteSalaryDetail	=		_CompleteSalaryDetail,
		TaxDetail				=		_TaxDetail,
		GroupId					=		@groupId
	where EmployeeId = _EmployeeId and FinancialStartYear = _FinancialStartYear;
    
	Set _ProcessingResult = 'updated';    
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_taxregime_update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_taxregime_update`(



	_EmployeeId bigint,
    _EmployeeCurrentRegime int,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_taxregime_update', 1, 0, @Result);
	end;  

	Set sql_safe_updates = 0;
	update employee_declaration set 
	EmployeeCurrentRegime		= 		_EmployeeCurrentRegime
	where EmployeeId = _EmployeeId;
	Set sql_safe_updates = 1;
	Set _ProcessingResult = 'updated';
	
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_timesheet_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_timesheet_filter`(
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_employee_timesheet_filter', 1, 0, @Result);
		End;

        Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'UpdatedOn, SubmittedOn Desc';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					t.*,
					Count(1) Over() as Total from employee_timesheet t
				Where ', _SearchString, '
			)T where RowIndex between ', ((_pageIndex - 1 ) * _pageSize + 1), ' and ', (_pageIndex * _pageSize));
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_timesheet_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_timesheet_get`(



    _EmployeeId bigint,
    _ClientId bigint,
	_TimesheetStatus int,
    _ForYear int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_timesheet_get', 1, 0, @Result);
	end;
	
	Select 
		a.*
	from employee_timesheet a   
	Where a.EmployeeId = _EmployeeId
	And _ForYear = a.ForYear
	and ClientId = _ClientId
	and a.TimesheetStatus = _TimesheetStatus;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_timesheet_getby_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_timesheet_getby_empid`(
	_EmployeeId long,
    _ForYear int,
    _ClientId bigint,
    _firstDate datetime,
    _lastDate datetime    
    
    # call sp_employee_timesheet_getby_empid(5, 2023, 3, '2023-12-1 12:00:00', '2023-12-31 12:00:00');
    


)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_employee_timesheet_getby_empid', 1, 0, @Result);
		End;
		
		Select 
			a.*
		from employee_timesheet a   
		Where a.EmployeeId = _EmployeeId
		And a.ForYear = _ForYear
        And (TimesheetStartDate BETWEEN _firstDate AND _lastDate
           OR TimesheetEndDate BETWEEN _firstDate AND _lastDate
           OR (TimesheetStartDate <= _firstDate AND TimesheetEndDate >= _lastDate))
        And a.ClientId = _ClientId
        and TimesheetStatus != 5;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_timesheet_getby_timesheetid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_timesheet_getby_timesheetid`(
	_TimesheetId bigint
    


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_timesheet_getby_timesheetid', 1, 0, @Result);
	End;
	
	Select t.*, e.FirstName, e.LastName, e.Email from employee_timesheet t
    inner join employees e on e.EmployeeUid = t.EmployeeId
	Where TimesheetId = _TimesheetId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_timesheet_get_by_status` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_timesheet_get_by_status`(



    _EmployeeId bigint,
    _ClientId bigint,
    _TimesheetStatus int,
    _TimesheetStartDate datetime,
    _ForYear int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_employee_timesheet_get_by_status', 1, 0, @Result);
	end;
	
	Select 
		a.*
	from employee_timesheet a   
	Where a.EmployeeId = _EmployeeId
	And _ForYear = a.ForYear
    And TimesheetStatus = _TimesheetStatus
	and ClientId = _ClientId
    and datediff(_TimesheetStartDate, a.TimesheetStartDate) >= 0
    and datediff(_TimesheetStartDate, a.TimesheetEndDate) <= 0;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_timesheet_shift_getby_timesheetId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_timesheet_shift_getby_timesheetId`(
	_TimesheetId bigint
    
#	Call sp_employee_timesheet_shift_getby_empid(10)

)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_employee_timesheet_shift_getby_timesheetId', 1, 0, @Result);
		End;
		
        drop table if exists temp_timesheet;
        Create temporary table temp_timesheet as (
			Select * from employee_timesheet
			Where TimesheetId = _TimesheetId
		);
        
        set @workShiftId = 0;
        set @clientId = (select ClientId from temp_timesheet);   
        
		select WorkShiftId into @workShiftId from clients
        where ClientId = @clientId;
        
        if (@workShiftId = 0)then
        begin
			set @workShiftId = 1;
		end;
        end if;
        
        select * from temp_timesheet;
        
        select * from work_shifts
        where WorkShiftId = @workShiftId;
        
        drop table if exists temp_timesheet;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_Employee_ToggleDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Employee_ToggleDelete`(
	_employeeId bigint,
    _active bit,
	_adminId bigint


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_Employee_ToggleDelete', 1, 0, @Result);
		End;

        Begin
            Update employees set 
            IsActive = _active 
            where EmployeeUid = _employeeId;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_employee_workshift_getby_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_employee_workshift_getby_empid`(
	_EmployeeId bigint


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_employee_workshift_getby_empid', 1, 0, @Result);
	End;
    
    select e.*, w.Duration, w.LunchDuration, w.OfficeTime from employees e
    left join work_shifts w on 
    case 
		when e.WorkShiftId > 0
		then w.WorkShiftId = e.WorkShiftId
        else w.WorkShiftId = 1
	end
    where EmployeeUid = _EmployeeId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_ExistingBill_GetById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ExistingBill_GetById`(
	_EmployeeId bigint,
    _UserTypeId int,
    _ClientId bigint,
    _FileId bigint,
    _AdminId bigint,
    _StartDate datetime,
    _EndDate datetime

	# call sp_ExistingBill_GetById(5, 2, 3, 1,1 )
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
            RollBack;
			Call sp_LogException(@Message, '', 'sp_ExistingBill_GetById', 1, 0, @Result);
		End;
        
        Drop table if exists employeebill;
        
        CREATE temporary table employeebill (
		  BillDetailUid bigint,
		  PaidAmount double DEFAULT NULL,
		  BillForMonth int DEFAULT NULL,
		  BillYear int DEFAULT NULL,
		  NoOfDays int DEFAULT NULL,
		  NoOfDaysAbsent double DEFAULT NULL,
		  IGST int DEFAULT NULL,
		  SGST int DEFAULT NULL,
		  CGST int DEFAULT NULL,
		  TDS int DEFAULT NULL,
		  BillStatusId bigint NOT NULL,
		  PaidOn datetime(6) DEFAULT NULL,
		  FileDetailId bigint NOT NULL,
		  EmployeeUid bigint DEFAULT NULL,
		  ClientId bigint NOT NULL,
		  BillNo varchar(45) NOT NULL,
		  UpdateSeqNo int NOT NULL DEFAULT '0',
		  CreatedBy bigint NOT NULL,
		  UpdatedBy bigint DEFAULT NULL,
		  CreatedOn datetime(6) NOT NULL,
		  UpdatedOn datetime DEFAULT NULL,
		  BillUpdatedOn datetime NOT NULL,
		  IsCustomBill bit(1) NOT NULL DEFAULT b'0',
          DeveloperName varchar(100),
          CompanyId int
		);
        
        Insert into employeebill
		select 
			b.*, 
            Concat(e.FirstName, ' ', e.LastName) DeveloperName,
            e.CompanyId
		from billdetail b
        Inner join employees e on e.EmployeeUid = b.EmployeeUid
        Where b.EmployeeUid = _EmployeeId 
        And b.ClientId = _ClientId
        And b.FileDetailId = _FileId;
        
        Set @BillDetailId = 0;
        Set @ForMonth = 0;
        Set @ForYear = 0;
        Set @DeveloperName = '';
        Select BillDetailUid, BillForMonth, BillYear, DeveloperName from employeebill
        Into @BillDetailId, @ForMonth, @ForYear, @DeveloperName;
        
        Select b.*, @DeveloperName DeveloperName from billdetail b
        where BillDetailUid = @BillDetailId;
        
        Select f.* from filedetail f
        where f.FileId = _FileId;
        
        Select c.* from clients c 
        where c.ClientId = _ClientId;
       
       set @companyId = 0;
       select CompanyId from employees where EmployeeUid = _EmployeeId  into @companyId;

		if( @companyId = 0) then
			select * from company where IsPrimaryCompany = 1;
		else
			select * from company
            where CompanyId = @companyId;
		end if;
		
		Select 
			a.*
		from employee_timesheet a   
		Where a.EmployeeId = _EmployeeId
		And ((TimesheetStartDate BETWEEN _StartDate AND _EndDate)
		OR (TimesheetEndDate BETWEEN _StartDate AND _EndDate)
		OR (TimesheetStartDate <= _StartDate AND TimesheetEndDate >= _EndDate))
		And a.ClientId = _ClientId
		and TimesheetStatus = 9;
        
        select * from bank_accounts where CompanyId = @companyId;
        
        Drop table employeebill;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_filedetail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_filedetail_insupd`(
	_FileId bigint,
    _ClientId bigint,
    _FileName varchar(100),
    _FilePath varchar(500),
    _FileExtension varchar(10),
    _StatusId bigint,
    _GeneratedBillNo int,
    _BillUid bigint,
    _BillDetailId bigint,
    _BillNo varchar(20),
    _PaidAmount double,
	_BillForMonth int,
	_BillYear int,
	_NoOfDays int,
	_NoOfDaysAbsent double,
	_IGST float,
	_SGST float,
	_CGST float,
	_TDS float,
	_BillStatusId bigint,
	_PaidOn Datetime,
	_FileDetailId bigint,
	_EmployeeUid bigint,    
    _UpdateSeqNo int,
    _BillUpdatedOn Datetime,
    _IsCustomBill bit,
    _UserTypeId int,
    _AdminId bigint,
    out _ProcessingResult varchar(100)


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
            RollBack;
			Call sp_LogException(@Message, '', 'sp_filedetail_insupd', 1, 0, @Result);
		End;

		Start Transaction;
        Begin
			Set _ProcessingResult = '';
            set @gstAmount = 0;
			if not exists(Select 1 from filedetail where FileId = _FileId) then
            Begin
				Set @fileDetailId = 0;
                Select FileId from filedetail order by FileId DESC limit 1 into @fileDetailId;
                if(@fileDetailId is null OR @fileDetailId = '')then
					Set _FileId = 1;
				else	
					Set _FileId = @fileDetailId + 1;
                end if;
                
				Insert into filedetail values(
					_FileId, 
					_EmployeeUid,
					_FilePath,
                    _FileName,
					_FileExtension,
					_StatusId,					
                    _PaidOn,
                    _UserTypeId,
                    _AdminId,
                    null,
                    NOW(),
                    null
                );
                
                Insert into billdetail values(
					default,
                    _PaidAmount,
                    _BillForMonth,
                    _BillYear,
                    _NoOfDays,
                    _NoOfDaysAbsent,
                    _IGST,
                    _SGST,
                    _CGST,
                    _TDS,
                    _BillStatusId,
                    _PaidOn,
                    _FileId,
                    _EmployeeUid,
                    _ClientId,
                    _BillNo,
                    _UpdateSeqNo,
                    _AdminId,
                    null,
                    NOW(),
                    null,
                    NOW(),
                    _IsCustomBill
                );
                set @gstAmount = ((_IGST + _SGST + _CGST) * _PaidAmount) / 100;
    
                insert into gstdetail values (
					default,
                    _BillNo,
                    _BillStatusId,
                    null,
                    0,
                    @gstAmount,
                    0
                );
				
                
                if(_GeneratedBillNo is not null And _GeneratedBillNo <> '') then
					Update bills b Set
						b.LastBillNo = _GeneratedBillNo
					Where BillUid = _BillUid;
                End if;
                
                Set _ProcessingResult = _FileId;
            End;
            Else
            Begin
				Update filedetail Set
					FilePath		=	_FilePath,
                    FileName		=	_FileName,
					FileExtension	=	_FileExtension,
					ItemStatusId	=	_StatusId,				
                    PaidOn			=	_PaidOn,
                    UpdatedBy		=	_AdminId,
                    UpdatedOn 		=	NOW()
                Where FileId = _FileId;
                
                If exists(Select 1 from billdetail Where BillDetailUid = _BillDetailId) then
                Begin
					Update billdetail Set
						PaidAmount			=		_PaidAmount,
                        BillNo				=		_BillNo,
						BillForMonth		=		_BillForMonth,
						BillYear			=		_BillYear,
						NoOfDays			=		_NoOfDays,
						NoOfDaysAbsent		=		_NoOfDaysAbsent,
						IGST				=		_IGST,
						SGST				=		_SGST,
						CGST				=		_CGST,
						TDS					=		_TDS,
						PaidOn				=		_PaidOn,
                        BillStatusId		=		_StatusId,
                        UpdateSeqNo			=		_UpdateSeqNo,
						UpdatedBy			=		_AdminId,
						UpdatedOn			=		now(),
                        BillUpdatedOn		=		_BillUpdatedOn,
                        IsCustomBill		=		_IsCustomBill
					Where BillDetailUid 	=		_BillDetailId;
                    set @gstAmount = ((_IGST + _SGST + _CGST) * _PaidAmount) / 100;
                    update gstdetail set
					gststatus 			=			_StatusId,
                    amount 				=			@gstAmount
                    where billno = _BillNo;
                    
				End;
                End if;
                Set _ProcessingResult = _FileId;
            End;
            End if;
		End;
        
        Commit;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_FileDetail_PatchRecord` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_FileDetail_PatchRecord`(
	_FileId bigint,
	_StatusId long,
	_UpdatedOn datetime,
	_Notes varchar(250),
    _AdminId bigint,
    out _ProcessingResult varchar(250)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Set _ProcessingResult = @Message;    
            
            RollBack;
            SET autocommit = 1;
            Call sp_LogException (@Message, @OperationStatus, 'sp_FileDetail_PatchRecord', 1, 0, @Result);
		end;
        
        Start Transaction;
        Begin
			Set _ProcessingResult = 'Fail to update. Please contact to admin.';
			if exists(Select * from filedetail where FileId = _FileId) then
			begin
				Update filedetail Set
					ItemStatusId	=		_StatusId,
					PaidOn 			=		_UpdatedOn,
					UpdatedBy		=		_AdminId,
					UpdatedOn 		=		NOW()
				where FileId = _FileId;
			end;
            else
            begin
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Record not found in FileDetail table';
            end;
			end if;
            
            if exists(Select * from billdetail where FileDetailId  = _FileId) then
			begin
				Update billdetail Set
					PaidOn			=		_UpdatedOn,
					BillStatusId	=		_StatusId,
					UpdatedBy		=		_AdminId,
					UpdatedOn 		=		NOW()
				where FileDetailId  = _FileId;
			end;
            else
            begin
				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Record not found in FileDetail table';
            end;
			end if;
            
            Set _ProcessingResult = 'Record updated successfully.';
		End;
        Commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Files_GetById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Files_GetById`(
	_Type varchar(20),
	_Uid bigint,
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_Files_GetById', 1, 0, @Result);
		End;

        Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'f.CreatedOn, f.UpdatedOn Desc';
			End if;
            
            If (_Uid > 0) then
            begin
				Set _SearchString = Concat(_SearchString, ' AND f.FileOwnerId = ', _Uid, ' ');
            end;
            end if;
			
				Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					f.FilePath,
					f.FileName,
					f.FileExtension,
					s.Status,
                    coalesce(g.gststatus, 2) GstStatus,
					DATE_FORMAT(b.BillUpdatedOn, ''%d %M %Y'') GeneratedOn,
					DATE_FORMAT(b.PaidOn, ''%d %M %Y'') PaidOn,
					Convert(f.FileId, char) as FileUid,
					f.FileOwnerId,
					b.BillForMonth Month,
                    b.NoOfDaysAbsent Absents,
					b.TDS,
                    b.NoOfDays,
					b.PaidAmount SalaryAmount,
                    (Select TakeHomeByCandidate from employeemappedclients
						where EmployeeUid = e.EmployeeUid and ClientUid = c.ClientId) TakeHome,
					b.IGST,
					b.SGST,
					b.CGST,
					c.ClientName,
					c.ClientId,
					b.BillNo,
                    b.BillStatusId,
                    Concat(e.FirstName, '' '', e.LastName) Name,
                    Count(1) Over() as Total 
                    from (select * from employees
						 union distinct
                         select * from employee_archive) e
					Inner Join filedetail f on f.FileOwnerId = e.EmployeeUid
					left join itemstatus s on s.ItemStatusId = f.ItemStatusId
					left join billdetail b on b.FileDetailId = f.FileId
					left Join clients c on c.ClientId = b.ClientId
                    left Join gstdetail g on g.billno = b.BillNo
				where ', _SearchString, '
			)T where RowIndex between ', (_pageIndex - 1) * _pageSize + 1 ,' and ', (_pageIndex * _pageSize)) ;
            
			
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;	
            
            Select 
				concat(e.FirstName, ' ', e.LastName) Name,
				e.Mobile,
                e.Email
			from employees e 
            Where EmployeeUid = _Uid
            union all
            Select
				concat(e.FirstName, ' ', e.LastName) Name,
				e.Mobile,
                e.Email
			from employee_archive e 
            Where EmployeeUid = _Uid;
            
            Select 
				EmployeeUId,
				concat(e.FirstName, ' ', e.LastName) Name,
				e.Mobile,
                e.Email
			from employees e
            Union all
            Select 
				EmployeeUId,
				concat(e.FirstName, ' ', e.LastName) Name,
				e.Mobile,
                e.Email
			from employee_archive e;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Files_InsUpd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Files_InsUpd`(
	_FileId bigint,
	_FileOwnerId bigint,
	_FilePath varchar(500), 
	_FileName varchar(100),
	_FileExtension varchar(30),
	_ItemStatusId bigint,
    _UserTypeId int,
	_PaidOn datetime(6),
	_CreatedBy bigint,
	_UpdatedBy bigint,
	_CreatedOn datetime(6), 
	_UpdatedOn datetime(6)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_Files_InsUpd', 1, 0, @Result);
		end;
        Begin
			if not exists (select 1 from filedetail where FileId = _FileId) then
			Begin
				insert into filedetail 
							values
							(
								default,
								_FileOwnerId,
								_FilePath,
								_FileName,
								_FileExtension, 
								_ItemStatusId,
								_PaidOn,
                                _UserTypeId,
								_CreatedBy,
								null,
								now(), 
								null
							);
				End;
                Else
				Begin
					update filedetail set 	FileOwnerId 	= 	_FileOwnerId,
											FilePath 		= 	_FilePath,
											FileName		=	_FileName,
											FileExtension	=	_FileExtension, 
											UpdatedBy		=	_UpdatedBy,
											UpdatedOn		=	now
									where	FileId 			= 	_FileId;
				End;
                End if;
			End;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_fixed_salary_component_percent_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_fixed_salary_component_percent_get`(


	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_fixed_salary_component_percent_insupd', 1, 0, @Result);
			end;  
		
		select * from fixed_salary_component_percent;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_fixed_salary_component_percent_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_fixed_salary_component_percent_insupd`(


	_ComponentId varchar(10),
    _ComponentDescription varchar(250),
    _CalculateInPercentage bit,
    _PercentageValue decimal,
    _Amount decimal,
    _EmployeeContribution decimal,
    _EmployerContribution decimal,
    _IncludeInPayslip bit,
    _IsDeductions bit,
    _IsOpted bit,
    _IsActive bit,
    _Admin bigint,
    out _ProcessingResult varchar(100)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_fixed_salary_component_percent_insupd', 1, 0, @Result);
			end;  
		
		if not exists(select 1 from fixed_salary_component_percent where ComponentId = _ComponentId) then
        begin
			insert into fixed_salary_component_percent
            values(
				_ComponentId,
				_ComponentDescription,
                _CalculateInPercentage,
				_PercentageValue,
				_Amount,
				_EmployeeContribution,
				_EmployerContribution,
				_IncludeInPayslip,
                _IsDeductions,
				_IsOpted,
                _IsActive,
				utc_date(),
                null,
                _Admin,
                null
            );
            
            Set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update fixed_salary_component_percent set				
				ComponentDescription			=			_ComponentDescription,
				CalculateInPercentage			=			_CalculateInPercentage,
				PercentageValue					=			_PercentageValue,
				Amount							=			_Amount,
                EmployeeContribution			= 			_EmployeeContribution,
                EmployerContribution			=			_EmployerContribution,
                IncludeInPayslip				=			_IncludeInPayslip,
                IsDeductions					=			_IsDeductions,
                IsOpted							=			_IsOpted,
                IsActive						=			_IsActive,
				UpdatedBy						=			_Admin,
                UpdatedOn						=			utc_date()
            where ComponentId = _ComponentId;
            
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GenerateNewPassword` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GenerateNewPassword`(




	out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, @OperationStatus, 'sp_GenerateNewPassword', 1, 0, @Result);
	end;
    
    Set _ProcessingResult = Fn_Generate_newPassword();
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GenerateProcedures` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GenerateProcedures`(



	_TableName varchar(50)
)
Begin
	Declare n int default 0;
    Declare i int default 0;
    Declare QueryTextOrg text default '';
    Declare QueryText text default '';
    Declare exit handler for sqlexception
    Begin
		Drop table TblDetails;
        Drop table FinalTable;
        Get Diagnostics condition 1 @sqlstate = returned_sqlstate,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
        Select @Message;
    End;
    
    Set QueryTextOrg = '
    
Delimiter $$

Drop procedure if exists sp_{{@TableName}}_InsUpd $$
Create procedure sp_{{@TableName}}_InsUpd(
{{@ProcedureParameterWithDataType}}
)

Begin
	Set @UUid:= (CAST(UNIX_TIMESTAMP(CURTIME(3)) * 1000 AS unsigned));
	Set @OperationStatus = \'\';
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT(\'ERROR \', @errorno ,  \' (\', @sqlstate, \'): \', @errortext);
			Call sp_LogException(@Message, @OperationStatus, \'sp_{{@TableName}}_InsUpd\', 1, 0, @Result);
			Set _ProcessingResult = Concat(@Message, @Result);
		end;

		Set _ProcessingResult = \'No processing\';
		if not exists(Select 1 from {{@TableName}} where {{@FindCondition}})then
		Begin
			Set @OperationStatus = \'[{{@TableName}} insert] \';
			Insert into {{@TableName}} values(@UUid, {{@ProcedureParameterForInsert}});
							
			Set _ProcessingResult = @UUid;
		end;
		else
		begin
			Set @OperationStatus = \'[{{@TableName}} Update] \';
			Update {{@TableName}} Set {{@ProcedureParameterForUpdate}}
				where {{@FindCondition}};
					
			Set _ProcessingResult = \'Updated\';
		end;
		end if;
	End;
end;
$$
	';    
    
    Set @Indexer:=0;
    Create temporary table TblDetails(Indexer int, TableName varchar(100));
    Create temporary table FinalTable(RowIndex int, TableQualifiedName varchar(100), ColumnsNameString text null);
    Insert into TblDetails Select Indexer, table_name as TableName from (
			Select (@Indexer:= @Indexer + 1) As Indexer, table_name from information_schema.tables where table_schema = 'eds')T;
            
    SELECT Count(table_name) Tablecount FROM information_schema.tables where table_schema = 'eds' into n;
    
    
	Set i = 1;
    while i <= n do
    Begin

		Set QueryText = QueryTextOrg;
		Set @ProcedureParameterWithDataType = '';
        Set @ProcedureParameterForInsert = '';
        Set @ProcedureParameterForUpdate = '';
        Set @FindCondition = '';
        Set @TblName:= '';
        Select TD.TableName from TblDetails TD where TD.Indexer = i into @TblName;
        
        
        
        if(Lower(_TableName) = 'all')then
        Begin
			Begin 
			
				Select Lower(Group_Concat(Concat('\n\t_', column_name, ' ', column_type))) as ColumnsName from 
                information_schema.columns where 
				table_name = @TblName and Lower(column_name) <> 'createdon' and Lower(column_name) <> 'updatedon'
                and Lower(column_name) <> 'createdby' and Lower(column_name) <> 'updatedby'
				into @ProcedureParameterWithDataType;
				
				Select Concat(@ProcedureParameterWithDataType, ',\n\t_adminid varchar(50), \n\tout _ProcessingResult varchar(100)') 
				into @ProcedureParameterWithDataType;
                
                
			End;
		
			Begin 

				Select Lower(Group_Concat(' _', column_name)) as ColumnsName from information_schema.columns where 
				table_name = @TblName and Column_key <> 'PRI' into @ProcedureParameterForInsert;
				
				Select Replace(@ProcedureParameterForInsert, '_createdon', 'now()') into @ProcedureParameterForInsert;
				Select Replace(@ProcedureParameterForInsert, '_updatedon', 'NULL') into @ProcedureParameterForInsert;
				Select Replace(@ProcedureParameterForInsert, '_createdby', '_adminid') into @ProcedureParameterForInsert;
				Select Replace(@ProcedureParameterForInsert, '_updatedby', 'NULL') into @ProcedureParameterForInsert;
			
			End;
			
			Begin 
			
				Select Concat(Lower(column_name), ' = ', '_', Lower(column_name)) as ConditionColumn from 
                information_schema.columns where 
				table_name = @TblName and Column_key = 'PRI' into @FindCondition;

			End;
			
			Begin 
				
				Select Lower(Group_Concat(' ', Concat(column_name, ' = ', '_', column_name))) as ColumnsName 
				from information_schema.columns where table_name = @TblName and Column_key <> 'PRI' and 
				Lower(column_name) <> 'createdon' and Lower(column_name) <> 'createdby'
                and Lower(column_name) <> 'schooltenentid' into @ProcedureParameterForUpdate;
				
				Select Replace(@ProcedureParameterForUpdate, '_updatedon', 'now()') into @ProcedureParameterForUpdate;
				Select Replace(@ProcedureParameterForUpdate, '_updatedby', '_adminid') into @ProcedureParameterForUpdate;

			End;
			
			Select Replace(QueryText, '{{@ProcedureParameterWithDataType}}', @ProcedureParameterWithDataType) into QueryText;
			Select Replace(QueryText, '{{@ProcedureParameterForInsert}}', @ProcedureParameterForInsert) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@FindCondition}}', @FindCondition) into QueryText;
			Select Replace(QueryText, '{{@ProcedureParameterForUpdate}}', @ProcedureParameterForUpdate) into QueryText;
			
			Insert into FinalTable values(i, @TblName, QueryText);
		End;
        Else if(Lower(_TableName) = Lower(@TblName))then
        Begin
			Begin 
			
				Select Lower(Group_Concat(Concat('\n\t_', column_name, ' ', column_type))) as ColumnsName from information_schema.columns where 
				table_name = @TblName and Lower(column_name) <> 'createdon' and Lower(column_name) <> 'updatedon' 
                and Lower(column_name) <> 'createdby' and Lower(column_name) <> 'updatedby'
				into @ProcedureParameterWithDataType;
				
				Select Concat(@ProcedureParameterWithDataType, ',\n\t_adminid varchar(50), \n\tout _ProcessingResult varchar(100)') 
				into @ProcedureParameterWithDataType;
                
                
			End;
		
			Begin 

				Select Lower(Group_Concat(' _', column_name)) as ColumnsName from information_schema.columns where 
				table_name = @TblName and Column_key <> 'PRI' into @ProcedureParameterForInsert;
				
				Select Replace(@ProcedureParameterForInsert, '_createdon', 'now()') into @ProcedureParameterForInsert;
				Select Replace(@ProcedureParameterForInsert, '_updatedon', 'NULL') into @ProcedureParameterForInsert;
				Select Replace(@ProcedureParameterForInsert, '_createdby', '_adminid') into @ProcedureParameterForInsert;
				Select Replace(@ProcedureParameterForInsert, '_updatedby', 'NULL') into @ProcedureParameterForInsert;
                
                
			
			End;
			
			Begin 
			
				Select Concat(Lower(column_name), ' = ', '_', Lower(column_name)) as ConditionColumn from 
                information_schema.columns where 
				table_name = @TblName and Column_key = 'PRI' limit 1 into @FindCondition;
                
                

			End;
			
			Begin 
				
				Select Lower(Group_Concat(' ', Concat(column_name, ' = ', '_', column_name))) as ColumnsName 
				from information_schema.columns where table_name = @TblName and Column_key <> 'PRI' and 
				Lower(column_name) <> 'createdon' and Lower(column_name) <> 'createdby' 
                and Lower(column_name) <> 'schooltenentid' into @ProcedureParameterForUpdate;
				
				Select Replace(@ProcedureParameterForUpdate, '_updatedon', 'now()') into @ProcedureParameterForUpdate;
				Select Replace(@ProcedureParameterForUpdate, '_updatedby', '_adminid') into @ProcedureParameterForUpdate;
                
                

			End;			
            
            Select QueryText;
            
			Select Replace(QueryText, '{{@ProcedureParameterWithDataType}}', @ProcedureParameterWithDataType) into QueryText;
            Select Replace(QueryText, '{{@ProcedureParameterForInsert}}', @ProcedureParameterForInsert) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;
			Select Replace(QueryText, '{{@TableName}}', @TblName) into QueryText;            
			Select Replace(QueryText, '{{@FindCondition}}', @FindCondition) into QueryText;
			Select Replace(QueryText, '{{@ProcedureParameterForUpdate}}', @ProcedureParameterForUpdate) into QueryText;
			
            Select QueryText;
            
			Insert into FinalTable values(i, @TblName, QueryText);
			Set i = n;       
        End;
        End if;
        End if;
        
		Set i = i + 1;
		Set QueryText = '';
	end;
	end while;
    
    Select * from FinalTable;
    Drop table TblDetails;
    Drop table FinalTable;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_generate_attendance_initial_partition` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_generate_attendance_initial_partition`(

/*

	call sp_generate_attendance_initial_partition();

*/
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_generate_attendance_initial_partition', 1, 0, @Result);
	end;

	
    Set @partitionYear = Year(utc_timestamp());
	Set @SelectQuery = Concat('
		ALTER TABLE daily_attendance
		PARTITION BY RANGE (YEAR(AttendanceDate)) (
			PARTITION p', @partitionYear, + ' VALUES LESS THAN (', @partitionYear + 1 ,')
		)'
	);
    
	# select @SelectQuery;
	prepare SelectQuery from @SelectQuery;
	execute SelectQuery;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_generate_attendance_next_partition` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_generate_attendance_next_partition`(
	_PartitionYear int

/*

    call sp_generate_attendance_next_partition(2025);

*/
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_generate_attendance_next_partition', 1, 0, @Result);
	end;

	Set @SelectQuery = Concat('
		ALTER TABLE daily_attendance
		ADD PARTITION (
			PARTITION p', _PartitionYear, + ' VALUES LESS THAN (', _PartitionYear + 1 ,')
		)'
	);
    
	# select @SelectQuery;
	prepare SelectQuery from @SelectQuery;
	execute SelectQuery;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_generate_attendance_partition` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_generate_attendance_partition`(
	_PartitionYear int,
    _IsFirstPartition bit

/*

	call sp_generate_attendance_partition(2024, true);
    
    call sp_generate_attendance_partition(2025, false);

*/
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_generate_attendance_partition', 1, 0, @Result);
	end;

    Set @SelectQuery = '';

	if (_IsFirstPartition) then
    begin
		Set @SelectQuery = Concat('
			ALTER TABLE daily_attendance
			PARTITION BY RANGE (YEAR(AttendanceDate)) (
				PARTITION p', _PartitionYear, + ' VALUES LESS THAN (', _PartitionYear + 1 ,')
			)'
		);
	end;
    else
    begin
		Set @SelectQuery = Concat('
			ALTER TABLE daily_attendance
			ADD PARTITION (
				PARTITION p', _PartitionYear, + ' VALUES LESS THAN (', _PartitionYear + 1 ,')
			)'
		);
    end;
    end if;
    
	# select @SelectQuery;
	prepare SelectQuery from @SelectQuery;
	execute SelectQuery;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_generate_current_month_attandance` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_generate_current_month_attandance`(

	_AttendacenMonth Datetime



)
Begin
	Declare AttendaceData Json; 
    Set @OperationStatus = '';
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, @OperationStatus, 'sp_attendance_get', 1, 0, @Result);
		end;
        
        Set AttendaceData = JSON_ARRAY();
        Set @TotalDays = DAY(LAST_DAY(_AttendacenMonth));
        Set @Index = 1;
        Set @StartDate = LAST_DAY(_AttendacenMonth - interval 1 month);
        Set @InputData = '';
        
        While @Index <= @TotalDays Do
        Begin
			Set @StartDate = @StartDate + interval 1 day;
			Set AttendaceData = JSON_ARRAY_APPEND(
				AttendaceData, 
                '$', 
                JSON_OBJECT(
					'AttendanceId', 0,
                    'ClientId', 0,
                    'IsHoliday', 0,
                    'IsOnLeave', 0,
                    'LeaveId', 0,
					'UserTypeId', 1,
					'AttendanceDay', @StartDate,
					'Hours', Case When DAYOFWEEK(@StartDate) = 1 Or DAYOFWEEK(@StartDate) = 7 then 0 Else 480 end,
					'AttendenceStatus', 4,
					'UserComments', '',
					'EmployeeUid', 0
				)
			);
            
            Set @Index = @Index + 1;
        end;
        End while;
        
        Insert into attendance(EmployeeId, UserTypeId, AttendanceDetail, TotalDays, TotalWeekDays, DaysPending, 
        TotalBurnedMinutes, ForYear, ForMonth, SubmittedOn, UpdatedOn, SubmittedBy, UpdatedBy)
		Select
			e.EmployeeUid,
            1,
			AttendaceData,
            @TotalDays,            
            (Select WeekDaysCount(DATE_SUB(_AttendacenMonth, INTERVAL DAYOFMONTH(_AttendacenMonth) - 1 DAY), Last_Day(_AttendacenMonth))),
            0,
            0,
            Year(_AttendacenMonth),
            Month(_AttendacenMonth),
            utc_timestamp(),
            null,
            1,
            null
		from employees e where IsActive = 1;        
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_getAll_Project` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_getAll_Project`(
	   

    
 
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_getAll_Project', 1, 0, @Result);
		end;
        
        select * from project;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_GetInfo_ByMobileOrEmail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_GetInfo_ByMobileOrEmail`(


	_Mobile varchar(20),
	_Email varchar(50),
    _UserTypeId int
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_GetInfo_ByMobileOrEmail', 1, 0, @Result);
			end;
            
			Begin				
				CASE 
					WHEN _UserTypeId = 1
                    Then 
						Begin
							Select e.* from employees e where e.Mobile = _Mobile OR e.Email = _Email;
                        End;
					WHEN _UserTypeId = 2
					Then
						Begin
							Select c.* from clients c where c.MobileNo = _Mobile OR e.Email = _Email;
                        End;
                    WHEN _UserTypeId = 3
					Then
						Begin
							Select c.Name, c.Email_ID, c.Phone_Number from professionalcandidates c where c.Mobile = _Mobile OR c.Email = _Email;
                        End;
					End Case;
			End;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_get_employee_sample` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_get_employee_sample`(



	_RecordCount int
)
Begin
	set @i = 1;
    select T.*, n.PersonNames, '', n.EmailId, n.MobileNo, 
		concat('father_', n.RowIndex) FatherName, 
		concat('mother_', n.RowIndex) MotherName from (
		select
			e.IsActive,
			p.SecondaryMobile, 
			e.LeavePlanId,
			p.SpouseName, 
			p.State, 
			p.City, 
			p.Pincode, 
			p.Address, 
			f.PANNo, 
			f.AadharNo, 
			f.AccountNumber, 
			f.BankName, 
			f.IFSCCode, 
			f.Domain, 
			f.Specification, 
			f.ExprienceInYear, 
			f.LastCompanyName, 
			p.IsPermanent, 
			
			f.BranchName, 
			m.ClientName as AllocatedClientName, 
			'' as ProfileImgPath, 
			e.CreatedOn as DateOfJoining, 
			p.DOB, 
			0 as FileId, 
			2 as AccessLevelId, 
			2 as UserTypeId,
			e.ReportingManagerId, 
			e.DesignationId, 
			c.OrganizationId, 
			c.CompanyId, 
			0 as CTC, 
			p.Gender, 
			'' as OldFileName, 
			1 as WorkShiftId from employees e
		inner join company c on e.CompanyId = c.CompanyId
		inner join employeepersonaldetail p on e.EmployeeUid = p.EmployeeUid
		inner join employeeprofessiondetail f on f.EmployeeUid = p.EmployeeUid
		left join employeemappedclients m on f.EmployeeUid = m.EmployeeUid
		where e.EmployeeUid = 3
	)T, names as n order by n.MobileNo limit _RecordCount;
	
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_get_leave_plan_type_by_leaveid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_get_leave_plan_type_by_leaveid`(

  _LeaveId int
  
  /*
  
	call sp_get_leave_plan_type_by_leaveid('2024-05-05 18:30:00', '2024-05-11 18:30:00')
  
*/
  
)
BEGIN
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_get_leave_plan_type_by_leaveid', 1, 0, @Result);
	end;

	set @leaveplantypeid = 0;
    select LeaveTypeId into @leaveplantypeid from leave_request_notification
	where RequestStatusId = 9 and LeaveRequestNotificationId = _LeaveId;
    
    select * from leave_plans_type where LeavePlanTypeId = @leaveplantypeid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_gstdetail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_gstdetail_insupd`(
	_gstId bigint,
    _billno varchar(20),
    _gststatus int,
    _paidon datetime,
    _paidby bigint,
    _amount double,
    _fileId bigint,
    out _ProcessingResult varchar(100)


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_gstdetail_insupd', 1, 0, @Result);
		End;

		Set _ProcessingResult = "";
        Begin
			If not exists(Select 1 from gstdetail where billno = _billno)then
            begin
				Insert into gstdetail 
                Values(
					default,
                    _billno,
					_gststatus,
					_paidon,
					_paidby,
					_amount,
					_fileId
                );
                
                Set _ProcessingResult = "GST status record inserted successfully";
            end;
            else
            begin
				Update gstdetail Set
                    billno			=		_billno,
					gststatus		=		_gststatus,
					paidon			=		_paidon,
					paidby			=		_paidby,
					amount			=		_amount
                Where billno = _billno;
                
                Set _ProcessingResult = "GST status record updated successfully";
            end;
            end if;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_hike_bonus_salary_adhoc_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_hike_bonus_salary_adhoc_filter`(
	_SearchString varchar(250),
	_SortBy varchar(50),
	_PageIndex int,
	_PageSize int

	# call sp_hike_bonus_salary_adhoc_filter('1=1 and ForYear = 2023 and ForMonth = 6 and IsSalaryOnHold = true', null, 1, 10)
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_hike_bonus_salary_adhoc_filter', 1, 0, @Result);
		End;

        Begin
			If(_SortBy is NULL OR _SortBy = '') then
            begin
				Set _SortBy = ' h.ForYear DESC';
			end;
			End if;

			Set @SelectQuery = CONCAT('Select * from (
			Select 
				Row_Number() over(Order by ', _SortBy, ') as RowIndex,
				h.*,
                Concat(e.FirstName, '' '', e.LastName) FullName,
				Count(1) Over() as Total 
				from hike_bonus_salary_adhoc h
                left join employees e on e.EmployeeUid = h.EmployeeId
			where ', _SearchString, '
			)T where RowIndex between ', (_PageIndex - 1) * _PageSize + 1 ,' and ', (_PageIndex * _PageSize)) ;
            
			
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_hike_bonus_salary_adhoc_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_hike_bonus_salary_adhoc_get`(
	_ForYear int, 
    _ForMonth int,
    _CompanyId int

/*

	call sp_hike_bonus_salary_adhoc_get(2024, 3, 1);

*/
)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
													
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
            Rollback;            
			Call sp_LogException(@Message, '', 'sp_hike_bonus_salary_adhoc_get', 1, 0, @Result);
		End;
		
        select * from hike_bonus_salary_adhoc h
        where h.ForYear = _ForYear
        and h.ForMonth = _ForMonth
        and h.CompanyId = _CompanyId
        and h.ProgressState = 9;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_hike_bonus_salary_adhoc_ins_update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_hike_bonus_salary_adhoc_ins_update`(
	_SalaryAdhocId bigint,
	_SalaryRunConfigProcessingId int,
	_EmployeeId bigint,
    _ProcessStepId int,
    _FinancialYear int,
	_OrganizationId int,
	_CompanyId int,
	_IsPaidByCompany bit,
    _IsPaidByEmployee bit,
	_IsFine bit,
	_IsHikeInSalary bit,
	_IsBonus bit,
    _IsReimbursment bit,
	_IsSalaryOnHold bit, 
	_IsArrear bit,
    _IsOvertime bit,
    _IsCompOff bit,
    _OTCalculatedOn varchar(10),
    _AmountInPercentage decimal(10, 0),
	_Amount decimal(10, 0),
	_IsActive bit,
	_PaymentActionType varchar(50),
	_Comments varchar(500),
    _Status int,
	_ForYear int,
	_ForMonth int,
    _ProgressState int,
    out _ProcessingResult varchar(100)
/*

	set @result= '';
	call sp_salary_hike_ins_update (1, 1, 1, 1, 1, '2023-10-10', '2023-10-10', 1, 10.0, 100, 1, 'BS', @result);
	select @result;

*/

)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_hike_bonus_salary_adhoc_ins_update', 1, 0, @Result);
		End;
        
        if (_SalaryAdhocId = 0) then
        begin
			Select SalaryAdhocId into _SalaryAdhocId from hike_bonus_salary_adhoc 
            where EmployeeId = _EmployeeId 
            and ForYear = _ForYear
            and ForMonth = _ForMonth;
        end;
        end if;
        
		Set _ProcessingResult = '';
        if not exists(select 1 from hike_bonus_salary_adhoc where SalaryAdhocId = _SalaryAdhocId) then
        begin
            set @salaryAdhocId = 0;
            select SalaryAdhocId into @salaryAdhocId from hike_bonus_salary_adhoc
            order by SalaryAdhocId desc limit 1;
            
            set @salaryAdhocId = @salaryAdhocId + 1;
            
			insert into hike_bonus_salary_adhoc values(
				@salaryAdhocId,
				_SalaryRunConfigProcessingId,
				_EmployeeId,
                _ProcessStepId,
                _FinancialYear,
				_OrganizationId,
				_CompanyId,
				_IsPaidByCompany,
                _IsPaidByEmployee,
				_IsFine,
				_IsHikeInSalary,
				_IsBonus,
				_IsReimbursment,
				_IsSalaryOnHold, 
				_IsArrear,
                _IsOvertime,
                _IsCompOff,
                _OTCalculatedOn,
				_Amount,
                _AmountInPercentage,
				_IsActive,
				_PaymentActionType,
				_Comments,
                _Status,
				_ForYear,
				_ForMonth,
                _ProgressState
			);
            
            Set _ProcessingResult = 'inserted';
        end;
        else 
        begin
			update hike_bonus_salary_adhoc set
				IsPaidByCompany             =           _IsPaidByCompany,
                ProcessStepId				=			_ProcessStepId,
                IsPaidByEmployee			=			_IsPaidByEmployee,
                FinancialYear				=			_FinancialYear,
				IsFine                      =           _IsFine,
				IsHikeInSalary              =           _IsHikeInSalary,
				IsBonus                     =           _IsBonus,
				IsReimbursment				=			_IsReimbursment,
				IsSalaryOnHold				=			_IsSalaryOnHold,
				IsArrear					= 			_IsArrear,
				Amount                      =           _Amount,
                AmountInPercentage			=			_AmountInPercentage,
				IsActive                    =           _IsActive,
				PaymentActionType           =           _PaymentActionType,
				Comments     	          	=           _Comments,
                Status						=			_Status,
				ForYear                		=           _ForYear,
				ForMonth               		=           _ForMonth,
                IsCompOff					=			_IsCompOff,
                OTCalculatedOn				=			_OTCalculatedOn,
                IsOvertime					=			_IsOvertime,
                ProgressState				=			_ProgressState,
				SalaryRunConfigProcessingId	=			_SalaryRunConfigProcessingId
			where SalaryAdhocId 			= 			_SalaryAdhocId;
            
           Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_run_config_processing_getby_month_year` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_run_config_processing_getby_month_year`(
	   
    _ForMonth int,
    _ForYear int,
    _CompanyId int
    
    # call sp_salary_run_config_processing_getby_month_year(6, 2023, 1)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_salary_run_config_processing_getby_month_year', 1, 0, @Result);
		end;
        
        select * from salary_run_config_processing
        where ForMonth = _ForMonth and ForYear = _ForYear
        and CompanyId = _CompanyId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_run_config_processing_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_run_config_processing_insupd`(
	   
	_SalaryRunConfigProcessingId int,
    _ForMonth int,
    _ForYear int,
    _ProcessingStatus int,
    _CompanyId int,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_salary_run_config_processing_insupd', 1, 0, @Result);
		end;
        
        If not exists (Select 1 from salary_run_config_processing Where SalaryRunConfigProcessingId = _SalaryRunConfigProcessingId) then
		Begin
			set @salaryRunConfigProcessingId = 0;
			select SalaryRunConfigProcessingId from salary_run_config_processing order by SalaryRunConfigProcessingId Desc limit 1 into @salaryRunConfigProcessingId;
			set @salaryRunConfigProcessingId = @salaryRunConfigProcessingId + 1;

			Insert into salary_run_config_processing Values (
					@salaryRunConfigProcessingId,
					_ForMonth,
					_ForYear,
					_ProcessingStatus,
					_CompanyId
			);
			
			Set _ProcessingResult = 'inserted';
		End;
		Else
		Begin
			Update salary_run_config_processing SET 
					ForMonth								=					_ForMonth,
					ForYear									=					_ForYear,
					ProcessingStatus						=					_ProcessingStatus
			Where 	SalaryRunConfigProcessingId 			= 			_SalaryRunConfigProcessingId;
			
			Set _ProcessingResult = 'updated';
		End;
		End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_hike_bonus_salary_adhoc_taxdetail_ins_update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_hike_bonus_salary_adhoc_taxdetail_ins_update`(
	_SalaryAdhocId bigint,
	_EmployeeId bigint,
    _ProcessStepId int,
    _FinancialYear int,
	_OrganizationId int,
	_CompanyId int,
	_IsPaidByCompany bit,
    _IsPaidByEmployee bit,
	_IsFine bit,
	_IsHikeInSalary bit,
	_IsBonus bit,
    _IsReimbursment bit,
	_IsSalaryOnHold bit, 
	_IsArrear bit,
    _IsOvertime bit,
    _IsCompOff bit,
    _OTCalculatedOn varchar(10),
    _AmountInPercentage decimal(10, 0),
	_Amount decimal(10, 0),
	_IsActive bit,
	_PaymentActionType varchar(50),
	_Comments varchar(500),
    _Status int,
	_ForYear int,
	_ForMonth int,
    _ProgressState int,
    _TaxDetail json,
    out _ProcessingResult varchar(100)
/*

	set @result= '';
	call sp_salary_hike_ins_update (1, 1, 1, 1, 1, '2023-10-10', '2023-10-10', 1, 10.0, 100, 1, 'BS', @result);
	select @result;

*/

)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_hike_bonus_salary_adhoc_ins_update', 1, 0, @Result);
		End;
        
        if (_SalaryAdhocId = 0) then
        begin
			Select SalaryAdhocId into _SalaryAdhocId from hike_bonus_salary_adhoc 
            where EmployeeId = _EmployeeId 
            and ForYear = _ForYear
            and ForMonth = _ForMonth;
        end;
        end if;
        
		Set _ProcessingResult = '';
        if not exists(select 1 from hike_bonus_salary_adhoc where SalaryAdhocId = _SalaryAdhocId) then
        begin
            set @salaryAdhocId = 0;
            select SalaryAdhocId into @salaryAdhocId from hike_bonus_salary_adhoc
            order by SalaryAdhocId desc limit 1;
            
            set @salaryAdhocId = @salaryAdhocId + 1;

			set @salaryRunConfigProcessingId = 0;
            select SalaryRunConfigProcessingId into @salaryRunConfigProcessingId from salary_run_config_processing
            where ForYear = _ForYear
            and ForMonth = _ForMonth;
            
			insert into hike_bonus_salary_adhoc values(
				@salaryAdhocId,
				@salaryRunConfigProcessingId,
				_EmployeeId,
                _ProcessStepId,
                _FinancialYear,
				_OrganizationId,
				_CompanyId,
				_IsPaidByCompany,
                _IsPaidByEmployee,
				_IsFine,
				_IsHikeInSalary,
				_IsBonus,
				_IsReimbursment,
				_IsSalaryOnHold, 
				_IsArrear,
                _IsOvertime,
                _IsCompOff,
                _OTCalculatedOn,
				_Amount,
                _AmountInPercentage,
				_IsActive,
				_PaymentActionType,
				_Comments,
                _Status,
				_ForYear,
				_ForMonth,
                _ProgressState
			);
        end;
        else 
        begin
			update hike_bonus_salary_adhoc set
				IsPaidByCompany             =           _IsPaidByCompany,
                ProcessStepId				=			_ProcessStepId,
                IsPaidByEmployee			=			_IsPaidByEmployee,
                FinancialYear				=			_FinancialYear,
				IsFine                      =           _IsFine,
				IsHikeInSalary              =           _IsHikeInSalary,
				IsBonus                     =           _IsBonus,
				IsReimbursment				=			_IsReimbursment,
				IsSalaryOnHold				=			_IsSalaryOnHold,
				IsArrear					= 			_IsArrear,
				Amount                      =           _Amount,
                AmountInPercentage			=			_AmountInPercentage,
				IsActive                    =           _IsActive,
				PaymentActionType           =           _PaymentActionType,
				Comments     	          	=           _Comments,
                Status						=			_Status,
				ForYear                		=           _ForYear,
				ForMonth               		=           _ForMonth,
                IsCompOff					=			_IsCompOff,
                OTCalculatedOn				=			_OTCalculatedOn,
                IsOvertime					=			_IsOvertime,
                ProgressState				=			_ProgressState
			where SalaryAdhocId 			= 			_SalaryAdhocId;
        end;
        end if;
        
        set @salaryDetailId = 0;
        select SalaryDetailId into @salaryDetailId from employee_salary_detail
        where EmployeeId = _EmployeeId 
        and FinancialStartYear = _FinancialYear;
        
        if (@salaryDetailId > 0) then
			update employee_salary_detail set	
				TaxDetail	 =		_TaxDetail
			where SalaryDetailId = @salaryDetailId;
        end if;
        
	   Set _ProcessingResult = 'updated';
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_incometax_slab_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_incometax_slab_get`(


)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_incometax_slab_get', 1, 0, @Result);
		end;  
		        
        Select * from incometax_slab;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_insert_byjson` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_insert_byjson`(
 
 
 
    _catagory varchar(100)
 )
Begin
	DECLARE i      INT DEFAULT  0;
	DECLARE jCount INT DEFAULT -1;
 	Set @OperationStatus = '';
 	Begin
 		Declare exit handler for sqlexception
 		Begin
			
 			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
 										@errorno = MYSQL_ERRNO,
 										@errortext = MESSAGE_TEXT;
 										
 			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
 			Call sp_LogException(@Message, @OperationStatus, 'sp_menu_insupd', 1, 0, @Result);
 		end;

		Drop table if exists tmp;
		CREATE TEMPORARY TABLE tmp( ou_from INT, out_to INT );

		SET @mapJSON = '[{"from":12,"to":0},{"from":11,"to":-1},{"from":1,"to":1},{"a":"teste"}]' ;
		SET jCount = jCount + JSON_LENGTH( @mapJSON, '$');

		WHILE ( i <= jCount ) DO
			INSERT INTO tmp(ou_from , out_to) 
			VALUES( 
				JSON_EXTRACT(@mapJSON, CONCAT( '$[', i, '].from') ), 
                JSON_EXTRACT(@mapJSON, CONCAT( '$[', i, '].to'  ) )
			);
			SET i = i + 1;
		END WHILE;

		SELECT ou_from AS 'from', out_to AS 'to' FROM tmp;
 	End;
 end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_accrual_cycle_data_by_employee` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_accrual_cycle_data_by_employee`(

	_EmployeeId bigint,
    _PageSize int,
    _OffsetIndex int,
    _Year int
	
    # call sp_leave_accrual_cycle_data_by_employee(0, 6000, 0, 2023)

)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;										
            
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_leave_accrual_cycle_data_by_employee', 1, 0, @Result);
		End;

        select e.EmployeeUid, e.LeavePlanId, r.LeaveRequestId, r.LeaveQuotaDetail, e.CreatedOn, e.CompanyId, c.TimezoneName from employees e
        left join employee_leave_request r on r.EmployeeId = e.EmployeeUid
        left join company_setting c on c.CompanyId = e.CompanyId
        where 1=1 
        and r.Year = _Year 
        and
        CASE
			WHEN _EmployeeId > 0 THEN e.EmployeeUid = _EmployeeId
            ELSE 1
        END
        LIMIT _PageSize OFFSET _OffsetIndex;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_accrual_cycle_master_data` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_accrual_cycle_master_data`(
	 _CompanyId int

/*

	call sp_leave_accrual_cycle_master_data(1)

*/

)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;										
		
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_leave_accrual_cycle_master_data', 1, 0, @Result);
	End;
	
	drop table if exists leave_plan_table;
	
	Create temporary table leave_plan_table 
	select * from leave_plan
	where CompanyId = _CompanyId;
    
    select * from leave_plan_table;
    
    select * from (
		select distinct LeavePlanTypeId from leave_plan_table p,
		json_table (
			p.AssociatedPlanTypes,
			'$[*]'
			Columns(
				LeavePlanTypeId int path '$.LeavePlanTypeId'
			)
		) as JsonTable
	) as T
    inner join leave_plans_type l on l.LeavePlanTypeId = T.LeavePlanTypeId;
	
	
	
	select * from company_setting
	where companyId = _CompanyId;
	
	drop table if exists leave_plan_table;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_accrual_InsUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_accrual_InsUpdate`(	
	_LeaveAccrualId int,
    _LeavePlanTypeId int,
    _CanApplyEntireLeave bit,
    _IsLeaveAccruedPatternAvail bit,
	_JoiningMonthLeaveDistribution json,
    _ExitMonthLeaveDistribution json,
    _LeaveDistributionSequence varchar(45),
    _LeaveDistributionAppliedFrom decimal,
    _IsLeavesProratedForJoinigMonth bit,
    _IsLeavesProratedOnNotice bit,
    _IsNotAllowProratedOnNotice bit,
    _IsNoLeaveOnNoticePeriod bit,
    _IsVaryOnProbationOrExprience bit,
	_IsAccrualStartsAfterJoining bit,
	_IsAccrualStartsAfterProbationEnds bit,
	_AccrualDaysAfterJoining decimal,
	_AccrualDaysAfterProbationEnds decimal,
    
    _IsImpactedOnWorkDaysEveryMonth bit,
    _WeekOffAsAbsentIfAttendaceLessThen decimal,
    _HolidayAsAbsentIfAttendaceLessThen decimal,    
    _CanApplyForFutureDate bit,
	_IsExtraLeaveBeyondAccruedBalance bit,
    _IsNoExtraLeaveBeyondAccruedBalance bit,
    _NoOfDaysForExtraLeave decimal,
	_IsAccrueIfHavingLeaveBalance bit,
    _AllowOnlyIfAccrueBalanceIsAlleast decimal,
    _IsAccrueIfOnOtherLeave bit,
    _NotAllowIfAlreadyOnLeaveMoreThan decimal,    
    _RoundOffLeaveBalance bit,
    _ToNearestHalfDay bit,
    _ToNearestFullDay bit,
    _ToNextAvailableHalfDay bit,
    _ToNextAvailableFullDay bit,
    _ToPreviousHalfDay bit,    
    _DoesLeaveExpireAfterSomeTime bit,
    _AfterHowManyDays decimal,
    out _ProcessingResult varchar(100)
)
Begin
	Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_accrual_InsUpdate', 1, 0, @Result);
		end;


		if not exists (select 1 from leave_accrual where LeaveAccrualId = _LeaveAccrualId ) then
		Begin
			set @leaveTypeId = 0;
			select LeaveAccrualId from leave_accrual order by LeaveAccrualId Desc limit 1 into @leaveTypeId;
			set @leaveTypeId = @leaveTypeId + 1;
			
			Insert into leave_accrual values(
					@leaveTypeId,
					_LeavePlanTypeId,
					_CanApplyEntireLeave,
					_IsLeaveAccruedPatternAvail,
					_JoiningMonthLeaveDistribution,
					_ExitMonthLeaveDistribution,
					_LeaveDistributionSequence,
					_LeaveDistributionAppliedFrom,
					_IsLeavesProratedForJoinigMonth,
					_IsLeavesProratedOnNotice,
					_IsNotAllowProratedOnNotice,
					_IsNoLeaveOnNoticePeriod,
					_IsVaryOnProbationOrExprience,
                    _IsAccrualStartsAfterJoining,
					_IsAccrualStartsAfterProbationEnds,
					_AccrualDaysAfterJoining,
					_AccrualDaysAfterProbationEnds,
					
					_IsImpactedOnWorkDaysEveryMonth,
					_WeekOffAsAbsentIfAttendaceLessThen,
					_HolidayAsAbsentIfAttendaceLessThen,    
					_CanApplyForFutureDate,
					_IsExtraLeaveBeyondAccruedBalance,
					_IsNoExtraLeaveBeyondAccruedBalance,
					_NoOfDaysForExtraLeave,
					_IsAccrueIfHavingLeaveBalance,
					_AllowOnlyIfAccrueBalanceIsAlleast,
					_IsAccrueIfOnOtherLeave,
					_NotAllowIfAlreadyOnLeaveMoreThan,    
					_RoundOffLeaveBalance,
					_ToNearestHalfDay,
					_ToNearestFullDay,
					_ToNextAvailableHalfDay,
					_ToNextAvailableFullDay,
					_ToPreviousHalfDay,    
					_DoesLeaveExpireAfterSomeTime,
					_AfterHowManyDays
				);
				
				set _ProcessingResult = @leaveTypeId;
		end;
		else
		Begin
			update leave_accrual set
							LeavePlanTypeId							=			_LeavePlanTypeId,
							CanApplyEntireLeave						=			_CanApplyEntireLeave,
							IsLeaveAccruedPatternAvail				=			_IsLeaveAccruedPatternAvail,
							JoiningMonthLeaveDistribution			=			_JoiningMonthLeaveDistribution,
							ExitMonthLeaveDistribution				=			_ExitMonthLeaveDistribution,
							LeaveDistributionSequence				=			_LeaveDistributionSequence,
							LeaveDistributionAppliedFrom			=			_LeaveDistributionAppliedFrom,
							IsLeavesProratedForJoinigMonth			=			_IsLeavesProratedForJoinigMonth,
							IsLeavesProratedOnNotice				=			_IsLeavesProratedOnNotice,
							IsNotAllowProratedOnNotice				=			_IsNotAllowProratedOnNotice,
							IsNoLeaveOnNoticePeriod					=			_IsNoLeaveOnNoticePeriod,
							IsVaryOnProbationOrExprience			=			_IsVaryOnProbationOrExprience,
							IsAccrualStartsAfterJoining				=			_IsAccrualStartsAfterJoining,
							IsAccrualStartsAfterProbationEnds		=			_IsAccrualStartsAfterProbationEnds,
							AccrualDaysAfterJoining					=			_AccrualDaysAfterJoining,
							AccrualDaysAfterProbationEnds			=			_AccrualDaysAfterProbationEnds,
							
							IsImpactedOnWorkDaysEveryMonth			=			_IsImpactedOnWorkDaysEveryMonth,
							WeekOffAsAbsentIfAttendaceLessThen		=			_WeekOffAsAbsentIfAttendaceLessThen,
							HolidayAsAbsentIfAttendaceLessThen		=			_HolidayAsAbsentIfAttendaceLessThen,    
							CanApplyForFutureDate					=			_CanApplyForFutureDate,
							IsExtraLeaveBeyondAccruedBalance		=			_IsExtraLeaveBeyondAccruedBalance,
							IsNoExtraLeaveBeyondAccruedBalance		=			_IsNoExtraLeaveBeyondAccruedBalance,
							NoOfDaysForExtraLeave					=			_NoOfDaysForExtraLeave,
							IsAccrueIfHavingLeaveBalance			=			_IsAccrueIfHavingLeaveBalance,
							AllowOnlyIfAccrueBalanceIsAlleast		=			_AllowOnlyIfAccrueBalanceIsAlleast,
							IsAccrueIfOnOtherLeave					=			_IsAccrueIfOnOtherLeave,
							NotAllowIfAlreadyOnLeaveMoreThan		=			_NotAllowIfAlreadyOnLeaveMoreThan,    
							RoundOffLeaveBalance					=			_RoundOffLeaveBalance,
							ToNearestHalfDay						=			_ToNearestHalfDay,
							ToNearestFullDay						=			_ToNearestFullDay,
							ToNextAvailableHalfDay					=			_ToNextAvailableHalfDay,
							ToNextAvailableFullDay					=			_ToNextAvailableFullDay,
							ToPreviousHalfDay						=			_ToPreviousHalfDay,    
							DoesLeaveExpireAfterSomeTime			=			_DoesLeaveExpireAfterSomeTime,
							AfterHowManyDays						=			_AfterHowManyDays
					where 	LeaveAccrualId							=			_LeaveAccrualId;
								
				set _ProcessingResult = _LeaveAccrualId;	
		end;
		end if;
    end;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_and_lop_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_and_lop_get`(
	_FromDate datetime,
    _ToDate datetime,
    _CompanyId int

	# call sp_leave_and_lop_get('2023-04-01 18:30:00', '2023-04-30 18:30:00', 1)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_leave_and_lop_get', 1, 0, @Result);
	end;
    
		Select n.*, l.PlanName, e.FirstName, e.LastName from leave_request_notification n
        left join leave_plans_type l on l.LeavePlanTypeId = n.LeaveTypeId
        left join employees e on e.EmployeeUid = n.EmployeeId;
	
		select * from daily_attendance
		where AttendanceDate between _FromDate And _ToDate;
        
        select * from attendance_setting where CompanyId = _CompanyId;
    
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_apply_detail_InsUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_apply_detail_InsUpdate`(	
	_LeaveApplyDetailId int,
    _LeavePlanTypeId int,
	_LeavePlanId int,
    _IsAllowForHalfDay bit,
    _EmployeeCanSeeAndApplyCurrentPlanLeave bit,
    _RuleForLeaveInNotice json,
    _ApplyPriorBeforeLeaveDate int,
    _BackDateLeaveApplyNotBeyondDays int,
    _RestrictBackDateLeaveApplyAfter int,
    _CurrentLeaveRequiredComments bit,
    _ProofRequiredIfDaysExceeds bit,
    _NoOfDaysExceeded int,
    out _ProcessingResult varchar(100)
)
Begin
	Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_apply_detail_InsUpdate', 1, 0, @Result);
		end;


		if not exists (select 1 from leave_apply_detail where LeaveApplyDetailId = _LeaveApplyDetailId ) then
		Begin
			set @leaveApplyDetailId = 0;
			select LeaveApplyDetailId from leave_apply_detail order by LeaveApplyDetailId Desc limit 1 into @leaveApplyDetailId;
			set @leaveApplyDetailId = @leaveApplyDetailId + 1;
            
			Insert into leave_apply_detail values (
				@leaveApplyDetailId,
				_LeavePlanTypeId,
                _LeavePlanId,
				_IsAllowForHalfDay,
				_EmployeeCanSeeAndApplyCurrentPlanLeave,
				_RuleForLeaveInNotice,
				_ApplyPriorBeforeLeaveDate,
				_BackDateLeaveApplyNotBeyondDays,
				_RestrictBackDateLeaveApplyAfter,
				_CurrentLeaveRequiredComments,
				_ProofRequiredIfDaysExceeds,
				_NoOfDaysExceeded
			);
            
			set _ProcessingResult = @leaveApplyDetailId;
		end;
		else
		Begin
			update leave_apply_detail set
					LeavePlanTypeId							=	_LeavePlanTypeId,
					IsAllowForHalfDay						=	_IsAllowForHalfDay,
					EmployeeCanSeeAndApplyCurrentPlanLeave 	= 	_EmployeeCanSeeAndApplyCurrentPlanLeave,
					RuleForLeaveInNotice					=	_RuleForLeaveInNotice,
					ApplyPriorBeforeLeaveDate				=	_ApplyPriorBeforeLeaveDate,
					BackDateLeaveApplyNotBeyondDays			=	_BackDateLeaveApplyNotBeyondDays,
					RestrictBackDateLeaveApplyAfter			=	_RestrictBackDateLeaveApplyAfter,
					CurrentLeaveRequiredComments			=	_CurrentLeaveRequiredComments,
					ProofRequiredIfDaysExceeds				=	_ProofRequiredIfDaysExceeds,
					NoOfDaysExceeded						=	_NoOfDaysExceeded,
                    LeavePlanId								=	_LeavePlanId
			where 	LeaveApplyDetailId						=	_LeaveApplyDetailId;
								
				set _ProcessingResult = _LeaveApplyDetailId;	
		end;
		end if;
    end;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_approval_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_approval_insupd`(
	   
    _LeaveApprovalId int,
	_LeavePlanTypeId int,
    _IsLeaveRequiredApproval bit,
    _ApprovalLevels int,
    _ApprovalWorkFlowId int,
    _IsRequiredAllLevelApproval bit,
    _CanHigherRankPersonsIsAvailForAction bit,
    _IsPauseForApprovalNotification bit,
    _IsReportingManageIsDefaultForAction bit,
    _LeavePlanId int,
    out _ProcessingResult varchar(50)
    
 
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_leave_approval_insupd', 1, 0, @Result);
	end;
	
	If not exists (Select 1 from leave_approval Where LeaveApprovalId = _LeaveApprovalId) then
	Begin
		set @leaveApprovalId = 0;
		select LeaveApprovalId into @leaveApprovalId from leave_approval order by LeaveApprovalId desc limit 1;
		set @leaveApprovalId = @leaveApprovalId + 1;

		Insert into leave_approval Values (
			@leaveApprovalId,
			_LeavePlanTypeId,
			_LeavePlanId,
			_IsLeaveRequiredApproval,
			_ApprovalLevels,
			_ApprovalWorkFlowId,
			_IsRequiredAllLevelApproval,
			_CanHigherRankPersonsIsAvailForAction,
			_IsPauseForApprovalNotification,
			_IsReportingManageIsDefaultForAction
		);
		
		Set _ProcessingResult = @leaveApprovalId;
	End;
	Else
	Begin
		Update leave_approval SET 
			LeavePlanTypeId								=				_LeavePlanTypeId,
			IsLeaveRequiredApproval						=				_IsLeaveRequiredApproval,
			ApprovalLevels								=				_ApprovalLevels,
			ApprovalWorkFlowId							=				_ApprovalWorkFlowId,
			IsRequiredAllLevelApproval					=				_IsRequiredAllLevelApproval,
			CanHigherRankPersonsIsAvailForAction		=				_CanHigherRankPersonsIsAvailForAction,
			IsPauseForApprovalNotification				=				_IsPauseForApprovalNotification,
			IsReportingManageIsDefaultForAction			=				_IsReportingManageIsDefaultForAction,
			LeavePlanId									=				_LeavePlanId
		Where LeaveApprovalId 							= 				_LeaveApprovalId;
		
		Set _ProcessingResult = _LeaveApprovalId;
	End;
	End if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_approver_by_workflow` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_approver_by_workflow`(
		_ApprovalWorkFlowId int,
        _ProjectId int,
        _EmployeeId bigint
        
/*

	call sp_leave_approver_by_workflow(1, 1, 5)

*/
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);  
		Call sp_LogException (@Message, '', 'sp_leave_approver_by_workflow', 1, 0, @Result);
	end;
	
	select 
		c.*, 
		w.AutoExpireAfterDays, 
		w.NoOfApprovalLevel, 
		w.IsAutoExpiredEnabled 
	from approval_chain_detail c
	inner join approval_work_flow w on c.ApprovalWorkFlowId = w.ApprovalWorkFlowId
	where c.ApprovalWorkFlowId = _ApprovalWorkFlowId;
    
	if exists(select 1 from project_members_detail where ProjectId = _ProjectId and EmployeeId = _EmployeeId) then
    begin        
		select 
			distinct
			e.EmployeeId, 
			e.Email, 
			e.FullName Name, 
			a.IsRequired 
		from project_members_detail e
        inner join employees emp on emp.EmployeeUid = e.EmployeeId
		inner join approval_chain_detail a on a.AssignieId = emp.DesignationId
        where e.ProjectId = _ProjectId
        and a.ApprovalWorkFlowId = _ApprovalWorkFlowId;
    end;
    else 
    begin
		select 
			emp.EmployeeUid as EmployeeId, 
			emp.Email, 
			concat(emp.FirstName, ' ', emp.LastName) Name, 
			e.IsRequired 
		from approval_chain_detail e
		inner join employees emp on emp.DesignationId = e.AssignieId
		where e.ApprovalWorkFlowId = 1 
		and emp.EmployeeUid = (select ReportingManagerId from employees where EmployeeUid = _EmployeeId);
    end;
    end if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_detail_getby_employeeId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_detail_getby_employeeId`(


	_EmployeeId bigint
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_page_getby_employeeId', 1, 0, @Result);
		end;

		select * from employees
        where DesignationId = 1 Or DesignationId = 4;		
        
        select l.* from leave_plan l 
        inner join employees e on e.LeavePlanId = l.LeavePlanId or l.IsDefaultPlan = 1
        where EmployeeUid = _EmployeeId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_detail_get_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_detail_get_by_id`(	
	_LeaveDetailId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_leave_detail_get_by_id', 1, 0, @Result);
	end;
   
   Select * from leave_detail
   where LeaveDetailId = _LeaveDetailId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_detail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_detail_insupd`(
	   

	_LeaveDetailId int,
    _LeavePlanTypeId int,
    _IsLeaveDaysLimit bit,
    _LeaveLimit int,
    _CanApplyExtraLeave bit,
    _ExtraLeaveLimit int,
    _IsNoLeaveAfterDate bit,
    _LeaveNotAllocatedIfJoinAfter int,
	_CanCompoffAllocatedAutomatically bit,
    _CanCompoffCreditedByManager bit,
    _LeavePlanId int,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            RollBack;
            Call sp_LogException (@Message, '', 'sp_leave_detail_insupd', 1, 0, @Result);
		end;

		Start Transaction;
        begin
			If not exists (Select 1 from leave_detail Where LeaveDetailId = _LeaveDetailId) then
			Begin
				set @leaveDetailId = 0;
				select LeaveDetailId from leave_detail order by LeaveDetailId Desc limit 1 into @leaveDetailId;
				set @leaveDetailId = @leaveDetailId + 1;
				
				Insert into leave_detail Values (
					@leaveDetailId,
					_LeavePlanTypeId,
                    _LeavePlanId,
					_IsLeaveDaysLimit,
					_LeaveLimit,
					_CanApplyExtraLeave,
					_ExtraLeaveLimit,
					_IsNoLeaveAfterDate,
					_LeaveNotAllocatedIfJoinAfter,
					_CanCompoffAllocatedAutomatically,
					_CanCompoffCreditedByManager
				);
				
                Set _LeaveDetailId = @leaveDetailId;
				Set _ProcessingResult = @leaveDetailId;
			End;
			Else
			Begin
				Update leave_detail SET 
					LeavePlanTypeId							=				_LeavePlanTypeId,
					IsLeaveDaysLimit						=				_IsLeaveDaysLimit,
					LeaveLimit								=				_LeaveLimit,
					CanApplyExtraLeave						=				_CanApplyExtraLeave,
					ExtraLeaveLimit							=				_ExtraLeaveLimit,
					IsNoLeaveAfterDate						=				_IsNoLeaveAfterDate,
					LeaveNotAllocatedIfJoinAfter			=				_LeaveNotAllocatedIfJoinAfter,
					CanCompoffAllocatedAutomatically		=				_CanCompoffAllocatedAutomatically,
					CanCompoffCreditedByManager				=				_CanCompoffCreditedByManager,
                    LeavePlanId								=				_LeavePlanId
				Where LeaveDetailId = _LeaveDetailId;
				
				Set _ProcessingResult = _LeaveDetailId;
			End;
			End if;
			
			Update leave_plans_type set
				MaxLeaveLimit = _LeaveLimit
			where LeavePlanTypeId = _LeavePlanTypeId;
		end;
        Commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_detail_InsUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_detail_InsUpdate`(	
	_LeaveDetailId int,
    _LeavePlanId int,
    _LeaveLimit int,
    _CanApplyExtraLeave bit,
    _ExtraLeaveLimit int,
    _LeaveNotAllocatedIfJoinAfter int,
	_CanManagerAwardCausalLeave bit,
	_CanCompoffAllocatedAutomatically bit,
    _CanCompoffCreditedByManager bit,
    out _ProcessingResult varchar(100)
)
Begin
	Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_detail_InsUpdate', 1, 0, @Result);
		end;
        Begin
			if not exists (select 1 from leave_detail where LeaveDetailId = _LeaveDetailId ) then
            Begin
				Insert into leave_detail values (
					default,
					_LeavePlanId,
                    _LeavePlanId,
					_LeaveLimit,
					_CanApplyExtraLeave,
					_ExtraLeaveLimit,
					_LeaveNotAllocatedIfJoinAfter,
					_CanManagerAwardCausalLeave,
					_CanCompoffAllocatedAutomatically,
					_CanCompoffCreditedByManager
				);
					set _ProcessingResult = 'inserted';
			end;
            else
            Begin
				update leave_detail set
							LeavePlanId						=	_LeavePlanId,
							LeaveLimit						=	_LeaveLimit,
							CanApplyExtraLeave				=	_CanApplyExtraLeave,
							ExtraLeaveLimit					=	_ExtraLeaveLimit,
							LeaveNotAllocatedIfJoinAfter	=	_LeaveNotAllocatedIfJoinAfter,
							CanManagerAwardCausalLeave		=	_CanManagerAwardCausalLeave,
							CanCompoffAllocatedAutomatically =	_CanCompoffAllocatedAutomatically,
							CanCompoffCreditedByManager		=	_CanCompoffCreditedByManager,
                            LeavePlanId						=	_LeavePlanId
				where 		LeaveDetailId					=	_LeaveDetailId;
                                    
					set _ProcessingResult = 'updated';	
			end;
            end if;
		end;
    end;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_endyear_processing_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_endyear_processing_insupd`(
	   
    _LeaveEndYearProcessingId int,
	_LeavePlanTypeId int,
	_LeavePlanId int,
	_IsLeaveBalanceExpiredOnEndOfYear bit,
	_AllConvertedToPaid bit,
	_AllLeavesCarryForwardToNextYear bit,
	_PayFirstNCarryForwordRemaning bit,
	_CarryForwordFirstNPayRemaning bit,
	_PayNCarryForwardForPercent bit,
	_PayNCarryForwardDefineType varchar(50),
    _FixedPayNCarryForward json,
	_PercentagePayNCarryForward json,
	_DoestCarryForwardExpired bit,
	_ExpiredAfter decimal,
	_DoesExpiryLeaveRemainUnchange bit,
	_DeductFromSalaryOnYearChange bit,
	_ResetBalanceToZero bit,
	_CarryForwardToNextYear bit,
    out _ProcessingResult varchar(50)
    
 
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_endyear_processing_insupd', 1, 0, @Result);
		end;
        
        If not exists (Select 1 from leave_endyear_processing Where LeaveEndYearProcessingId = _LeaveEndYearProcessingId) then
		Begin
			set @leaveEndYearProcessingId = 0;
			select LeaveEndYearProcessingId into @leaveEndYearProcessingId from leave_endyear_processing order by LeaveEndYearProcessingId desc limit 1;
            set @leaveEndYearProcessingId = @leaveEndYearProcessingId + 1;
            
			Insert into leave_endyear_processing Values (
				@leaveEndYearProcessingId,
				_LeavePlanTypeId,
                _LeavePlanId,
				_IsLeaveBalanceExpiredOnEndOfYear,
				_AllConvertedToPaid,
				_AllLeavesCarryForwardToNextYear,
				_PayFirstNCarryForwordRemaning,
				_CarryForwordFirstNPayRemaning,
				_PayNCarryForwardForPercent,
				_PayNCarryForwardDefineType,
				_FixedPayNCarryForward,
				_PercentagePayNCarryForward,
				_DoestCarryForwardExpired,
				_ExpiredAfter,
				_DoesExpiryLeaveRemainUnchange,
				_DeductFromSalaryOnYearChange,
				_ResetBalanceToZero,
				_CarryForwardToNextYear
			);
			
			Set _ProcessingResult = @leaveEndYearProcessingId;
		End;
		Else
		Begin
			Update leave_endyear_processing SET 
				LeavePlanTypeId								=				_LeavePlanTypeId,
				IsLeaveBalanceExpiredOnEndOfYear			=				_IsLeaveBalanceExpiredOnEndOfYear,
				AllConvertedToPaid							=				_AllConvertedToPaid,
				AllLeavesCarryForwardToNextYear				=				_AllLeavesCarryForwardToNextYear,
				PayFirstNCarryForwordRemaning				=				_PayFirstNCarryForwordRemaning,
				CarryForwordFirstNPayRemaning				=				_CarryForwordFirstNPayRemaning,
				PayNCarryForwardForPercent					=				_PayNCarryForwardForPercent,
				PayNCarryForwardDefineType					=				_PayNCarryForwardDefineType,
				FixedPayNCarryForward						=				_FixedPayNCarryForward,
                PercentagePayNCarryForward					=				_PercentagePayNCarryForward,
				DoestCarryForwardExpired					=				_DoestCarryForwardExpired,
				ExpiredAfter								=				_ExpiredAfter,
				DoesExpiryLeaveRemainUnchange				=				_DoesExpiryLeaveRemainUnchange,
				DeductFromSalaryOnYearChange				=				_DeductFromSalaryOnYearChange,
				ResetBalanceToZero							=				_ResetBalanceToZero,
				CarryForwardToNextYear						=				_CarryForwardToNextYear,
                LeavePlanId									=				_LeavePlanId
			Where LeaveEndYearProcessingId 					= 				_LeaveEndYearProcessingId;
			
			Set _ProcessingResult = _LeaveEndYearProcessingId;
		End;
		End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_from_management_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_from_management_insupd`(
	   

	_LeaveManagementId int,
    _LeavePlanTypeId int,
	_CanManagerAwardCausalLeave bit,
    _LeavePlanId int,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            RollBack;
            Call sp_LogException (@Message, '', 'sp_leave_from_management_insupd', 1, 0, @Result);
		end;

		Start Transaction;
        begin
			If not exists (Select 1 from leave_from_management Where LeaveManagementId = _LeaveManagementId) then
			Begin
				set @leaveManagementId = 0;
				select LeaveManagementId from leave_from_management order by LeaveManagementId Desc limit 1 into @leaveManagementId;
				set @leaveManagementId = @leaveManagementId + 1;
				
				Insert into leave_from_management Values (
					@leaveManagementId,
					_LeavePlanTypeId,
                    _LeavePlanId,
					_CanManagerAwardCausalLeave
				);
				
                Set _leaveManagementId = @leaveManagementId;
				Set _ProcessingResult = @leaveManagementId;
			End;
			Else
			Begin
				Update leave_from_management SET 
					LeavePlanTypeId							=				_LeavePlanTypeId,
					CanManagerAwardCausalLeave				=				_CanManagerAwardCausalLeave,
                    LeavePlanId								=				_LeavePlanId
				Where LeaveManagementId = _LeaveManagementId;
				
				Set _ProcessingResult = _LeaveManagementId;
			End;
			End if;
			
		end;
        Commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_group_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_group_get`(
	   
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, @OperationStatus, 'sp_leave_group_get', 1, 0, @Result);
		end;
        
        select * from leave_plan;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_group_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_group_insupd`(
	   
	_LeaveGroupId int,
    _GroupName varchar(50),
    _GroupDescription varchar(250),
    out _ProcessingResult varchar(1000)
    
 
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, @OperationStatus, 'sp_leave_group_insupd', 1, 0, @Result);
		end;
        
        If not exists (Select 1 from leave_group Where LeaveGroupId = _LeaveGroupId) then
		Begin
			Insert into leave_group Values (
				default,
				_GroupName,
				_GroupDescription
			);
			
			Set _ProcessingResult = 'inserted';
		End;
		Else
		Begin
			Update leave_group SET 
				GroupName			=	_GroupName,
				GroupDescription	=	_GroupDescription
			Where LeaveGroupId = _LeaveGroupId;
			
			Set _ProcessingResult = 'updated';
		End;
		End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_holidays_and_weekoff_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_holidays_and_weekoff_insupd`(
	   
	_LeaveHolidaysAndWeekOffId int,
    _LeavePlanTypeId int,
    _LeavePlanId int,
    _AdJoiningHolidayIsConsiderAsLeave bit,
    _ConsiderLeaveIfNumOfDays decimal,
    _IfLeaveLieBetweenTwoHolidays bit,
    _IfHolidayIsRightBeforLeave bit,
    _IfHolidayIsRightAfterLeave bit,
    _IfHolidayIsRightBeforeAfterOrInBetween bit,
    _AdjoiningWeekOffIsConsiderAsLeave bit,
    _ConsiderLeaveIfIncludeDays decimal,
    _IfLeaveLieBetweenWeekOff bit,
    _IfWeekOffIsRightBeforLeave bit,
    _IfWeekOffIsRightAfterLeave bit,
    _IfWeekOffIsRightBeforeAfterOrInBetween bit,
    out _ProcessingResult varchar(50)
    
 
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_holidays_and_weekoff_insupd', 1, 0, @Result);
		end;
        
        If not exists (Select 1 from leave_holidays_and_weekoff Where LeaveHolidaysAndWeekOffId = _LeaveHolidaysAndWeekOffId) then
		Begin
			set @leaveHolidaysAndWeekOffId = 0;
			select LeaveHolidaysAndWeekOffId from leave_holidays_and_weekoff order by LeaveHolidaysAndWeekOffId Desc limit 1 into @leaveHolidaysAndWeekOffId;
			set @leaveHolidaysAndWeekOffId = @leaveHolidaysAndWeekOffId + 1;
            
			Insert into leave_holidays_and_weekoff Values (
					@leaveHolidaysAndWeekOffId,
					_LeavePlanTypeId,
                    _LeavePlanId,
					_AdJoiningHolidayIsConsiderAsLeave,
					_ConsiderLeaveIfNumOfDays,
					_IfLeaveLieBetweenTwoHolidays,
					_IfHolidayIsRightBeforLeave,
					_IfHolidayIsRightAfterLeave,
					_IfHolidayIsRightBeforeAfterOrInBetween,
					_AdjoiningWeekOffIsConsiderAsLeave,
					_ConsiderLeaveIfIncludeDays,
					_IfLeaveLieBetweenWeekOff,
					_IfWeekOffIsRightBeforLeave,
					_IfWeekOffIsRightAfterLeave,
					_IfWeekOffIsRightBeforeAfterOrInBetween
			);
			
			Set _ProcessingResult = @leaveHolidaysAndWeekOffId;
		End;
		Else
		Begin
			Update leave_holidays_and_weekoff SET 
					AdJoiningHolidayIsConsiderAsLeave				=			_AdJoiningHolidayIsConsiderAsLeave,
                    LeavePlanTypeId									=			_LeavePlanTypeId,
					ConsiderLeaveIfIncludeDays						=			_ConsiderLeaveIfIncludeDays,
                    ConsiderLeaveIfNumOfDays						=			_ConsiderLeaveIfNumOfDays,
					IfLeaveLieBetweenTwoHolidays					=			_IfLeaveLieBetweenTwoHolidays,
					IfHolidayIsRightBeforLeave						=			_IfHolidayIsRightBeforLeave,
					IfHolidayIsRightAfterLeave						=			_IfHolidayIsRightAfterLeave,
					IfHolidayIsRightBeforeAfterOrInBetween			=			_IfHolidayIsRightBeforeAfterOrInBetween,
					AdjoiningWeekOffIsConsiderAsLeave				=			_AdjoiningWeekOffIsConsiderAsLeave,
					IfLeaveLieBetweenWeekOff						=			_IfLeaveLieBetweenWeekOff,
					IfWeekOffIsRightBeforLeave						=			_IfWeekOffIsRightBeforLeave,
					IfWeekOffIsRightAfterLeave						=			_IfWeekOffIsRightAfterLeave,
					IfWeekOffIsRightBeforeAfterOrInBetween			=			_IfWeekOffIsRightBeforeAfterOrInBetween,
                    LeavePlanId										=			_LeavePlanId
			Where 	LeaveHolidaysAndWeekOffId 						= 			_LeaveHolidaysAndWeekOffId;
			
			Set _ProcessingResult = _LeaveHolidaysAndWeekOffId;
		End;
		End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_notification_and_request_InsUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_notification_and_request_InsUpdate`(
	   /*

	set @result = '';
    Call sp_leave_notification_and_request_InsUpdate(10, '{}', 6, 2022, 'covid', 2, 1, '2022-05-22', '2022-05-24', 2, @result);
	select @result;

*/
	_LeaveRequestId bigint,
	_EmployeeId bigint,
	_LeaveDetail Json,
    _Reason varchar(500),
    _ReportingManagerId bigint,
    _Year int,
    _LeaveFromDay datetime,
	_LeaveToDay datetime,
    _LeaveTypeId int,
    _RequestStatusId int,
    _AvailableLeaves decimal(10, 2),
	_TotalLeaveApplied decimal(10, 2),
	_TotalApprovedLeave decimal(10, 2),
	_TotalLeaveQuota decimal(10, 2),
    _LeaveQuotaDetail json,
    _NumOfDays decimal(10, 2),
    _LeaveRequestNotificationId int,
    _IsPending bit,
    _ReporterDetail json,
    out _ProcessingResult varchar(1000)
    
 
)
Begin
	Declare Exit handler for sqlexception
	Begin
		RollBack;
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		 
		Set _ProcessingResult = null;            
		Call sp_LogException (@Message, '', 'sp_leave_notification_and_request_InsUpdate', 1, 0, @Result);
	end;
        
	Set @LeaveRequestId = 0;
	Start Transaction;
	Begin 			
		If not exists (Select 1 from employee_leave_request Where LeaveRequestId = _LeaveRequestId Or (EmployeeId = _EmployeeId and Year = _Year)) then
		Begin
			Select LeaveRequestId into @LeaveRequestId from employee_leave_request order by LeaveRequestId desc limit 1;
			Set @LeaveRequestId = @LeaveRequestId + 1;
			
			Insert into employee_leave_request Values (
				@LeaveRequestId,
				_EmployeeId,
				_LeaveDetail,
				_Year,
				_IsPending,
				_AvailableLeaves,
				_TotalLeaveApplied,
				_TotalApprovedLeave,
				_TotalLeaveQuota,
				_LeaveQuotaDetail,
				utc_timestamp()
			);
		End;
		Else
		Begin
			Select LeaveRequestId into @LeaveRequestId from employee_leave_request 
			Where LeaveRequestId = _LeaveRequestId Or (EmployeeId = _EmployeeId and Year = _Year);
			
			Update employee_leave_request SET 
				Year					=		_Year,
				AvailableLeaves			=		_AvailableLeaves,
				TotalLeaveApplied		=		_TotalLeaveApplied,
				TotalApprovedLeave		=		_TotalApprovedLeave,
				TotalLeaveQuota			=		_TotalLeaveQuota,
				LeaveQuotaDetail		=		_LeaveQuotaDetail,
				IsPending				=		_IsPending,
				UpdatedOn				=		utc_timestamp()
			Where LeaveRequestId = @LeaveRequestId;
		End;
		End if;
	
		Set @EmployeeName = '';
		Set @Email = '';
		Set @Mobile = '';
		Set @ProjectId = 0;
		Set @ProjectName = null;
		Set @outCome = '';
		
		Select 
			Concat(FirstName, ' ', LastName) FullName, Mobile, Email 
		from employees 
		where EmployeeUid = _EmployeeId
		into @EmployeeName, @Mobile, @Email;
		
		Set @leaveRequestNotificationId = 0;
		select LeaveRequestNotificationId into @leaveRequestNotificationId from leave_request_notification
		order by LeaveRequestNotificationId desc limit 1;
		set @leaveRequestNotificationId = @leaveRequestNotificationId + 1;
		
		If not exists (Select 1 from leave_request_notification Where LeaveRequestNotificationId = _LeaveRequestNotificationId) then
		Begin
			Insert into leave_request_notification Values (
				@leaveRequestNotificationId,
				@LeaveRequestId,
				_Reason,
				_EmployeeId,
				_ReportingManagerId,
				@ProjectId,
				@ProjectName,
				_LeaveFromDay,
				_LeaveToDay,
				_NumOfDays,
				_RequestStatusId,
				0,
				'[]',
				'[]',
				'[]',
				null,
				0,
				false,
				_LeaveTypeId,
				utc_timestamp(),
				utc_timestamp(),
				null,
				_EmployeeId
			);                
		End;
		Else
		Begin
			Update leave_request_notification SET 
				RequestStatusId					=			_RequestStatusId,
				ReporterDetail					=			_ReporterDetail,
				UpdatedOn						=			utc_timestamp(),
				UpdatedBy						=			_ReportingManagerId
			Where 	LeaveRequestNotificationId 	= 			_LeaveRequestNotificationId;

			 if (_RequestStatusId = 9) then
            begin
				Set @fromDate = null, @toDate = null;
				select FromDate, ToDate into @fromDate, @toDate from leave_request_notification
				where LeaveRequestNotificationId = _LeaveRequestNotificationId;
				
				while @fromDate <= @toDate do
				begin
					Set @attendaceId = 0, @attendacneStatus = 0;
					
					Select AttendanceId, AttendanceStatus into @attendaceId, @attendacneStatus 
					from daily_attendance where AttendanceDate = @fromDate
                    and EmployeeId = _EmployeeId;
                    
					if (@attendacneStatus != 3) then
					begin
						Update daily_attendance
						set AttendanceStatus = 20,
						IsOnLeave = true,
						LeaveId = _LeaveRequestNotificationId
						where AttendanceId = @attendaceId;
					end;
					end if;
					
					Set @fromDate = @fromDate + 1;
				end;
				end while;
			end;
            end if;
		End;
		End if;
	
		Set _ProcessingResult = 'updated';
	End;
	COMMIT;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plans_and_type_get_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plans_and_type_get_by_id`(


)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, @OperationStatus, 'sp_leave_plans_and_type_get_by_id', 1, 0, @Result);
		end;
        
		select * from leave_plan;
        select * from leave_plans_type;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plans_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plans_get`(


)
Begin
	select * from leave_plan;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plans_getbyId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plans_getbyId`(


	_LeavePlanId int
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, @OperationStatus, 'sp_leave_plans_getbyId', 1, 0, @Result);
		end;
        
		select * from leave_plan
        where LeavePlanId = _LeavePlanId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plans_type_and_workflow_byId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plans_type_and_workflow_byId`(


	_LeavePlanTypeId int
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_plans_type_and_workflow_byId', 1, 0, @Result);
		end;
        
		select * from leave_plans_type
        where LeavePlanTypeId = _LeavePlanTypeId;
        
        select * from approval_work_flow;
        
        select * from employee_roles;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plans_type_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plans_type_get`(

)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, @OperationStatus, 'sp_leave_plans_type_get', 1, 0, @Result);
		end;
        
		select * from leave_plans_type;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plans_type_getbyId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plans_type_getbyId`(


	_LeavePlanTypeId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_leave_plans_type_getbyId', 1, 0, @Result);
	end;
	
	select * from leave_plans_type
	where LeavePlanTypeId = _LeavePlanTypeId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plans_type_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plans_type_insupd`(
	   
	_LeavePlanTypeId int,
    _LeavePlanCode varchar(10),
    _PlanName varchar(50),
    _PlanDescription varchar(250),
    _MaxLeaveLimit int,
    _ShowDescription bit,
    _IsPaidLeave bit,
    _IsSickLeave bit,
    _IsStatutoryLeave bit,
    _IsMale bit,
    _IsMarried bit,
    _IsRestrictOnGender bit,
    _IsRestrictOnMaritalStatus bit,
    _Reasons json,
    _PlanConfigurationDetail json,
	_AdminId bigint,	
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_plans_type_insupd', 1, 0, @Result);
		end;
        
		If not exists (Select 1 from leave_plans_type Where LeavePlanTypeId = _LeavePlanTypeId) then
		Begin
			Insert into leave_plans_type Values (
				default,
                _LeavePlanCode,
				_PlanName,
				_PlanDescription,
				_MaxLeaveLimit,
                _ShowDescription,
				_IsPaidLeave,
				_IsSickLeave ,
				_IsStatutoryLeave,
				_IsMale,
				_IsMarried,
				_IsRestrictOnGender,
				_IsRestrictOnMaritalStatus,
				_Reasons,
                _PlanConfigurationDetail,
                _AdminId,
                null,
                now(),
                null
			);
            
            Set _ProcessingResult = 'inserted';
		End;
		Else
		Begin
			Update leave_plans_type SET 
				LeavePlanCode				=				_LeavePlanCode,
				PlanName					=				_PlanName,
				PlanDescription				=				_PlanDescription,
				MaxLeaveLimit				=				_MaxLeaveLimit,
                ShowDescription				=				_ShowDescription,
				IsPaidLeave					=				_IsPaidLeave,
				IsSickLeave					=				_IsSickLeave,
				IsStatutoryLeave			=				_IsStatutoryLeave,
				IsMale						=				_IsMale,
				IsMarried					=				_IsMarried,
				IsRestrictOnGender			=				_IsRestrictOnGender,
				IsRestrictOnMaritalStatus	=				_IsRestrictOnMaritalStatus,
				Reasons						=				_Reasons,
                PlanConfigurationDetail		=				_PlanConfigurationDetail,
                UpdatedBy					=				_AdminId,
                UpdatedOn					=				now()
			Where LeavePlanTypeId = _LeavePlanTypeId;
			
			Set _ProcessingResult = 'updated';
		End;
		End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plan_andtype_get_by_ids_json` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plan_andtype_get_by_ids_json`(


	_LeavePlanTypeId json,
    _LeavePlanId int

)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, @OperationStatus, 'sp_leave_plan_andtype_get_by_ids_json', 1, 0, @Result);
		end;
        
        select l.* from leave_plans_type l
		inner join (
		SELECT *
			 FROM
			   JSON_TABLE(
				 _LeavePlanTypeId,
				 "$[*]"
				 COLUMNS(
				   col INT PATH "$"
				 )
			   ) data
		) t on l.LeavePlanTypeId = t.col;
        
		select * from leave_plan where LeavePlanId = _LeavePlanId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plan_calculation_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plan_calculation_get`(
	_EmployeeId bigint,
    _ReportingManagerId bigint,
    _IsActive int,
    _Year int

	# call sp_leave_plan_calculation_get(2, 5, 1, 2024)
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Drop table if exists employeeDetail;
            
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_leave_plan_calculation_get', 1, 0, @Result);
		End;
        
        Create TEMPORARY table employeeDetail(
			EmployeeUid bigint, 
			FirstName varchar(50),
			LastName varchar(50),
			Mobile varchar(20),
			Email varchar(100),
			LeavePlanId int,
			PayrollGroupId int,
			SalaryGroupId int,
			CompanyId int,
			NoticePeriodId int,
			SecondaryMobile varchar(20),
			Gender bit,
			Address varchar(100),
			IsPermanent bit,
			ActualPackage float(10,2),
			FinalPackage float(10, 2),
			TakeHomeByCandidate float(10, 2),
			LeaveTypeBriefJson json,
            AccrualRunDay int,
            NextAccrualRunDate datetime,
			EmpProfDetailUid bigint,
			ExprienceInYear float(5,2),
			Specification varchar(250),
			PANNo varchar(20),
			AadharNo varchar(20),
			AccountNumber varchar(50),
			BankName varchar(100),
			BranchName varchar(100),
			Domain varchar(250),
			IFSCCode varchar(20),
			LastCompanyName varchar(100),
			AccessLevelId bigint,
			UserTypeId int,
            ReportingManagerId bigint,
            ManagerEmail varchar(145),
            WorkShiftId int,
			CreatedOn datetime,
            ProjectId int,
			ProfessionalDetail_Json json     
        );

		set @managerId = 0;
        set @managerEmail = 0;
		select EmployeeUid, Email 
        into @managerId, @managerEmail from employees
        where EmployeeUid = _ReportingManagerId;

        Begin			
            if(_IsActive = 1) then
            begin	
				Insert into employeeDetail
                Select 
					e.EmployeeUid, 
					e.FirstName,
					e.LastName,
					e.Mobile,
					e.Email,
                    e.LeavePlanId,
                    e.PayrollGroupId,
                    e.SalaryGroupId,
					e.CompanyId,
					e.NoticePeriodId,
					ep.SecondaryMobile,
					ep.Gender,
					ep.Address,
					ep.IsPermanent,
					ep.ActualPackage,
					ep.FinalPackage,
					ep.TakeHomeByCandidate,
					er.LeaveQuotaDetail as LeaveTypeBriefJson,
					0 as AccrualRunDay,
					now() as NextAccrualRunDate,
					epro.EmpProfDetailUid,
					epro.ExprienceInYear,
					epro.Specification,
					epro.PANNo,
					epro.AadharNo,
					epro.AccountNumber,
					epro.BankName,
					epro.BranchName,
					epro.Domain,
					epro.IFSCCode,
					epro.LastCompanyName,
                    l.AccessLevelId,
                    l.UserTypeId,
                    @managerId,
                    @managerEmail,
                    e.WorkShiftId,
                    e.CreatedOn,
                    e.ProjectId,
					epro.ProfessionalDetail_Json
				from employees e
                inner join employeelogin l on l.EmployeeId = e.EmployeeUid
				Left Join employeepersonaldetail ep on e.EmployeeUid = ep.EmployeeUid
				Left Join employee_leave_request er on e.EmployeeUid = er.EmployeeId
				left join employeeprofessiondetail epro on e.EmployeeUid = epro.EmployeeUid
				Where e.EmployeeUid = _EmployeeId and er.Year = _Year;
			end;
            elseif(_IsActive = 0) then
            begin
				Insert into employeeDetail
                Select 
					e.EmployeeUid, 
					e.FirstName,
					e.LastName,
					e.Mobile,
					e.Email,
					ep.SecondaryMobile,
					ep.Gender,
					ep.Address,
					ep.IsPermanent,
					ep.ActualPackage,
					ep.FinalPackage,
					ep.TakeHomeByCandidate,
					er.LeaveQuotaDetail as LeaveTypeBriefJson,
					0 as AccrualRunDay,
					now() as NextAccrualRunDate,
					epro.ExprienceInYear,
					epro.Specification,
					epro.PANNo,
					epro.AadharNo,
					epro.AccountNumber,
					epro.BankName,
					epro.BranchName,
					epro.Domain,
					epro.IFSCCode,
					epro.LastCompanyName,
                    l.AccessLevelId,
                    l.UserTypeId,
                    @managerId,
                    @managerEmail,
                    1,
                    e.CreatedOn,
                    e.ProjectId,
					epro.ProfessionalDetail_Json
				from employee_archive e
                inner join employeelogin l on l.EmployeeId = e.EmployeeUid
				Left Join employeepersonaldetail_archive ep on e.EmployeeUid = ep.EmployeeUid
				Left Join employee_leave_request er on e.EmployeeUid = er.EmployeeId
				left join employeeprofessiondetail_archive epro on e.EmployeeUid = epro.EmployeeUid
				Where e.EmployeeUid = _EmployeeId and er.Year = _Year;
            end;
            else
            begin
				Insert into employeeDetail
				Select 
					e.EmployeeUid, 
					e.FirstName,
					e.LastName,
					e.Mobile,
					e.Email,
                    e.LeavePlanId,
                    e.PayrollGroupId,
                    e.NoticePeriodAppliedOn,
					ep.SecondaryMobile,
					ep.Gender,
					ep.Address,
					ep.IsPermanent,
					ep.ActualPackage,
					ep.FinalPackage,
					ep.TakeHomeByCandidate,
					er.LeaveQuotaDetail as LeaveTypeBriefJson,
					0 as AccrualRunDay,
					now() as NextAccrualRunDate,
					epro.ExprienceInYear,
					epro.Specification,
					epro.PANNo,
					epro.AadharNo,
					epro.AccountNumber,
					epro.BankName,
					epro.BranchName,
					epro.Domain,
					epro.IFSCCode,
					epro.LastCompanyName,
                    l.AccessLevelId,
                    l.UserTypeId,
                    @managerId,
                    @managerEmail,
                    e.WorkShiftId,
                    e.CreatedOn,
                    e.ProjectId,
					epro.ProfessionalDetail_Json                    
				from (
						Select * from employees 
                        union distinct
                        Select * from employee_archive
				) e
                inner join employeelogin l on l.EmployeeId = e.EmployeeUid
				Left Join employeepersonaldetail_archive ep on e.EmployeeUid = ep.EmployeeUid
				Left Join employee_leave_request er on e.EmployeeUid = er.EmployeeId
				left join employeeprofessiondetail_archive epro on e.EmployeeUid = epro.EmployeeUid
				Where e.EmployeeUid = _EmployeeId and er.Year = _Year;
            end;
			end if;
		End;
        
        Select * from employeeDetail;
        
        Set @leavetypeJson = '';
		Select 
			json_extract(p.AssociatedPlanTypes, '$[*].LeavePlanTypeId') into @leavetypeJson
		from leave_plan p
        inner join employeeDetail e on 
        case when e.LeavePlanId > 0 then p.LeavePlanId = e.LeavePlanId
        else IsDefaultPlan = 1
        end;

        Select p.* from
			json_table(
				@leavetypeJson, 
				'$[*]' columns(
					LeavePlanTypeId int PATH '$[0]'
				)
			) as T            
		inner join leave_plans_type p on p.LeavePlanTypeId = T.LeavePlanTypeId
		where T.LeavePlanTypeId > 0;
        
		select * from employee_leave_request
		where EmployeeId = _EmployeeId and 
		Year = _Year;

        select c.* from company_setting c
        where CompanyId = (Select CompanyId from employeeDetail);      
        
		Select 
			p.LeavePlanId,
            p.CompanyId,
            p.PlanName,
            p.PlanDescription,
            p.PlanStartCalendarDate,
            p.IsDefaultPlan,
            p.IsShowLeavePolicy,
            p.IsUploadedCustomLeavePolicy,
            p.CanApplyEntireLeave
        from leave_plan p
        inner join employeeDetail e on 
        case
			when p.LeavePlanId > 0 then p.LeavePlanId = e.LeavePlanId
            else IsDefaultPlan = 1
		end;
        
        select * from work_shifts w
        inner join employeeDetail e on 
        case 
			when e.WorkShiftId > 0 then e.WorkShiftId = w.WorkShiftId
            else w.WorkShiftId = 1
		end;
        
        select * from leave_request_notification
        where EmployeeId = _EmployeeId and Year(FromDate) = year(utc_date())
        order by ToDate desc;
        
		select 
			d.*
		from project p
        inner join project_members_detail d on d.ProjectId = p.ProjectId
		where p.ProjectId = (select ProjectId from employeeDetail);
        
        
        Drop table if exists employeeDetail;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plan_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plan_insupd`(
	   
	_LeavePlanId int,
    _CompanyId int,
    _PlanName varchar(50),
    _PlanDescription varchar(250),
    _AssociatedPlanTypes Json,
    _PlanStartCalendarDate datetime,
    _IsShowLeavePolicy bit,
    _IsUploadedCustomLeavePolicy bit,
    _IsDefaultPlan bit,
    _CanApplyEntireLeave bit,
    out _ProcessingResult varchar(50)
    
 
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, @OperationStatus, 'sp_leave_plan_insupd', 1, 0, @Result);
		end;
        
        If not exists (Select 1 from leave_plan Where LeavePlanId = _LeavePlanId) then
		Begin         
			Insert into leave_plan Values (
				default,
                _CompanyId,
				_PlanName,
				_PlanDescription,
                _AssociatedPlanTypes,
				_PlanStartCalendarDate,
				_IsShowLeavePolicy,
				_IsUploadedCustomLeavePolicy,
                _IsDefaultPlan,
                _CanApplyEntireLeave
			);
			
			Set _ProcessingResult = 'inserted';
		End;
		Else
		Begin
			Update leave_plan SET 
				PlanName						=				_PlanName,
				PlanDescription					=				_PlanDescription,
				PlanStartCalendarDate			=				_PlanStartCalendarDate,
				IsShowLeavePolicy				=				_IsShowLeavePolicy,
				IsUploadedCustomLeavePolicy		=				_IsUploadedCustomLeavePolicy,
                AssociatedPlanTypes				=				_AssociatedPlanTypes,
                IsDefaultPlan					= 				_IsDefaultPlan,
                CanApplyEntireLeave				=				_CanApplyEntireLeave
			Where LeavePlanId = _LeavePlanId;
			
			Set _ProcessingResult = 'updated';
		End;
		End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plan_restriction_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plan_restriction_insupd`(
	   
	_LeavePlanRestrictionId int,
	_LeavePlanTypeId int,
	_LeavePlanId int,
    _CanApplyAfterProbation bit,
    _CanApplyAfterJoining bit,
    _DaysAfterProbation int,
    _DaysAfterJoining int,
    _IsAvailRestrictedLeavesInProbation bit,
    _LeaveLimitInProbation decimal,    
    _IsLeaveInNoticeExtendsNoticePeriod bit,
    _NoOfTimesNoticePeriodExtended decimal,    
    _CanManageOverrideLeaveRestriction bit,    
    _GapBetweenTwoConsicutiveLeaveDates decimal,
    _LimitOfMaximumLeavesInCalendarYear decimal,
    _LimitOfMaximumLeavesInCalendarMonth decimal,    
    _LimitOfMaximumLeavesInEntireTenure decimal,
    _MinLeaveToApplyDependsOnAvailable decimal,
    _AvailableLeaves decimal,    
    _RestrictFromDayOfEveryMonth int,    
    _IsCurrentPlanDepnedsOnOtherPlan bit,
    _AssociatedPlanTypeId int,
    _IsCheckOtherPlanTypeBalance bit,
    _DependentPlanTypeId int,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_plan_restriction_insupd', 1, 0, @Result);
		end;
        
        If not exists (Select 1 from leave_plan_restriction Where LeavePlanRestrictionId = _LeavePlanRestrictionId) then
		Begin
			set @leavePlanRestrictionId = 0;
			select LeavePlanRestrictionId from leave_plan_restriction order by LeavePlanRestrictionId Desc limit 1 into @leavePlanRestrictionId;
			set @leavePlanRestrictionId = @leavePlanRestrictionId + 1;
            
			Insert into leave_plan_restriction Values (
				@leavePlanRestrictionId,
                _LeavePlanTypeId,
				_LeavePlanId,
				_CanApplyAfterProbation,
				_CanApplyAfterJoining,
				_DaysAfterProbation,
				_DaysAfterJoining,
				_IsAvailRestrictedLeavesInProbation,
				_LeaveLimitInProbation,
				_IsLeaveInNoticeExtendsNoticePeriod,
				_NoOfTimesNoticePeriodExtended,    
				_CanManageOverrideLeaveRestriction,    
				_GapBetweenTwoConsicutiveLeaveDates,
				_LimitOfMaximumLeavesInCalendarYear,
				_LimitOfMaximumLeavesInCalendarMonth,    
				_LimitOfMaximumLeavesInEntireTenure,
				_MinLeaveToApplyDependsOnAvailable,
				_AvailableLeaves,
				_RestrictFromDayOfEveryMonth,    
				_IsCurrentPlanDepnedsOnOtherPlan,
				_AssociatedPlanTypeId,
				_IsCheckOtherPlanTypeBalance,
				_DependentPlanTypeId
			);
			
			Set _ProcessingResult = @leavePlanRestrictionId;
		End;
		Else
		Begin
			Update leave_plan_restriction SET 
				LeavePlanId										=						_LeavePlanId,
				CanApplyAfterProbation							=						_CanApplyAfterProbation,
				CanApplyAfterJoining							=						_CanApplyAfterJoining,
				DaysAfterProbation								=						_DaysAfterProbation,
				DaysAfterJoining								=						_DaysAfterJoining,
				IsAvailRestrictedLeavesInProbation				=						_IsAvailRestrictedLeavesInProbation,
				LeaveLimitInProbation							=						_LeaveLimitInProbation,
				IsLeaveInNoticeExtendsNoticePeriod				=						_IsLeaveInNoticeExtendsNoticePeriod,
				NoOfTimesNoticePeriodExtended					=						_NoOfTimesNoticePeriodExtended,
				CanManageOverrideLeaveRestriction				=						_CanManageOverrideLeaveRestriction,
				GapBetweenTwoConsicutiveLeaveDates				=						_GapBetweenTwoConsicutiveLeaveDates,
				LimitOfMaximumLeavesInCalendarYear				=						_LimitOfMaximumLeavesInCalendarYear,
				LimitOfMaximumLeavesInCalendarMonth				=						_LimitOfMaximumLeavesInCalendarMonth,    
				LimitOfMaximumLeavesInEntireTenure				=						_LimitOfMaximumLeavesInEntireTenure,
				MinLeaveToApplyDependsOnAvailable				=						_MinLeaveToApplyDependsOnAvailable,
				AvailableLeaves									=						_AvailableLeaves,
				RestrictFromDayOfEveryMonth						=						_RestrictFromDayOfEveryMonth,    
				IsCurrentPlanDepnedsOnOtherPlan					=						_IsCurrentPlanDepnedsOnOtherPlan,
				AssociatedPlanTypeId							=						_AssociatedPlanTypeId,
				IsCheckOtherPlanTypeBalance						=						_IsCheckOtherPlanTypeBalance,
				DependentPlanTypeId								=						_DependentPlanTypeId,
                LeavePlanTypeId									=						_LeavePlanTypeId
			Where 	LeavePlanRestrictionId 						= 						_LeavePlanRestrictionId;
			
			Set _ProcessingResult = _LeavePlanRestrictionId;
		End;
		End if;
        commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plan_set_default` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plan_set_default`(


	_LeavePlanId int,
    _IsDefaultPlan bit,
    out _ProcessingResult varchar(100)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_plan_set_default', 1, 0, @Result);
		end;
        start transaction;
			SET SQL_SAFE_UPDATES = 0;
			Update leave_plan Set
				IsDefaultPlan 		=			false;
			SET SQL_SAFE_UPDATES = 1;
			
            Update leave_plan Set
				IsDefaultPlan 		=			_IsDefaultPlan
			where LeavePlanId 		= 			_LeavePlanId;
			
			set _ProcessingResult = 'updated';
        commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plan_type_get_by_ids_json` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plan_type_get_by_ids_json`(


	_LeavePlanTypeId json

)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_leave_plan_andtype_get_by_ids_json', 1, 0, @Result);
		end;
        
        select l.* from leave_plans_type l
		inner join (
		SELECT *
			 FROM
			   JSON_TABLE(
				 _LeavePlanTypeId,
				 "$[*]"
				 COLUMNS(
				   col INT PATH "$"
				 )
			   ) data
		) t on l.LeavePlanTypeId = t.col;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_plan_upd_configuration` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_plan_upd_configuration`(


	_LeavePlanTypeId int,
    _LeavePlanId int,
    _LeavePlanConfiguration json,
    _AssociatedPlanTypes json,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_leave_plan_upd_configuration', 1, 0, @Result);
	end;
	
	Update leave_plans_type Set
		PlanConfigurationDetail 		=			_LeavePlanConfiguration
	where LeavePlanTypeId 				= 			_LeavePlanTypeId;
	
	Update leave_plan set
		AssociatedPlanTypes = _AssociatedPlanTypes
	where LeavePlanId = _LeavePlanId;
	
	set _ProcessingResult = 'updated';
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_requests_by_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_requests_by_filter`(
    _ReportingManagerId bigint,
    _EmployeeId bigint,
    _FromDate datetime,
    _ToDate datetime,
    _RequestStatusId int,
    _PageIndex int,
    _PageSize int
    
/*

	call sp_leave_requests_by_filter(5, 0, '2024-03-09', '2024-03-09', 2, 1, 10)

*/    
    
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_leave_requests_by_filter', 1, 0, @Result);
		end;
        
        begin
			set @ManagerName = '';
			set @ManagerMobile = '';
			set @ManagerEmail = '';
			select 
				Concat(FirstName, ' ', LastName) ManagerName,
				Mobile,
				Email into @ManagerName, @ManagerMobile, @ManagerEmail
			from employees
			where EmployeeUid = _ReportingManagerId;
            
            set @query = json_object(
				'EmployeeId', _ReportingManagerId
            );
                        
			Select * from (
				Select 
					Row_Number() over(Order by o.UpdatedOn) as RowIndex,
					o.*, 
                    e.FirstName, 
                    e.LastName, 
                    e.Email, 
                    e.Mobile, 
                    @ManagerName ManagerName, 
                    @ManagerMobile ManagerMobile, 
					@ManagerEmail ManagerEmail,
                    Count(1) Over() as Total 
				from leave_request_notification o 
                inner join employees e on o.EmployeeId = e.EmployeeUid                
				Where JSON_CONTAINS(o.ReporterDetail, @query, '$') AND 
				CASE 
					When _EmployeeId > 0 
					then o.EmployeeId = _EmployeeId
                    else 1
				END 
                AND				
				CASE 
					When _RequestStatusId > 0
					then o.RequestStatusId = _RequestStatusId
                    else 1
				END
			) o 
			where RowIndex between (_PageIndex - 1) * _PageSize + 1  and (_PageIndex * _PageSize);       
        End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_request_and_notification_update_level` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_request_and_notification_update_level`(


	
    _LeaveRequestId bigint,
    _LeaveDetail json,
    _RecordId varchar(30),
    _ExecuterId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_leave_request_and_notification_update_level', 1, 0, @Result);
	end;
    
    Set sql_safe_updates = 0;
    
    update employee_leave_request set
		LeaveDetail  = _LeaveDetail
	where LeaveRequestId = _LeaveRequestId;
    
    update leave_request_notification set
		AssigneeId  = _ExecuterId
	where RecordId = _RecordId;
    
	Set sql_safe_updates = 1;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_request_notification_daily_attendance_insupdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_request_notification_daily_attendance_insupdate`(

	_LeaveRequestNotificationId bigint,
    _LeaveRequestId bigint,
    _UserMessage text,
    _EmployeeId bigint,
    _ReportingManagerId bigint,
    _ProjectId bigint,
    _ProjectName varchar(150),
    _FromDate Datetime,
    _ToDate Datetime,
    _NumOfDays decimal(10, 2),
    _RequestStatusId int,
    _NoOfApprovalsRequired int,
    _ReporterDetail json,
    _FileIds json,
    _FeedBack json,
    _LeaveTypeName varchar(100),
    _AutoActionAfterDays int,
    _IsAutoApprovedEnabled bit,
    _LeaveTypeId int,
    _AdminId bigint,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Set _ProcessingResult = @Message;    
		
		RollBack;
		Call sp_LogException (@Message, '', 'sp_leave_request_notification_attendance_insupdate', 1, 0, @Result);
	end;
	
	Start Transaction;
	Begin 
		set @leavenotificationId = 0;
		select LeaveRequestNotificationId from leave_request_notification order by LeaveRequestNotificationId desc limit 1 into @leavenotificationId;
		set @leavenotificationId = @leavenotificationId + 1;
		
		Insert into leave_request_notification Values (
			@leavenotificationId,
			_LeaveRequestId,
			_UserMessage,
			_EmployeeId,
			_ReportingManagerId,
			_ProjectId,
			_ProjectName,
			_FromDate,
			_ToDate,
			_NumOfDays,
			_RequestStatusId,
			_NoOfApprovalsRequired,
			_ReporterDetail,
			_FileIds,
			_FeedBack,
			_LeaveTypeName,
			_AutoActionAfterDays,
			_IsAutoApprovedEnabled,
			_LeaveTypeId,
			now(),
			now(),
			_AdminId,
			_AdminId
		);
		
        set @attendanceId = 0;
		select AttendanceId into @attendanceId from daily_attendance
		where EmployeeId = _EmployeeId and AttendanceDate between _FromDate and _ToDate;

		Update daily_attendance SET 
			IsOnLeave				=			true,
			LeaveId					=			@leavenotificationId
		where AttendanceId = @attendanceId;
            
		Set _ProcessingResult = @leavenotificationId;
	COMMIT;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_request_notification_get_byId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_request_notification_get_byId`(
	_LeaveRequestNotificationId bigint
    

    
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_leave_request_notification_get_byId', 1, 0, @Result);
		end;
        
		Select n.*, LeaveDetail from leave_request_notification n
        left join employee_leave_request l on l.LeaveRequestId = n.LeaveRequestId
		where LeaveRequestNotificationId = _LeaveRequestNotificationId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_request_notification_get_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_request_notification_get_by_empid`(
	_EmployeeId bigint,
	_RequestStatusId int

    
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_leave_request_notification_get_by_empid', 1, 0, @Result);
		end;
        
		Select * from leave_request_notification 
        where EmployeeId = _EmployeeId And RequestStatusId = _RequestStatusId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_request_notification_InsUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_request_notification_InsUpdate`(

	

	_LeaveRequestNotificationId bigint,
    _LeaveRequestId bigint,
    _UserMessage text,
    _EmployeeId bigint,
    _ReportingManagerId bigint,
    _ProjectId bigint,
    _ProjectName varchar(150),
    _FromDate Datetime,
    _ToDate Datetime,
    _NumOfDays decimal(10, 2),
    _RequestStatusId int,
    _NoOfApprovalsRequired int,
    _ReporterDetail json,
    _FileIds json,
    _FeedBack json,
    _LeaveTypeName varchar(100),
    _AutoActionAfterDays int,
    _IsAutoApprovedEnabled bit,
    _LeaveTypeId int,
    _AdminId bigint,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Set _ProcessingResult = @Message;    
		
		RollBack;
		Call sp_LogException (@Message, '', 'sp_leave_request_notification_InsUpdate', 1, 0, @Result);
	end;
	
	 set @leavenotificationId = 0;
	Start Transaction;
	Begin 
		If not exists (Select * from leave_request_notification Where LeaveRequestNotificationId = _LeaveRequestNotificationId) then
		Begin
			select LeaveRequestNotificationId from leave_request_notification order by LeaveRequestNotificationId desc limit 1 into @leavenotificationId;
            set @leavenotificationId = @leavenotificationId + 1;
            
			Insert into leave_request_notification Values (
				@leavenotificationId,
				_LeaveRequestId,
				_UserMessage,
				_EmployeeId,
				_ReportingManagerId,
				_ProjectId,
				_ProjectName,
				_FromDate,
				_ToDate,
				_NumOfDays,
				_RequestStatusId,
				_NoOfApprovalsRequired,
				_ReporterDetail,
				_FileIds,
				_FeedBack,
				_LeaveTypeName,
				_AutoActionAfterDays,
				_IsAutoApprovedEnabled,
				_LeaveTypeId,
                now(),
				now(),
				_AdminId,
                _AdminId
			);
			
			Set _ProcessingResult = @leavenotificationId;
		End;
		Else
		Begin
			set @leavenotificationId = _LeaveRequestNotificationId;
			Update leave_request_notification SET 
				UserMessage				=			_UserMessage,
				EmployeeId				=			_EmployeeId,
				ReportingManagerId		=			_ReportingManagerId,
				ProjectId				=			_ProjectId,
				ProjectName				=			_ProjectName,
				FromDate				=			_FromDate,
				ToDate					=			_ToDate,
				NumOfDays				=			_NumOfDays,
				RequestStatusId			=			_RequestStatusId,
				NoOfApprovalsRequired	=			_NoOfApprovalsRequired,
				ReporterDetail			=			_ReporterDetail,
				FileIds					=			_FileIds,
				FeedBack				=			_FeedBack,
				LeaveTypeName			=			_LeaveTypeName,
				AutoActionAfterDays		=			_AutoActionAfterDays,
				IsAutoApprovedEnabled	=			_IsAutoApprovedEnabled,
				LeaveTypeId				=			_LeaveTypeId,
				UpdatedOn				=			now(),
				UpdatedBy				=			_AdminId
			Where 	LeaveRequestNotificationId = 			_LeaveRequestNotificationId;
			
			Set _ProcessingResult = @leavenotificationId;
		End;
		End if;
		COMMIT;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_request_update_level` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_request_update_level`(


	
    _LeaveRequestId bigint,
    _LeaveDetail json,
    _LeaveQuotaDetail json
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_leave_request_update_level', 1, 0, @Result);
	end;
    
	if exists(select 1 from employee_leave_request where LeaveRequestId = _LeaveRequestId) then
    begin
		update employee_leave_request set
			LeaveDetail  			=		 _LeaveDetail,
			LeaveQuotaDetail		=		_LeaveQuotaDetail
		where LeaveRequestId = _LeaveRequestId;
	end;
    end if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_timesheet_and_attendance_requests_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_timesheet_and_attendance_requests_get`(

    _ManagerId bigint,
    _StatusId int,
	_FromDate datetime,
	_ToDate datetime
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_leave_timesheet_and_attendance_requests_get', 1, 0, @Result);
		end;
        
        set @ManagerName = '';
        set @ManagerMobile = '';
        set @ManagerEmail = '';
        select 
			Concat(FirstName, ' ', LastName) ManagerName,
            Mobile,
            Email into @ManagerName, @ManagerMobile, @ManagerEmail
		from employees
        where EmployeeUid = _ManagerId;
        
        if(_StatusId = 0) then 
        begin
			Select n.*, e.FirstName, e.LastName, e.Email, e.Mobile, 
            @ManagerName ManagerName, 
            @ManagerMobile ManagerMobile, 
            @ManagerEmail ManagerEmail
            from leave_request_notification n
            inner join employees e on n.EmployeeId = e.EmployeeUid
			where 
            case
				when AssigneeId > 0
                then AssigneeId = _ManagerId
                else n.ReportingManagerId = _ManagerId
			end
			order by CreatedOn desc;
        end;
        else
        begin
			Select n.*, e.FirstName, e.LastName, e.Email, e.Mobile,
			@ManagerName ManagerName, 
            @ManagerMobile ManagerMobile, 
            @ManagerEmail ManagerEmail
            from leave_request_notification n
            inner join employees e on n.EmployeeId = e.EmployeeUid
			where 
            case
				when AssigneeId > 0
                then AssigneeId = _ManagerId
                else n.ReportingManagerId = _ManagerId
			end
			and RequestStatusId = _StatusId
			order by CreatedOn desc;        
        end;
        end if;
        
        /*
        set @prevMonth = _ForMonth;
        if ( _ForMonth > 0) then
        begin
			set @prevMonth = (_ForMonth -1);
        end;
        end if;
		*/
        
		select a.*, e.FirstName, e.LastName, e.Email, e.Mobile,
		@ManagerName ManagerName, 
		@ManagerMobile ManagerMobile, 
		@ManagerEmail ManagerEmail
        from daily_attendance a
        inner join employees e on a.EmployeeId = e.EmployeeUid
        where e.ReportingManagerId = _ManagerId
        and a.AttendanceDate between _FromDate and _ToDate;
        
		select t.* , e.FirstName, e.LastName, e.Email, e.Mobile, c.ClientName,
		@ManagerName ManagerName, 
		@ManagerMobile ManagerMobile, 
		@ManagerEmail ManagerEmail
        from employee_timesheet t
        inner join employees e on t.EmployeeId = e.EmployeeUid
        inner join clients c on t.ClientId = c.ClientId
        where e.ReportingManagerId = _ManagerId
        and ForYear = Year(_FromDate);
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_timesheet_and_attendance_requests_get_by_role` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_timesheet_and_attendance_requests_get_by_role`(



    _ManagerId bigint,
    _StatusId int,
	_FromDate datetime,
	_ToDate datetime
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_leave_timesheet_and_attendance_requests_get_by_role', 1, 0, @Result);
		end;
        
        Set @AdminAccessId = 0;
        if(_StatusId = 0) then 
        begin
			Select n.*, e.FirstName, e.LastName, e.Email, e.Mobile from leave_request_notification n
            inner join employees e on n.EmployeeId = e.EmployeeUid
			where (AssigneeId = _ManagerId Or AssigneeId = @AdminAccessId)
			order by CreatedOn desc;
        end;
        else
        begin
			Select n.*, e.FirstName, e.LastName, e.Email, e.Mobile from leave_request_notification n
            inner join employees e on n.EmployeeId = e.EmployeeUid
			where (AssigneeId = _ManagerId Or AssigneeId = @AdminAccessId)
			and RequestStatusId = _StatusId
			order by CreatedOn desc;        
        end;
        end if;
        
        /*
        set @prevMonth = _ForMonth;
        if ( _ForMonth > 0) then
        begin
			set @prevMonth = (_ForMonth -1);
        end;
        end if;
        */
        
		select a.* , e.FirstName, e.LastName, e.Email, e.Mobile from daily_attendance a
        inner join employees e on a.EmployeeId = e.EmployeeUid
        where (e.ReportingManagerId = _ManagerId Or e.ReportingManagerId = @AdminAccessId)
        and a.AttendanceDate between _FromDate and _ToDate;
        
		select t.* , e.FirstName, e.LastName, e.Email, e.Mobile from employee_timesheet t
        inner join employees e on t.EmployeeId = e.EmployeeUid
        where (e.ReportingManagerId = _ManagerId Or e.ReportingManagerId = @AdminAccessId)
        and ForYear = Year(_FromDate);
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_type_detail_get_by_employeeId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_type_detail_get_by_employeeId`(
	   
	# call sp_leave_type_detail_get_by_employeeId(2, 2024)
       
	_EmployeeId bigint,
    _Year int
)
Begin
    Declare Exit handler for sqlexception
    Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

		Call sp_LogException (@Message, '', 'sp_leave_type_detail_get_by_employeeId', 1, 0, @Result);
	end;

	drop table if exists leave_request;
	Create temporary table leave_request as (
		select * from employee_leave_request
		where EmployeeId = _EmployeeId
        and Year = _Year
    );
    
    select * from leave_request;

	select l.* from leave_request r,
    json_table(
		r.LeaveQuotaDetail,
        '$[*]'
        Columns(
			LeavePlanTypeId int path '$.LeavePlanTypeId'
        )
    ) as t
    inner join leave_plans_type l on l.LeavePlanTypeId = t.LeavePlanTypeId
    where r.EmployeeId = _EmployeeId;
    
    Set @ShiftId = 0;
	Select WorkShiftId from employees order by EmployeeUid = _EmployeeId  desc limit 1 into @ShiftId;
	if (@ShiftId  = 0) then
		set @ShiftId = 1;
	end if;
    
    select * from work_shifts where WorkShiftId = @ShiftId;  
    
    select l.*, concat(e.FirstName, ' ', e.LastName) EmployeeName from leave_request_notification l
    inner join employees e on e.EmployeeUid = l.EmployeeId
    where EmployeeId = _EmployeeId;
    
	select p.ProjectId, p.ProjectName from project_members_detail m
    inner join project p on p.ProjectId = m.ProjectId
    where m.EmployeeId = _EmployeeId and m.IsActive = true;
    
    drop table if exists leave_request;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_leave_yearend_processing_all` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_leave_yearend_processing_all`(	
    
/*

	call sp_leave_yearend_processing_all()

*/    

)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_leave_yearend_processing_all', 1, 0, @Result);
	end;
    begin        
		select * from leave_endyear_processing;
	end;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_LogException` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_LogException`(



    _StackTrace text,
    _OperationStatus text,
    _MethodFullyQualifiedName varchar(100),
    _IsProcedureException bit,
    _IsCodeException bit,
    out _ProcessingResult varchar(100)
)
Begin

	Set @Message = _StackTrace;
	if(@Message is null or @Message = '')then
	Begin
		Set @Message = Concat('Encounter exception in: ', _MethodFullyQualifiedName);
        Select @Message;
	End;
	end if;
							
	Insert into iexception values(
		Concat(@Message), 
        _MethodFullyQualifiedName, 
        utc_timestamp(), 
		_IsProcedureException, 
        _IsCodeException
	);
	
    set _ProcessingResult = 'inserted';
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_manage_employee_detail_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_manage_employee_detail_get`(
	_EmployeeId bigint,
    _CompanyId int,
    _OrganizationId int
    
/*

	call sp_manage_employee_detail_get(2, 1, 1)

*/

)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_manage_employee_detail_get', 1, 0, @Result);
		End;

        Begin
            Set @AccessLevelId = 0;		

			Select AccessLevelId from employeelogin
			where EmployeeId = _employeeId into @AccessLevelId;
	
			Select  e.EmployeeUid,
				e.FirstName,
				e.LastName,
				e.Mobile,
				e.Email,
				e.ReportingManagerId,
				e.DesignationId,
				ep.SecondaryMobile,
				e.IsActive,
                e.CompanyId,
                e.CreatedOn,
                e.SalaryGroupId,
                ep.DOB,
				ep.Gender,
				ep.FatherName,
				ep.SpouseName,
				ep.MotherName,
				ep.Address,
				ep.State,
				ep.City,
				ep.Pincode,
				ep.IsPermanent,
				ep.ActualPackage,
				ep.FinalPackage,
				ep.TakeHomeByCandidate,
				ef.PANNo,
				ef.AadharNo,
				ef.AccountNumber,
				ef.BankName,
				ef.BranchName,
				ef.IFSCCode,
				ef.Domain,
				ef.Specification,
				ef.ExprienceInYear,
				ef.LastCompanyName,
                e.WorkShiftId,
				@AccessLevelId AccessLevelId,
				e.UserTypeId,
				e.LeavePlanId,
                epf.EmployeePfDetailId,
                epf.PFNumber,
				epf.UniversalAccountNumber,
				epf.PFJoinDate
			from employees e 
			Inner Join employeepersonaldetail ep on e.EmployeeUid = ep.EmployeeUid
			Inner Join employeeprofessiondetail ef on e.EmployeeUid = ef.EmployeeUid
            left Join employee_pf_detail epf on e.EmployeeUid = epf.EmployeeId
			Where e.EmployeeUid = _EmployeeId;
					
			Select * from employeemappedclients 
			where EmployeeUid = _employeeId and IsActive = 1;
		
			Select FileId, FilePath, FileName, FileExtension, UserTypeId from userfiledetail 
			where FileOwnerId =_employeeId and FileName like 'profile%';
            
			Select 
				d.SalaryDetailId,
				d.EmployeeId, 
				d.CTC,
				d.GrossIncome,
				d.NetSalary, 
				d.CompleteSalaryDetail,
				d.NewSalaryDetail,
				d.UpdatedOn,
				/*(select EmployeeCurrentRegime from employee_declaration where EmployeeId = d.EmployeeId) as EmployeeCurrentRegime,
				case
					when exists (select 1 from salary_group where d.CTC between MinAmount and MaxAmount)
						then (select SalaryGroupId from salary_group where d.CTC between MinAmount and MaxAmount)
					else 0
				end GroupId,*/
                1,
				d.TaxDetail 
			from employee_salary_detail d
			where EmployeeId = _EmployeeId;
            
            select * from clients;
           
			select e.* from employees e
            Inner Join employeelogin el on e.EmployeeUid = el.EmployeeId
            where el.AccessLevelId = 3 and e.EmployeeUid != _employeeId;
            
            select * from accesslevel;
            
            select * from leave_plan
            where CompanyId = _CompanyId;
            
            select * from company
            where OrganizationId = _OrganizationId;
            
            select * from work_shifts
            where CompanyId = _CompanyId;
            
            select * from salary_group
             where CompanyId = _CompanyId;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_MappedClients_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_MappedClients_Get`(
	_EmployeeId bigint


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_MappedClients_Get', 1, 0, @Result);
		End;

        Begin
			Select * from employeemappedclients
            where EmployeeUid = _EmployeeId;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_menu_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_menu_insupd`(
 
 
 
    _catagory varchar(100),
    _childs varchar(100),
    _link varchar(250),
    _icon varchar(100),
    _badge varchar(100),
    _badgeType varchar(100),
    out _ProcessingResult varchar(100)
 )
Begin
 	Set @OperationStatus = '';
 	Begin
 		Declare exit handler for sqlexception
 		Begin
			
 			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
 										@errorno = MYSQL_ERRNO,
 										@errortext = MESSAGE_TEXT;
 										
 			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
            RollBack;
            SET autocommit = 1;
 			Call sp_LogException(@Message, @OperationStatus, 'sp_menu_insupd', 1, 0, @Result);
 		end;

		SET autocommit = 0;
		Start Transaction;
        Begin
			Set @AccessCode = 0;
            Select count(1) from rolesandmenu into @AccessCode;    
			           
			
			if (_childs is null) then
			Begin
				
				if not exists(Select 1 from rolesandmenu where Lower(Catagory) = Lower(_catagory)) then
				begin
					Set @AccessCode = @AccessCode + 1;
					Insert into rolesandmenu values(_catagory, null, null, null, null, null, @AccessCode);
					
					Set _ProcessingResult = 'Inserted successfully';
				end;
				end if;					
			End;
			Else
			Begin
				if not exists(Select 1 from rolesandmenu where Lower(Catagory) = Lower(_catagory) and lower(Childs) = lower(_childs)) then
				Begin
					Set @AccessCode = @AccessCode + 1;
					Insert into rolesandmenu values(_catagory, _childs, _link, _icon, _badge, _badgeType, @AccessCode);				
					
					
					Set _ProcessingResult = 'Inserted successfully';
				End;
				Else
				Begin
					SET sql_safe_updates = 0;
					Update rolesandmenu Set Childs = _childs, Link = _link, Icon = _icon, 
					Badge = _badge, BadgeType = _badgeType 
					where Lower(Catagory) = Lower(_catagory) && Childs is not null;
					
					Set _ProcessingResult = 'Updated successfully';
				End;
				End if;
			End;
			End if;
		End;
        
        Commit;
		SET autocommit = 1;
        SET sql_safe_updates = 1;
 	End;
 end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_new_registration` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_new_registration`(
	_OrganizationName varchar(250),
	_CompanyName varchar(250),
	_Mobile varchar(20),
	_EmailId varchar(100),
    _FirstName varchar(100),
    _LastName varchar(100),
	_Password varchar(250),
    _Country varchar(50),
	_State varchar(100),
	_City varchar(100),
	_FirstAddress varchar(100),
	_SecondAddress varchar(100),
	_ThirdAddress varchar(100),
	_ForthAddress varchar(100),
	_GSTNo varchar(50),
    _DeclarationStartMonth int,
    _DeclarationEndMonth int,
    _FinancialYear int,
    _AttendanceSubmissionLimit int,
    _ProbationPeriodInDays int,
    _NoticePeriodInDays int,
    _NoticePeriodInProbation int,
    _CreatedBy bigint,
    _TimezoneName varchar(100),
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
			@errorno = MYSQL_ERRNO,
			@errortext = MESSAGE_TEXT;
            
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			RollBack;
			Call sp_LogException (@Message, '', 'sp_new_registration', 1, 0, @Result);
		end;  
        
        set _ProcessingResult = 'Starting...';
        Start Transaction;
        begin
			if not exists(select 1 from organization_detail where OrganizationName = _OrganizationName) then            
			begin
                
                set @userTypeId = 0;
				set @accessLevelId = 1;
				select UserTypeId into @userTypeId from usertypedetail
				where RoleName = 'Admin';
                
				set @designationId = 0;
				select RoleId into @designationId from org_hierarchy
				where RoleName = 'CEO';

				set @organizationId = 0;
				select OrganizationId into @organizationId from organization_detail
				order by OrganizationId desc limit 1;
				set @organizationId = @organizationId + 1;                


				set _ProcessingResult = 'Insert: organization_detail';
				Insert into organization_detail values(
					@organizationId,
					_OrganizationName,
					_Mobile,
					_EmailId,
					_Mobile,
					null,
					null,
					0,
                    null,
					utc_date(),
                    null
				);            

				set @companyId = 0;
                select CompanyId from company
                order by CompanyId desc limit 1 into @companyId;
                set @companyId = @companyId + 1;   
	
				set _ProcessingResult = 'Insert: company';
				Insert into company values(            
					@companyId,
					@organizationId,
					_OrganizationName,
					_CompanyName,
					null,
					0,
					_Country,
					_State,
					_City,
					_FirstAddress,
					_SecondAddress,
					_ThirdAddress,
					_ForthAddress,
					null,
					_Mobile,
					_EmailId,
					null,
					null,
					null,
					null,
					_Mobile,
					null,
					null,
					0,
					0,
					null,
					null,
					null,
					null,
					null,
                    _GSTNo,
                    null,
					true,
					null,
					0,
					null,
					utc_date(),
					null
				);

				set @employeeId = 0;
				select EmployeeUid from employees
                order by EmployeeUid desc limit 1 into @employeeId;
                set @employeeId = @employeeId + 1;

				set _ProcessingResult = 'Insert: employees';
				Insert into employees values(
					@employeeId,
					_FirstName,
					_LastName,
					_Mobile,
					_EmailId,
					true,
					0,
					null,
					utc_date(),
					null,
					0,
					@designationId,
					@userTypeId,
					0,
					0,
                    0,
					@companyId,
					0,
                    1,
                    0
				);

                set @empProfDetailUid = 0;
				select EmpProfDetailUid into @empProfDetailUid from employeeprofessiondetail
                order by EmpProfDetailUid desc limit 1;
                set @empProfDetailUid = @empProfDetailUid + 1;

				set _ProcessingResult = 'Insert: employeeprofessiondetail';
                Insert into employeeprofessiondetail values (
					@empProfDetailUid,
                    @employeeId,
                    _FirstName,
					_LastName,
					_Mobile,
                    null,
					_EmailId,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    0,
                    null,
                    utc_date(),
                    null,
                    null
                );

				set @employeePersonalDetailId = 0;
				select EmployeePersonalDetailId into @employeePersonalDetailId from employeepersonaldetail
                order by EmployeePersonalDetailId desc limit 1;
                set @employeePersonalDetailId = @employeePersonalDetailId + 1;

				set _ProcessingResult = 'Insert: employeepersonaldetail';
                Insert into employeepersonaldetail values (
					@employeePersonalDetailId,
					@employeeId,
                    _Mobile,
                    null,
                    _EmailId,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    true,
                    null,
                    null,
                    null,
                    0,
                    null,
                    utc_date(),
                    null,
                    '1970-01-01 00:00:01'
                );

                set @employeeLoginId = 0;
				select EmployeeLoginId into @employeeLoginId from employeelogin
                order by EmployeeLoginId desc limit 1;
                set @employeeLoginId = @employeeLoginId + 1;

				set _ProcessingResult = 'Insert: employeelogin';
				Insert into employeelogin values(
					@employeeLoginId,
					@employeeId,
					@userTypeId,
					@accessLevelId,
					_Password,
					_EmailId,
					_Mobile,
					@organizationId,
					@companyId,
					0,
					null,
					utc_date(),
					null
				);
                set @leaveRequestId = 0;
				select LeaveRequestId from employee_leave_request
                order by LeaveRequestId desc limit 1 into @leaveRequestId;
                set @leaveRequestId = @leaveRequestId + 1;

				set _ProcessingResult = 'Insert: employee_leave_request';
                insert into employee_leave_request values(
					@leaveRequestId,
                    @employeeId,
                    '[]',
                    year(utc_timestamp()),
                    false,
                    0,
                    0,
                    0,
                    0,
                    '[]',
                    utc_date()
                );
                
                set @companySettingId = 0;
				select SettingId from company_setting
                order by SettingId desc limit 1 into @companySettingId;
                set @companySettingId = @companySettingId + 1;

				set _ProcessingResult = 'Insert: company_setting';
                insert into company_setting values(
					@companySettingId,
                    @companyId,
                    _ProbationPeriodInDays,
					_NoticePeriodInDays,
					_NoticePeriodInProbation,
                    _DeclarationStartMonth,
					_DeclarationEndMonth,
					_FinancialYear,
                    20,
				   _CreatedBy,
				   _CreatedBy,
                    utc_date(),
                    utc_date(),
                    true,
                    _AttendanceSubmissionLimit,
                    _TimezoneName,
                    2,
                    20,
                    false,
					'-05:30'
                );

				update org_hierarchy
                set EmployeeId = @employeeId
                where RoleId = 1;
				
                call sp_generate_attendance_initial_partition(); 
                
				set _ProcessingResult = 'inserted';
			end;
			end if;
        end;
        Commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_objective_catagory_appraisal_detail_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_objective_catagory_appraisal_detail_byid`(
	_ObjectiveCatagoryId int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_objective_catagory_appraisal_detail_byid', 1, 0, @Result);
		End;

        Begin
			create temporary table if not exists appraisal_data as (
				select * from appraisal_detail where JSON_CONTAINS(ObjectiveCatagoryId, CAST(_ObjectiveCatagoryId as CHAR)) = 1
			);
			select o.*, c.AppraisalDetailId, c.AppraisalCycleStartDate, c.AppraisalCycleEndDate, c.StartedBy, c.StartedOn, c.IsSelfAppraisal, c.AppraisalName,
            c.IsRequiredRatersFeedback, c.IsRaterSelectedByManager, c.RatersRequired, c.CanRaterViewAppraisal, c.IsActiveCycle, c.MultiraterFeedBackStartDate, 
            c.MultiraterFeedBackEndDate, c.ReviewStartDate, c.ReviewEndDate, c.SelfAppraisalStartDate, c.SelfAppraisalEndDate, c.SelectionPeriodStartDate, 
            c.SelectionPeriodEndDate from objective_catagory o
            inner join appraisal_data c 
            where o.ObjectiveCatagoryId = _ObjectiveCatagoryId;
			
            select * from objective_catagory;
            
             select * from org_hierarchy;
             
             select * from appraisal_chain_level where ObjectiveCatagoryId = _ObjectiveCatagoryId;
             
            drop table if exists appraisal_data;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_objective_catagory_by_emp_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_objective_catagory_by_emp_id`(
        _EmployeeId bigint
        
        # call sp_objective_catagory_by_emp_id(2)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);  
		Call sp_LogException (@Message, '', 'sp_objective_catagory_by_emp_id', 1, 0, @Result);
	end;
	
	set @roleId = 0;
	select DesignationId into @roleId from employees where EmployeeUid = _EmployeeId;

	drop table if exists chain_level;
	create temporary table if not exists chain_level as (
		select * from objective_catagory as o 
		where JSON_CONTAINS(o.RolesId, concat(@roleId), '$')
	);
   
	SELECT *, @roleId as RoleId FROM chain_level;

    drop table if exists chain_level;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_objective_catagory_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_objective_catagory_filter`(
    _objectiveCatagoryType varchar(50),
    _typeDescription varchar(50),
    _rolesId varchar(10),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_objective_catagory_filter', 1, 0, @Result);
		End;
        
        Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'UpdatedOn, CreatedOn Desc';
			End if;
                        
            Select o.*, a.AppraisalCycleStartDate, a.AppraisalCycleEndDate,  a.IsActiveCycle, a.AppraisalDetailId, a.AppraisalName from (
				Select 
					Row_Number() over(Order by o.UpdatedOn) as RowIndex,
					o.*, Count(1) Over() as Total 
				from objective_catagory o 
				Where 1=1 AND
				CASE 
					When _objectiveCatagoryType is not null 
                    then o.ObjectiveCatagoryType like concat('%', _objectiveCatagoryType, '%')
				END OR
				CASE 
					When _typeDescription is not null 
                    then o.TypeDescription like concat('%', _typeDescription , '%')
				END OR
				CASE 
					When _rolesId is not null 
                    then Json_contains(o.RolesId, _rolesId)
				END 
			) o 
            inner join appraisal_detail a 
			on Json_contains(a.ObjectiveCatagoryId, cast(o.ObjectiveCatagoryId as Json), '$')
            where RowIndex between 1 and 10;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_objective_getby_compid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_objective_getby_compid`(	
    _CompanyId int,
    _EmployeeId bigint
    

)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_objective_getby_compid', 1, 0, @Result);
	end;
    
	select p.*, c.FinancialYear, c.DeclarationStartMonth, c.DeclarationEndMonth from performance_objective p 
    inner join company_setting c on p.CompanyId = c.CompanyId
    where c.CompanyId = _CompanyId;
    
    select * from employee_performance where EmployeeId = _EmployeeId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_objective_get_by_employee` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_objective_get_by_employee`(

	_EmployeeId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		drop table if exists catagory_data;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_objective_get_by_employee', 1, 0, @Result);
	end;
    
    set @roleId = 0;
    select DesignationId into @roleId from employees
    where EmployeeUid = _EmployeeId;
    
    create temporary table if not exists catagory_data as (
		select data.ObjectiveId, o.ObjectiveCatagoryId from objective_catagory as o, JSON_TABLE(
			o.ObjectivesId,
			"$[*]"
			COLUMNS(
				ObjectiveId INT PATH "$"
			)
		) data 
		where JSON_CONTAINS(o.RolesId, concat(@roleId), '$')
    );
    
    select distinct p.*, a.AppraisalDetailId, a.AppraisalCycleStartDate, a.AppraisalCycleEndDate from performance_objective p
    inner join catagory_data c on c.ObjectiveId = p.ObjectiveId
    inner join appraisal_detail a 
    where a.isActiveCycle = true;
    
    select * from employee_performance where EmployeeId = _EmployeeId;
    drop table if exists catagory_data;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_objective_get_by_role` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_objective_get_by_role`(

	_ObjectiveCatagoryId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

		Call sp_LogException (@Message, '', 'sp_objective_get_by_role', 1, 0, @Result);
	end;
        
    select * from performance_objective
    where ObjectiveId in (
		select data.ObjectiveId from objective_catagory as o, JSON_TABLE(
			o.ObjectivesId,
			"$[*]"
			COLUMNS(
				ObjectiveId INT PATH "$"
			)
		) data 
		where o.ObjectiveCatagoryId =  _ObjectiveCatagoryId
    );
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_objective_get_by_tag` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_objective_get_by_tag`(
    _ObjectiveCatagoryId int,
    _CompanyId int


	
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_objective_get_by_tag', 1, 0, @Result);
	end;
    
	select 
		p.*,
		c.ObjectiveCatagoryId,  
		c.ObjectiveCatagoryType,
        c.IsTagByDepartment,
        c.IsTagByRole,
        c.FromDate,
        c.ToDate
    from performance_objective p
    inner join objective_catagory c on p.ObjectiveTypeId = c.ObjectiveCatagoryId 
	where p.ObjectiveTypeId = _ObjectiveCatagoryId
    and p.CompanyId = _CompanyId;    
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_OnlineDocument_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_OnlineDocument_Get`(
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_OnlineDocument_Get', 1, 0, @Result);
		End;

        Begin
			If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'CreatedOn, UpdatedOn Desc';
			End if;
            Set @SelectQuery = Concat('Select DocumentId, Title, Description, UserId, FilePath, CreatedOn, Total from (
					Select ROW_NUMBER() Over(Order by ', _sortBy, ') RowIndex,
                    d.DocumentId,
                    d.UserId,
                    d.Title,
                    d.Description,
                    d.FilePath,
                    d.CreatedOn,
                    Count(1) Over() as Total 
                    from documents d
					Inner Join UserDetail ud on ud.UserId = d.UserId
					Where ', _SearchString, '
				)T Where RowIndex between ', ((_PageIndex -1 ) * _PageSize) + 1 ,' And ', (_PageIndex * _PageSize), ''
			);
            
		Select @SelectQuery;
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_organization_detail_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_organization_detail_get`(
    

	
)
Begin
    Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
    		Call sp_LogException (@Message, '', 'sp_organization_detail_get', 1, 0, @Result);
		end;  
        
		select 
			c.CompanyId,
			o.OrganizationId,
			o.OrganizationName,
			c.CompanyName,
			c.CompanyDetail,
			c.SectorType,
			c.Country,
			c.State,
			c.City,
			c.FirstAddress,
			c.SecondAddress,
			c.ThirdAddress,
			c.ForthAddress,
			c.FullAddress,
			c.MobileNo,
			c.Email,
			c.FirstEmail,
			c.SecondEmail,
			c.ThirdEmail,
			c.ForthEmail,
			c.PrimaryPhoneNo,
			c.SecondaryPhoneNo,
			c.Fax,
			c.Pincode,
			c.LegalDocumentPath,
			c.LegalEntity,
			c.TypeOfBusiness,
			c.InCorporationDate,
			c.IsPrimaryCompany,
			c.FixedComponentsId,
			b.BankAccountId,
			b.BankName,
			b.BranchCode,
			b.Branch,
			b.IFSC,
            c.FileId,
			b.AccountNo,
			b.OpeningDate,
			b.ClosingDate,
			c.PANNo,
			c.GSTNo,
			c.TradeLicenseNo,
			o.OrgMobileNo,
			o.OrgEmail,
			o.OrgPrimaryPhoneNo,
			o.OrgSecondaryPhoneNo,
			o.OrgFax
        from organization_detail o
        inner join company c on o.OrganizationId = c.OrganizationId
        inner join bank_accounts b on b.OrganizationId = c.OrganizationId where b.IsPrimaryAccount = true;
		
        select * from userfiledetail
        where UserTypeId = 7;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_organization_detail_intupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_organization_detail_intupd`(
	_OrganizationId int,
	_OrganizationName varchar(250),
    _SectorType int,
    _Country varchar(50),
    _State varchar(100),
    _City varchar(100),
    _FirstAddress varchar(100),
    _SecondAddress varchar(100),
    _ThirdAddress varchar(100),
    _FourthAddress varchar(100),
    _FullAddress varchar(150),
    _MobileNo varchar(20),
    _Email varchar(50),
    _PrimaryPhoneNo varchar(20),
    _SecondaryPhoneNo varchar(20),
    _Fax varchar(50),
    _Pincode int,
    _FileId bigint,
    _PANNumber varchar(20),
    _TradeLicenseNumber varchar(50),
    _GSTINNumber varchar(50),
    _LegalDocumentPath varchar(250),
    _LegalEntity varchar(50),
    _LegalNameOfCompany varchar(100),
    _TypeOfBusiness varchar(150),    
    _InCorporationDate datetime,
	out _ProcessingResult varchar(50)
    

	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_organization_detail_intupd', 1, 0, @Result);
			end;  
                        
            if not exists(select 1 from organization_detail where OrganizationId = _OrganizationId) then
            begin
				if exists(select 1 from organization_detail where lower(LegalNameOfCompany) = lower(_LegalNameOfCompany)) then
                begin
					select OrganizationId from organization_detail 
                    where lower(LegalNameOfCompany) = lower(_LegalNameOfCompany) into _OrganizationId;
                end;
                end if;
            end;
            end if;
            
		
			if not exists(select 1 from organization_detail where OrganizationId = _OrganizationId) then
            begin
				Insert into organization_detail values(
					default,
					_OrganizationName,
					_SectorType,
					_Country,
					_State,
					_City,
					_FirstAddress,
					_SecondAddress,
					_ThirdAddress,
					_FourthAddress,
					_FullAddress,
					_MobileNo,
					_Email,
					_PrimaryPhoneNo,
					_SecondaryPhoneNo,
					_Fax,
					_Pincode,
					_FileId,
					_PANNumber,
					_TradeLicenseNumber,
					_GSTINNumber,
					_LegalDocumentPath,
					_LegalEntity,
					_LegalNameOfCompany,
					_TypeOfBusiness,    
					_InCorporationDate,
					now()
				);
                
                Set _ProcessingResult = 'inserted';
			end;
            else 
            begin
				Update organization_detail Set
					OrganizationName			=			_OrganizationName,
					SectorType                 	=			_SectorType,
					Country                		=			_Country,
					State                  		=			_State,
					City                 		=			_City,
					FirstAddress                =			_FirstAddress,
					SecondAddress               =			_SecondAddress,
					ThirdAddress                =			_ThirdAddress,
					FourthAddress               =			_FourthAddress,
					FullAddress                 =			_FullAddress,
					MobileNo                 	=			_MobileNo,
					Email                  		=			_Email,
					PrimaryPhoneNo              =			_PrimaryPhoneNo,
					SecondaryPhoneNo            =			_SecondaryPhoneNo,
					Fax                  		=			_Fax,
					Pincode                  	=			_Pincode,
					FileId                 		=			_FileId,
					PANNumber                  	=			_PANNumber,
					TradeLicenseNumber          =			_TradeLicenseNumber,
					GSTINNumber                 =			_GSTINNumber,
					LegalDocumentPath           =			_LegalDocumentPath,
					LegalEntity                 =			_LegalEntity,
					LegalNameOfCompany          =			_LegalNameOfCompany,
					TypeOfBusiness              =			_TypeOfBusiness,    
					InCorporationDate           =			_InCorporationDate,
					UpdatedOn					=			now()
                where OrganizationId = _OrganizationId;
                
                Set _ProcessingResult = 'updated';
            end;
            end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_organization_intupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_organization_intupd`(
	_CompanyId int,
	_OrganizationId int,
	_OrganizationName varchar(250),
	_CompanyName varchar(150),
	_CompanyDetail varchar(250),
	_SectorType int,
	_Country varchar(50),
	_State varchar(100),
	_City varchar(100),
	_FirstAddress varchar(100),
	_SecondAddress varchar(100),
	_ThirdAddress varchar(100),
	_ForthAddress varchar(100),
	_FullAddress varchar(150),
	_MobileNo varchar(20),
	_Email varchar(50),
	_FirstEmail varchar(100),
	_SecondEmail varchar(100),
	_ThirdEmail varchar(100),
	_ForthEmail varchar(100),
	_PrimaryPhoneNo varchar(20),
	_SecondaryPhoneNo varchar(20),
	_Fax varchar(50),
	_Pincode int,
	_FileId bigint,
	_LegalDocumentPath varchar(250),
	_LegalEntity varchar(50),
	_TypeOfBusiness varchar(150),
	_InCorporationDate datetime,
	_IsPrimaryCompany bit(1),
	_FixedComponentsId json,    
	_BankAccountId int,
	_BankName varchar(100),
	_BranchCode varchar(20),
	_Branch varchar(50),
	_IFSC varchar(20),
	_AccountNo varchar(45),
	_OpeningDate datetime,
	_ClosingDate datetime,
	_PANNo varchar(20),
	_GSTNo varchar(50),
	_TradeLicenseNo varchar(50),
	_OrgMobileNo varchar(20),
	_OrgEmail varchar(50),
	_OrgPrimaryPhoneNo varchar(20),
	_OrgSecondaryPhoneNo varchar(20),
	_OrgFax varchar(50),
    _IsPrimaryAccount bit,
    _AdminId long,    
	out _ProcessingResult varchar(50)
    

	
)
Begin
    Set @OperationStatus = '';
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Rollback;
			Call sp_LogException (@Message, @OperationStatus, 'sp_organization_intupd', 1, 0, @Result);
		end;  
        
		Start Transaction;
		begin
        
            
			if not exists(select 1 from organization_detail where OrganizationId = _OrganizationId) then
			begin               
				Set @@SESSION.information_schema_stats_expiry = 0;

				SELECT AUTO_INCREMENT into _OrganizationId
				FROM information_schema.tables
				WHERE table_name = 'organization_detail'
				AND table_schema = DATABASE();	
				
				insert into organization_detail values(
					_OrganizationId,
					_OrganizationName,
					_OrgMobileNo,
					_OrgEmail,
					_OrgPrimaryPhoneNo,
					_OrgSecondaryPhoneNo,
					_OrgFax,
					_AdminId,
					null,
					utc_date(),
					null
				);
			end;
            else
            begin
				update organization_detail set
					OrganizationName					=			_OrganizationName,
					OrgMobileNo							=			_OrgMobileNo,
					OrgEmail							=			_OrgEmail,
					OrgPrimaryPhoneNo					=			_OrgPrimaryPhoneNo,
					OrgSecondaryPhoneNo					=			_OrgSecondaryPhoneNo,
					OrgFax								=			_OrgFax,
					UpdatedBy							=			_AdminId,
                    UpdatedOn							=			utc_date()
				where OrganizationId = _OrganizationId;
            end;
			end if;
					
			if not exists(select 1 from company where CompanyId = _CompanyId) then
			begin
				Set @@SESSION.information_schema_stats_expiry = 0;
				SELECT AUTO_INCREMENT into _CompanyId
				FROM information_schema.tables
				WHERE table_name = 'company'
				AND table_schema = DATABASE();	
				Insert into company values(
					_CompanyId,
					_OrganizationId,
					_OrganizationName,
					_CompanyName,
					_CompanyDetail,
					_SectorType,
					_Country,
					_State,
					_City,
					_FirstAddress,
					_SecondAddress,
					_ThirdAddress,
					_ForthAddress,
					_FullAddress,
					_MobileNo,
					_Email,
					_FirstEmail,
					_SecondEmail,
					_ThirdEmail,
					_ForthEmail,
					_PrimaryPhoneNo,
					_SecondaryPhoneNo,
					_Fax,
					_Pincode,
					_FileId,
					_LegalDocumentPath,
					_LegalEntity,
					_TypeOfBusiness,
					_InCorporationDate,
                    _PANNo,
					_GSTNo,
					_TradeLicenseNo,
					_IsPrimaryCompany,
					_FixedComponentsId,
					_AdminId,
					null,
					utc_date(),
					null
				);
			end;
            else
            begin
				update company set
					OrganizationId					=			_OrganizationId,
					OrganizationName				=			_OrganizationName,
					CompanyName						=			_CompanyName,
					CompanyDetail					=			_CompanyDetail,
					SectorType						=			_SectorType,
					Country							=			_Country,
					State							=			_State,
					City							=			_City,
					FirstAddress					=			_FirstAddress,
					SecondAddress					=			_SecondAddress,
					ThirdAddress					=			_ThirdAddress,
					ForthAddress					=			_ForthAddress,
					FullAddress						=			_FullAddress,
					MobileNo						=			_MobileNo,
					Email							=			_Email,
					FirstEmail						=			_FirstEmail,
					SecondEmail						=			_SecondEmail,
					ThirdEmail						=			_ThirdEmail,
					ForthEmail						=			_ForthEmail,
					PrimaryPhoneNo					=			_PrimaryPhoneNo,
					SecondaryPhoneNo				=			_SecondaryPhoneNo,
					Fax								=			_Fax,
					Pincode							=			_Pincode,
					FileId							=			_FileId,
					LegalDocumentPath				=			_LegalDocumentPath,
					LegalEntity						=			_LegalEntity,
					PANNo							=			_PANNo,
					GSTNo							=			_GSTNo,
					TradeLicenseNo					=			_TradeLicenseNo,
					TypeOfBusiness					=			_TypeOfBusiness,
					InCorporationDate				=			_InCorporationDate,
					IsPrimaryCompany				=			_IsPrimaryCompany,
					FixedComponentsId				=			_FixedComponentsId,
					UpdatedBy						=			_AdminId,
                    UpdatedOn						=			utc_date()
				where CompanyId 	= 	_CompanyId;
            end;
			end if;

			if not exists(select 1 from bank_accounts where BankAccountId = _BankAccountId) then
			begin
				insert into bank_accounts value(
					default,
					_OrganizationId,
					_CompanyId,
					_BankName,
					_BranchCode,
					_Branch,
					_IFSC,
					_AccountNo,
					_OpeningDate,
					_ClosingDate,
                    _IsPrimaryAccount,
					_AdminId,
					null,
					utc_date(),
					null
				);
			end;
            else
            begin
				update bank_accounts set
					BankName							=			_BankName,
					BranchCode							=			_BranchCode,
					Branch								=			_Branch,
					IFSC								=			_IFSC,
					AccountNo							=			_AccountNo,
					OpeningDate							=			_OpeningDate,
					ClosingDate							=			_ClosingDate,
                    IsPrimaryAccount					=			_IsPrimaryAccount,
					UpdatedBy							=			_AdminId,
                    UpdatedOn							=			utc_date()
				where BankAccountId = _BankAccountId;
            end;
			end if;
		end;
		Commit;
		Set _ProcessingResult = 'updated';
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_organization_setting_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_organization_setting_get`(


	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_organization_setting_get', 1, 0, @Result);
			end;  
            
			Select * from organization_detail;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_organization_setting_getById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_organization_setting_getById`(
	_OrganizationId int,
	_OrganizationName varchar(250)


	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_organization_setting_getById', 1, 0, @Result);
			end;  
            
			Select * from organization_detail
			where OrganizationId = _OrganizationId
            and OrganizationName = _OrganizationName;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_org_hierarchy_chail_discover` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_org_hierarchy_chail_discover`(
	_EmployeeId bigint,
    _FindParents bit,
    _CompanyId int,
    _ProjectId int,
    _ObjectiveCatagoryId int
    
/*

	call sp_org_hierarchy_chail_discover(2, 0, 0, 1, 1);
    
    call sp_org_hierarchy_chail_discover(4, 1, 1, 1, 1);
 
*/


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Drop temporary table if exists hierarchy_detail;                                    
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_org_hierarchy_chail_discover', 1, 0, @Result);
	End;
    
    set @designationId = 0;
    Select DesignationId into @designationId from employees where EmployeeUid = _EmployeeId;
    
    Drop temporary table if exists hierarchy_detail;
    
    set @rowId = 0;
    if (_FindParents = 0) then
    begin		
		Create temporary table hierarchy_detail As
		Select * from(
			with recursive cte
			as
			(	
				select *, @rowId:= @rowId + 1 as RowId 
                from org_hierarchy where RoleId = @designationId
				
				union all
				
				select o.*, @rowId:= @rowId + 1 as RowId from org_hierarchy o
				inner join cte on cte.RoleId = o.ParentNode
			) select cte.RoleId from cte
		) as T;
	end;
    else 
    begin
		Create temporary table hierarchy_detail As
		Select * from (
			with recursive cte
			as
			(	
				select *, @rowId:= @rowId + 1 as RowId
                from org_hierarchy where RoleId = @designationId
				
				union all
				
				select o.*, @rowId:= @rowId + 1 as RowId from org_hierarchy o
				inner join cte on cte.ParentNode = o.RoleId
			) 
			select * from cte
			where cte.IsDepartment = 0
			and cte.IsActive = true
			and CompanyId = _CompanyId
		) as T;
    end;
    end if;

	select 
		h.RoleName, 
		h.RoleId as DesignationId,
        h.CompanyId,
		_ProjectId ProjectId, 
		coalesce(m.EmployeeId, e.EmployeeUid) EmployeeId, 
		coalesce(m.FullName, Concat(e.FirstName, ' ', e.LastName)) FullName, 
		coalesce(m.Email, e.Email) Email,
        a.IsOptional,
        a.RoleId
	from hierarchy_detail h
	inner join appraisal_chain_level a on a.ApprovalRoleId = h.RoleId
	left join (
		Select * from project_members_detail 
		where ProjectId = _ProjectId
        and IsActive = true
	) m on h.RoleId = m.MemberType
    left join employees e on e.EmployeeUid = h.EmployeeId
	where a.RoleId = @designationId
	and a.ObjectiveCatagoryId = _ObjectiveCatagoryId
	and a.IsActive = true   
    and (m.EmployeeId is not null or e.EmployeeUid is not null)
    order by h.RowId;
    
    Drop temporary table if exists hierarchy_detail;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_org_hierarchy_highlevel_byId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_org_hierarchy_highlevel_byId`(
    _CompanyId int

	-- call sp_org_hierarchy_highlevel_byId(2)
)
Begin
    Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
    		Call sp_LogException (@Message, '', 'sp_org_hierarchy_highlevel_byId', 1, 0, @Result);
		end;  
        
		select * from org_hierarchy
        where (ParentNode = 0 or ParentNode = 1)
        and IsActive = true
        and IsDepartment = false
        and CompanyId = _CompanyId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_org_setup_isready` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_org_setup_isready`(	
    _CompanyId int,
    out _ProcessingResult varchar(100)
/*

	set @result= '';
	call sp_org_setup_isready(1, @result);
	select @result;

*/

)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_org_setup_isready', 1, 0, @Result);
		End;

		set @setup_state = 0;        
		if exists(select 1 from payroll_cycle_setting) then
			set @setup_state = @setup_state + 1;
        end if;

		if exists(select 1 from leave_plan) then
			set @setup_state = @setup_state + 1;
        end if;
        
        set _ProcessingResult = @setup_state;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_parent_test_ins_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_parent_test_ins_upd`(

	_ParentId int,
    _Name varchar(50),
	out _ProcessingResult varchar(50)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

		Call sp_LogException (@Message, '', 'sp_parent_test_ins_upd', 1, 0, @Result);
	end;
    
    if not exists(select 1 from parent_test where ParentId = _ParentId) then
    begin
		set @parentId = 0;
		select ParentId into @parentId from parent_test order by ParentId desc limit 1;
		set @parentId = @parentId + 1;
        
        insert into parent_test values(@parentId, _Name);
        set _ProcessingResult = @parentId;
    end;
    else
    begin
		update parent_test set 
			Name = _Name
		where ParentId = _ParentId;
        
        set _ProcessingResult = _ParentId;
    end;
    end if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_password_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_password_get`(


	_UserId bigint,
	_MobileNo varchar(20),
	_EmailId varchar(50)
)
Begin
    Set @OperationStatus = '';
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, @OperationStatus, 'sp_password_get', 1, 0, @Result);
		end;  
	

		Select e.*, c.CompanyName from employeelogin e 
        inner join company c on e.CompanyId = c.CompanyId
        where (e.Email = _EmailId Or e.Mobile = _MobileNo);
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_password_get_by_email_mobile` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_password_get_by_email_mobile`(


	_UserId bigint,
	_MobileNo varchar(20),
	_EmailId varchar(50)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, @OperationStatus, 'sp_password_get_by_email_mobile', 1, 0, @Result);
	end;  


	Select * from employeelogin 
	where 
    Case
		When _EmailId is not null And _EmailId <> '' Then Email = _EmailId 
        Else Mobile = _MobileNo
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_payroll_and_salary_detail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_payroll_and_salary_detail_insupd`(
	_PayrollMonthlyDetailId int,
	_EmployeeId bigint,
    _TaxDetail json,
    _GrossTotal decimal,
    _CompleteSalaryDetail json,
    _ForYear int, 
    _ForMonth int,
    _PayableToEmployee decimal,
    _PFByEmployer decimal,
    _PFByEmployee decimal,
    _ProfessionalTax decimal,
    _TotalDeduction decimal,
    _PayrollStatus int,
    _PaymentRunDate datetime,
    _ExecutedBy bigint,
    _ExecutedOn datetime,
    _CompanyId int,
    out _ProcessingResult varchar(50)

/*

	call sp_payroll_and_salary_detail_insupd();

*/
)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
													
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
            Rollback;            
			Call sp_LogException(@Message, '', 'sp_payroll_and_salary_detail_insupd', 1, 0, @Result);
		End;
		
        Start Transaction;
        Begin
			if not exists(select 1 from payroll_monthly_detail 
							where ForYear = _ForYear 
							and ForMonth = _ForMonth
							and EmployeeId = _EmployeeId) then
			begin
				
				set @PayrollMonthlyDetailId = 0;
				select PayrollMonthlyDetailId into @PayrollMonthlyDetailId from payroll_monthly_detail
				order by PayrollMonthlyDetailId desc limit 1;
				
				set @PayrollMonthlyDetailId = @PayrollMonthlyDetailId + 1;
				
				insert into payroll_monthly_detail values(
					@PayrollMonthlyDetailId,
					_EmployeeId,
					_ForYear, 
					_ForMonth,
                    _GrossTotal,
					_PayableToEmployee,
					_PFByEmployer,
					_PFByEmployee,
					_ProfessionalTax,
					_TotalDeduction,
					_PayrollStatus,
					_PaymentRunDate,
					_ExecutedBy,
					_ExecutedOn,
					_CompanyId
				);
			end;
			else 
			begin
				set @PayrollMonthlyDetailId = 0;
				select PayrollMonthlyDetailId into @PayrollMonthlyDetailId 
				from payroll_monthly_detail where ForYear = _ForYear 
							and ForMonth = _ForMonth
							and EmployeeId = _EmployeeId;
				
				update payroll_monthly_detail set
						ForYear							=			_ForYear, 
						ForMonth						=			_ForMonth,
                        GrossTotal						=			_GrossTotal,
						PayableToEmployee				=			_PayableToEmployee,
						PFByEmployer					=			_PFByEmployer,
						PFByEmployee					=			_PFByEmployee,
						ProfessionalTax					=			_ProfessionalTax,
						TotalDeduction					=			_TotalDeduction,
						PayrollStatus					=			_PayrollStatus,
						PaymentRunDate					=			_PaymentRunDate,
						ExecutedBy						=			_ExecutedBy,
						ExecutedOn						=			_ExecutedOn,
						CompanyId						= 			_CompanyId
				where PayrollMonthlyDetailId 			= 			@PayrollMonthlyDetailId;
			end;
			end if;
			
			update employee_salary_detail set	
				TaxDetail				=		_TaxDetail,
				CompleteSalaryDetail	=		_CompleteSalaryDetail
			where EmployeeId = _EmployeeId;
			Set _ProcessingResult = 'updated'; 
		end;
        
        commit;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_payroll_cycle_setting_getById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_payroll_cycle_setting_getById`(


	
    _CompanyId int
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_payroll_cycle_setting_getById', 1, 0, @Result);
		end;  
		
		Select * from payroll_cycle_setting
        where CompanyId = _CompanyId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_payroll_cycle_setting_get_all` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_payroll_cycle_setting_get_all`(
	# call sp_payroll_cycle_setting_get_all(1)
	_CompanyId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_payroll_cycle_setting_get_all', 1, 0, @Result);
	end;  
	
	Select p.*, s.TimezoneName, 
		s.DeclarationStartMonth, 
        s.DeclarationEndMonth, 
        s.FinancialYear,
        c.State from payroll_cycle_setting p
    inner join company_setting s on s.CompanyId = p.CompanyId
    inner join company c on c.CompanyId = s.CompanyId;
    
	Select * from salary_components;

	select * from surcharge_slab;

	select p.* from ptax_slab p;
    
    select * from work_shifts;
    
    select * from company where CompanyId = _CompanyId;
    
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_payroll_cycle_setting_intupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_payroll_cycle_setting_intupd`(


	_PayrollCycleSettingId int,
    _CompanyId int,
    _OrganizationId int,
    _PayFrequency varchar(45),
    _PayCycleMonth int,
    _PayCycleDayOfMonth int,
    _PayCalculationId int,
    _IsExcludeWeeklyOffs bit,
    _IsExcludeHolidays bit,
    _DeclarationEndMonth int,
    _AdminId bigint,
    out _ProcessingResult varchar(50)
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_payroll_cycle_setting_intupd', 1, 0, @Result);
		end;  
		
        if not exists(Select 1 from payroll_cycle_setting where PayrollCycleSettingId = _PayrollCycleSettingId) then
        begin
			set @payrollId = 0;
            select PayrollCycleSettingId into @payrollId from payroll_cycle_setting 
            order by PayrollCycleSettingId desc limit 1;
            set @payrollId = @payrollId + 1;
        
			Insert into payroll_cycle_setting
			values(
				@payrollId,
				_CompanyId,
				_OrganizationId,
				_PayFrequency,
				_PayCycleMonth,
				_PayCycleDayOfMonth,
				_PayCalculationId,
				_IsExcludeWeeklyOffs,
				_IsExcludeHolidays,
				_AdminId,
                now()
            );
            
            Set _ProcessingResult = 'inserted';
		end;
        else
        begin
			Update payroll_cycle_setting set
				CompanyId					=			_CompanyId,
				OrganizationId				=			_OrganizationId,
				PayFrequency				=			_PayFrequency,
				PayCycleMonth				=			_PayCycleMonth,
				PayCycleDayOfMonth			=			_PayCycleDayOfMonth,
				PayCalculationId			=			_PayCalculationId,
				IsExcludeWeeklyOffs			=			_IsExcludeWeeklyOffs,
				IsExcludeHolidays			=			_IsExcludeHolidays,
				CreatedBy 					=			_AdminId,
                CreatedOn					=			now()
			where PayrollCycleSettingId = _PayrollCycleSettingId;
            
            Set _ProcessingResult = 'updated';
        end;
        end if;
        
        update company_setting set
			DeclarationEndMonth 		=		_DeclarationEndMonth,
            DeclarationStartMonth 		= 		_PayCycleMonth
		where CompanyId = _CompanyId;
			
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_payroll_monthly_detail_get_processed_data` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_payroll_monthly_detail_get_processed_data`(
    _ForYear int,
    _ForMonth int,
    _CompanyId int
    


)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_payroll_monthly_detail_get_processed_data', 1, 0, @Result);
		End;
        
        if not exists(select * from salary_run_config_processing where ForYear = _ForYear and ForMonth = _ForMonth) then
        begin
			insert into salary_run_config_processing
            value(
				default,
                _ForMonth,
                _ForYear,
                0,
                _CompanyId
            );
        end;
        end if;
        
        set @totalEmployees = 0;
        select count(1) into @totalEmployees from employees
        where IsActive = 1 and CompanyId = _CompanyId;
        
		set @processingStatus = 0;
        select ProcessingStatus into @processingStatus from salary_run_config_processing
        where ForYear = _ForYear 
        and ForMonth = _ForMonth
        and CompanyId = _CompanyId;
		
        if exists (select 1 from payroll_monthly_detail where ForYear = _ForYear 
        and ForMonth = _ForMonth
        and CompanyId = _CompanyId) then
        begin
			select 
				count(1) EmployeeCount,
				ForMonth,
				ForYear,
				sum(PayableToEmployee) TotalPayableToEmployees, 
				sum(PFByEmployee) TotalPFByEmployee, 
				sum(PFByEmployer) TotalPFByEmployer,
				sum(TotalDeduction) TotalDeduction,
				sum(ProfessionalTax) TotalProfessionalTax,
				PayrollStatus,
				Date(ExecutedOn) ProcessOn,
				@totalEmployees TotalEmployees ,
				@processingStatus ProcessingStatus
			from payroll_monthly_detail
			where ForYear = _ForYear 
			and ForMonth = _ForMonth
			and CompanyId = _CompanyId
			group by PayrollStatus, ForMonth, ForYear, Date(ExecutedOn);
        end;
        else
        begin
			select 
				0 as EmployeeCount,
				_ForMonth as ForMonth,
				_ForYear ForYear,
				0 as TotalPayableToEmployees,
				0 as TotalPFByEmployee,
				0 as TotalPFByEmployer,
				0 as TotalDeduction,
				0 as TotalProfessionalTax,
				0 as PayrollStatus,
				null as ProcessOn,
				@totalEmployees as TotalEmployees, 
				@processingStatus as ProcessingStatus;
        end;
        end if;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_payroll_monthly_detail_sel_by_month` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_payroll_monthly_detail_sel_by_month`(
    _ForYear int, 
    _ForMonth int
    


)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_payroll_monthly_detail_sel_by_month', 1, 0, @Result);
		End;
		
        select * from payroll_monthly_detail
        where ForYear = _ForYear and ForMonth = _ForMonth;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_payslip_detail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_payslip_detail`(

	# call sp_payslip_detail(2, 'Company Primary Logo', 1, 2024);
    _EmployeeId bigint,
    _FileRole varchar(100),
    _FromDate datetime,
    _ToDate datetime
)
Begin
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
                                            
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, '', 'sp_payslip_detail', 1, 0, @Result);
			end;
            
            
            set @companyId = 0;
			select CompanyId into @companyId from employees
			where EmployeeUid = _EmployeeId;

            Select * from company 
            where CompanyId = @companyId;
            
           Select emp.EmployeeUid, 
					emp.FirstName,
					emp.LastName,
                    emp.Email,
                    emp.DesignationId,
					eprof.AadharNo,
					eprof.PANNo,
					eprof.AccountNumber,
					eprof.BankName,
					eprof.IFSCCode,
                    emp.CreatedOn,
                    epf.PFNumber,
					epf.UniversalAccountNumber
				from employees emp
				left join employeeprofessiondetail eprof on emp.EmployeeUid = eprof.EmployeeUid
                left Join employee_pf_detail epf on emp.EmployeeUid = epf.EmployeeId 
                where emp.EmployeeUid = _EmployeeId;
            
            select * from employee_salary_detail
            where EmployeeId = _EmployeeId;
            
            select * from daily_attendance a
            where a.EmployeeId = _EmployeeId
            and a.AttendanceDate between _FromDate and _ToDate;
            
            set @stateName = '';
            select State into @stateName from company where CompanyId = @companyId;
			select * from ptax_slab where LOWER(StateName) = LOWER(@stateName);
            
            select * from org_hierarchy where CompanyId = 1;
            -- select * from employee_roles;
            
            select 
				CompanyFileId FileId, 
				CompanyId,
				FileName,
				FileDescription,
				FilePath,
				FileRole,
				FileExtension
			from company_files
			where CompanyId = @companyId
			and FileRole = _FileRole;

			select n.* from leave_request_notification n
            inner join leave_plans_type l on n.LeaveTypeId = l.LeavePlanTypeId
            where n.EmployeeId = _EmployeeId 
            and l.IsPaidLeave = true
            and n.RequestStatusId = (select ItemStatusId from itemstatus Where Status = 'Approved');

		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_pay_calculation_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_pay_calculation_get`(


	
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_pay_calculation_get', 1, 0, @Result);
		end;  
		
		Select * from pay_calculation;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_pay_calculation_intupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_pay_calculation_intupd`(

	_PayCalculationId int,
	_PayCalculationDesc varchar(250),
    out _ProcessingResult varchar(50)

	
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_pay_calculation_intupd', 1, 0, @Result);
		end;  
		
        if not exists(Select 1 from pay_calculation where PayCalculationId = _PayCalculationId) then
        begin
			Insert into pay_calculation
			values(default, _PayCalculationDesc);
            
            Set _ProcessingResult = 'inserted';
		end;
        else
        begin
			Update pay_calculation set
				_PayCalculationDesc		=	_PayCalculationDesc
			where PayCalculationId = _PayCalculationId;
            
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_performance_objective_getby_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_performance_objective_getby_filter`(
	_SearchString varchar(250),
	_SortBy varchar(50),
	_PageIndex int,
	_PageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_performance_objective_getby_filter', 1, 0, @Result);
		End;

        Begin
			If(_SortBy is NULL OR _SortBy = '') then
				Set _SortBy = 'UpdatedOn Desc';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					o.*,
					Count(1) Over() as Total from performance_objective o
				Where ', _SearchString, '
			)o where RowIndex between ', ((_pageIndex - 1 ) * _pageSize + 1), ' and ', (_pageIndex * _pageSize));
            
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;
		End;
        
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_performance_objective_get_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_performance_objective_get_by_id`(


	_ObjectiveId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_performance_objective_get_by_id', 1, 0, @Result);
	end;
    
    select * from performance_objective
	where ObjectiveId = _ObjectiveId;
    
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_performance_objective_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_performance_objective_insupd`(



	_ObjectiveId bigint,
    _Objective varchar(100),
    _Description varchar(800),
	_TimeFrameStart datetime,
    _TimeFrmaeEnd datetime,
    _ObjSeeType bit,
    _ObjectiveType varchar(100),
    _Tag varchar(100),
    _IsIncludeReview bit,
    _ProgressMeassureType int,
    _StartValue DECIMAL(10,2),
    _TargetValue DECIMAL(10,2),
	_IsDefaultObjective bit,
    _CompanyId int,
    _AdminId bigint,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_performance_objective_insupd', 1, 0, @Result);
	end;
	
	Set _ProcessingResult = '';
	Begin
		If not exists (Select 1 from performance_objective where ObjectiveId = _ObjectiveId) then
		Begin
			set @objectiveId = 0;
            select ObjectiveId into @objectiveId from performance_objective
            order by ObjectiveId desc limit 1;
            set @objectiveId = @objectiveId + 1;
			
			Insert into performance_objective values(
				@objectiveId,
				_Objective,
				_Description,
				_TimeFrameStart,
				_TimeFrmaeEnd,
				_ObjSeeType,
				_ObjectiveType,
				_Tag,
				_IsIncludeReview,
				_ProgressMeassureType,
				_StartValue,
				_TargetValue,
				_IsDefaultObjective,
				_CompanyId,
                _AdminId,
                null,
                utc_timestamp(),
                null
			);
			
			Set _ProcessingResult = 'inserted';
		End;
		Else
		Begin
			Update performance_objective Set
				Objective						=				_Objective,
				Description						=				_Description,
				TimeFrameStart					=				_TimeFrameStart,
				TimeFrmaeEnd					=				_TimeFrmaeEnd,
				ObjSeeType						=				_ObjSeeType,
				ObjectiveType					=				_ObjectiveType,
				Tag								=				_Tag,
				IsIncludeReview					=				_IsIncludeReview,
				ProgressMeassureType			=				_ProgressMeassureType,
				StartValue						=				_StartValue,
				TargetValue						=				_TargetValue,
				IsDefaultObjective				=				_IsDefaultObjective,
                UpdatedBy						=				_AdminId,
                UpdatedOn						=				utc_timestamp()
			where 	ObjectiveId 				= 				_ObjectiveId;
			
			Set _ProcessingResult = 'updated';
		End;
		End if;	
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_pf_esi_setting_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_pf_esi_setting_get`(

	_CompanyId int

	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_pf_esi_setting_get', 1, 0, @Result);
			end;  
		
		select * from pf_esi_setting
        where CompanyId = _CompanyId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_pf_esi_setting_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_pf_esi_setting_insupd`(


	_PfEsi_setting_Id int,
    _CompanyId int,
	_PFEnable bit,
	_IsPfAmountLimitStatutory bit,
	_IsPfCalculateInPercentage bit,
	_IsAllowOverridingPf bit,
	_IsPfEmployerContribution bit,
	_EmployerPFLimit decimal,
	_IsHidePfEmployer bit,
	_IsPayOtherCharges bit,
	_IsAllowVPF bit,
	_EsiEnable bit,
	_MaximumGrossForESI decimal,
	_EsiEmployeeContribution decimal(10,2),
	_EsiEmployerContribution decimal(10,2),
	_IsAllowOverridingEsi bit,
	_IsHideEsiEmployer bit,
	_IsEsiExcludeEmployerShare bit,
	_IsEsiExcludeEmployeeGratuity bit,
	_IsEsiEmployerContributionOutside bit,
	_IsRestrictEsi bit,
	_IsIncludeBonusEsiEligibility bit,
	_IsIncludeBonusEsiContribution bit,
	_IsEmployerPFLimitContribution bit,
    _Admin bigint,
    out _ProcessingResult varchar(100)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_pf_esi_setting_insupd', 1, 0, @Result);
			end;  
		
		if not exists(select 1 from pf_esi_setting where PfEsi_setting_Id = _PfEsi_setting_Id) then
        begin
			insert into pf_esi_setting
            values(
				default,
				_CompanyId,
				_PFEnable,
				_IsPfAmountLimitStatutory,
				_IsPfCalculateInPercentage,
				_IsAllowOverridingPf,
				_IsPfEmployerContribution,
				_EmployerPFLimit,
				_IsHidePfEmployer,
				_IsPayOtherCharges,
				_IsAllowVPF,
				_EsiEnable,
				_MaximumGrossForESI,
				_EsiEmployeeContribution,
				_EsiEmployerContribution,
				_IsAllowOverridingEsi,
				_IsHideEsiEmployer,
				_IsEsiExcludeEmployerShare,
				_IsEsiExcludeEmployeeGratuity,
				_IsEsiEmployerContributionOutside,
				_IsRestrictEsi,
				_IsIncludeBonusEsiEligibility,
				_IsIncludeBonusEsiContribution,
				_IsEmployerPFLimitContribution,
				utc_date(),
				null,
				_Admin,
				null
            );
            
            Set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update pf_esi_setting set				
				PFEnable           						=       _PFEnable,
				IsPfAmountLimitStatutory        	    =       _IsPfAmountLimitStatutory,
				IsPfCalculateInPercentage       	    =       _IsPfCalculateInPercentage,
				IsAllowOverridingPf        				=       _IsAllowOverridingPf,
				IsPfEmployerContribution            	=       _IsPfEmployerContribution,
				IsHidePfEmployer            			=       _IsHidePfEmployer,
				IsPayOtherCharges           			=       _IsPayOtherCharges,
				IsAllowVPF          					=       _IsAllowVPF,
				EsiEnable         					  	=       _EsiEnable,
				IsAllowOverridingEsi            		=       _IsAllowOverridingEsi,
				IsHideEsiEmployer           			=       _IsHideEsiEmployer,
				IsEsiExcludeEmployerShare           	=       _IsEsiExcludeEmployerShare,
				IsEsiExcludeEmployeeGratuity            =       _IsEsiExcludeEmployeeGratuity,
				IsEsiEmployerContributionOutside        =       _IsEsiEmployerContributionOutside,
				IsRestrictEsi           				=       _IsRestrictEsi,
				IsIncludeBonusEsiEligibility            =       _IsIncludeBonusEsiEligibility,
				IsIncludeBonusEsiContribution           =       _IsIncludeBonusEsiContribution,
				IsEmployerPFLimitContribution           =       _IsEmployerPFLimitContribution,
				EmployerPFLimit         				=       _EmployerPFLimit,
				MaximumGrossForESI          			=       _MaximumGrossForESI,
				EsiEmployeeContribution         		=       _EsiEmployeeContribution,
				EsiEmployerContribution             	= 		_EsiEmployerContribution,
				UpdatedBy								=		_Admin,
                UpdatedOn								=		utc_date()
            where PfEsi_setting_Id = _PfEsi_setting_Id;
            
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_prdoduct_getby_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_prdoduct_getby_id`(
	_ProductId long
    


)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_prdoduct_getby_id', 1, 0, @Result);
		End;
		     
        select *
		from product
        where ProductId = _ProductId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_previous_employement_and_salary_details_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_previous_employement_and_salary_details_by_empid`(


	_EmployeeId int
)
Begin
	select * from previous_employement_details where EmployeeId = _EmployeeId;    
    select * from employee_salary_detail where EmployeeId = _EmployeeId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_previous_employement_details_and_emp_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_previous_employement_details_and_emp_by_empid`(


	_EmployeeId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_previous_employement_details_and_emp_by_empid', 1, 0, @Result);
	end;
    
	select * from previous_employement_details where EmployeeId = _EmployeeId;
    
    select * from employees where EmployeeUid = _EmployeeId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_previous_employement_details_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_previous_employement_details_by_empid`(


	_EmployeeId int,
    _CompanyId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_previous_employement_details_by_empid', 1, 0, @Result);
	end;
    
    set @declarationStartMonth = 0;
    set @declarationEndMonth = 0;
    set @financialYear = 0;
    select DeclarationStartMonth, DeclarationEndMonth, FinancialYear into @declarationStartMonth, @declarationEndMonth, @financialYear from company_setting 
    where CompanyId = _CompanyId;
    
	select * from previous_employement_details
    where EmployeeId = _EmployeeId
    and (Month >= @declarationStartMonth and Year = @financialYear)
    or (Month < @declarationStartMonth and Year = @financialYear+1);
    
    select * from employees where EmployeeUid = _EmployeeId;
    
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_previous_employement_details_end_emp_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_previous_employement_details_end_emp_by_empid`(


	_EmployeeId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_previous_employement_details_end_emp_by_empid', 1, 0, @Result);
	end;
    
	select * from previous_employement_details where EmployeeId = _EmployeeId;
    
    select * from employees where EmployeeUid = _EmployeeId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_product_getby_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_product_getby_filter`(
	_SearchString varchar(250),
	_SortBy varchar(50),
	_PageIndex int,
	_PageSize int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_product_getby_filter', 1, 0, @Result);
		End;

        Begin
			If(_SortBy is NULL OR _SortBy = '') then
				Set _SortBy = 'UpdatedOn, CreatedOn Desc';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _SortBy, ') as RowIndex,
						ProductId,
						CompanyId,
						CatagoryName, 
						Brand, 
						TitleName, 
						SerialNo, 
						ProductCode, 
						ModalNum, 
						SiteUrl, 
						MRP, 
						PurchasePrice, 
						Quantity, 
						StockStatus, 
						OrderDate, 
						FileIds,
                        CreatedOn,
					Count(1) Over() as Total from product
				Where ', _SearchString, '
			)T where RowIndex between ', ((_PageIndex - 1 ) * _PageSize + 1), ' and ', (_PageIndex * _PageSize));
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;
        
        select * from catagory;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_product_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_product_insupd`(
	   

	_ProductId bigint, 
	_CompanyId int,
	_CatagoryName varchar(100), 
	_Brand varchar(100), 
	_TitleName varchar(100), 
	_SerialNo varchar(100), 
	_ProductCode varchar(45), 
	_ModalNum varchar(50), 
	_SiteUrl varchar(100), 
	_MRP decimal(10,0), 
	_PurchasePrice decimal(10,0), 
	_Quantity int, 
	_StockStatus int, 
	_FileIds json,
    _AdminId bigint,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            RollBack;
            Call sp_LogException (@Message, '', 'sp_product_insupd', 1, 0, @Result);
		end;

		Start Transaction;
        set autocommit = 0;
		SET SQL_SAFE_UPDATES=0;
        begin
			If not exists (Select * from product Where ProductId = _ProductId) then
			Begin
				Set @productId = 0;
				Select ProductId from product order by ProductId desc limit 1 into @productId ;
				Set @productId = @productId+1;

				Insert into product Values (
					@productId, 
					_CompanyId,
					_CatagoryName, 
					_Brand, 
					_TitleName, 
					_SerialNo, 
					_ProductCode, 
					_ModalNum, 
					_SiteUrl, 
					_MRP, 
					_PurchasePrice, 
					_Quantity, 
					_StockStatus, 
					utc_date(), 
					_FileIds,
                    _AdminId,
                    null,
                    utc_date(),
                    null
				);
				Set _ProcessingResult = "inserted";
			End;
			Else
			Begin
				Update product SET 
					CompanyId								=				_CompanyId,
					CatagoryName							=				_CatagoryName, 
					Brand									=				_Brand, 
					TitleName								=				_TitleName, 
					SerialNo								=				_SerialNo, 
					ProductCode								=				_ProductCode, 
					ModalNum								=				_ModalNum, 
					SiteUrl									=				_SiteUrl, 
					MRP										=				_MRP, 
					PurchasePrice							=				_PurchasePrice, 
					Quantity								=				_Quantity, 
					StockStatus								=				_StockStatus, 
					OrderDate								=				utc_date(), 
					FileIds									=				_FileIds,
                    UpdatedBy								=				_AdminId,
                    UpdatedOn								=				utc_date()
				Where ProductId 							=			_ProductId;
				
				Set _ProcessingResult = "updated";
			End;
			End if;
		end;
        Set sql_safe_updates = 1;
		Set autocommit = 1;
        Commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_product_request_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_product_request_insupd`(
	   

	_ProductServiceRequestId bigint,
	_CompanyId int,
	_RequestTypeId varchar(20),
	_RequestDescription text,
	_Brand varchar(100),
	_TitleName varchar(100),
	_Quantity int,
	_FromDate datetime,
	_ToDate datetime,
	_RequestedTo_1 bigint,
	_RequestedTo_2 bigint,
	_RequestedTo_3 bigint,
	_Reference varchar(100),
	_RequestStatus int,
	_RequestedBy bigint,
	_RequestedOn datetime,
    _UpdatedOn datetime,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            RollBack;
            Call sp_LogException (@Message, '', 'sp_product_request_insupd', 1, 0, @Result);
		end;

		Start Transaction;
        set autocommit = 0;
		SET SQL_SAFE_UPDATES=0;
        begin
			If not exists (Select * from product_request Where ProductServiceRequestId = _ProductServiceRequestId) then
			Begin
				Set @productServiceRequestId = 0;
				Select ProductServiceRequestId from product_request order by ProductServiceRequestId desc limit 1 into @productServiceRequestId ;
				Set @productServiceRequestId = @productServiceRequestId+1;

				Insert into product_request Values (
					@productServiceRequestId,
					_CompanyId,
					_RequestTypeId,
					_RequestDescription,
					_Brand,
					_TitleName,
					_Quantity,
					_FromDate,
					_ToDate,
					_RequestedTo_1,
					_RequestedTo_2,
					_RequestedTo_3,
					_Reference,
					_RequestStatus,
					_RequestedBy,
					utc_data(),
                    null
				);
				Set _ProcessingResult = "inserted";
			End;
			Else
			Begin
				Update product_request SET 
					CompanyId							=				_CompanyId,
					RequestTypeId						=				_RequestTypeId,
					RequestDescription					=				_RequestDescription,
					Brand								=				_Brand,
					TitleName							=				_TitleName,
					Quantity							=				_Quantity,
					FromDate							=				_FromDate,
					ToDate								=				_ToDate,
					RequestedTo_1						=				_RequestedTo_1,
					RequestedTo_2						=				_RequestedTo_2,
					RequestedTo_3						=				_RequestedTo_3,
					Reference							=				_Reference,
					RequestStatus						=				_RequestStatus,
					RequestedBy							=				_RequestedBy,
					UpdatedOn							=				utc_date()	
				Where ProductServiceRequestId 		=			_ProductServiceRequestId;
				
				Set _ProcessingResult = "updated";
			End;
			End if;
		end;
         Set sql_safe_updates = 1;
		Set autocommit = 1;
        Commit;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_professionalcandidates_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_professionalcandidates_filter`(
	_searchString varchar(250),
	_sortBy varchar(50),
	_pageIndex int,
	_pageSize int

)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_professionalcandidates_filter', 1, 0, @Result);
		End;

        Begin
            If(_sortBy is NULL OR _sortBy = '') then
				Set _sortBy = 'UserId ';
			End if;
            Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
                    UserId,
					Job_Title, 
                    Date_of_application, 
                    Name, 
                    Email_ID, 
                    Phone_Number, 
                    Total_Experience, 
                    Notice_Period,
					Count(1) Over() as Total from professionalcandidates
				Where ', _searchString, '
			)T where RowIndex between ', ((_pageIndex - 1 ) * _pageSize + 1), ' and ', (_pageIndex * _pageSize));
            
			
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_professionalcandidates_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_professionalcandidates_Get`(


	_UserId bigint,
	_MobileNo varchar(20),
	_EmailId varchar(50)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_professionalcandidates_Get', 1, 0, @Result);
			end;  
            
            Set @UserExistsFlag = 0;
			Begin				
				Select * from professionalcandidates p
                where p.UserId = _UserId or p.Email_ID = _EmailId or
                p.Phone_Number = _MobileNo;
                
                Select * from candidatefiledetail
                where FileOwnerId = _UserId;
			End;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_ProfessionalCandidates_InsUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ProfessionalCandidates_InsUpdate`(
	_Source_Of_Application varchar(50),
	_Job_Title varchar(50),
	_Date_of_application Datetime,
	_Name varchar(50),
	_Email_ID varchar(100),
	_Phone_Number varchar(20),
    _Alternet_Numbers varchar(100),
	_Total_Experience float,
	_Annual_Salary double,
	_Notice_Period int,
	_Expeceted_CTC double,
	_Feedback varchar(500),
	_Current_Location varchar(100),
	_Preferred_Locations varchar(250),
	_Current_Company_name varchar(150),
	_Current_Company_Designation varchar(150),
	_Functional_Area varchar(100),
	_Role varchar(50),
	_Industry varchar(150),
	_Key_Skills varchar(500),
	_Resume_Headline varchar(500),
	_Summary text,
	_Under_Graduation_degree varchar(50),
	_UG_Specialization varchar(50),
	_UG_University_institute_Name varchar(150),
	_UG_Graduation_year int,
	_Post_graduation_degree varchar(50),
	_PG_specialization varchar(50),
	_PG_university_institute_name varchar(150),
	_PG_graduation_year int,
	_Doctorate_degree varchar(50),
	_Doctorate_specialization varchar(50),
	_Doctorate_university_institute_name varchar(150),
	_Doctorate_graduation_year int,
	_Gender varchar(10),
	_Marital_Status bit,
	_Home_Town_City varchar(50),
	_Pin_Code int,
	_Work_permit_for_USA varchar(50),
	_Date_of_Birth Datetime,
	_Latest_Star_Rating float,
	_Viewed varchar(50),
	_Viewed_By varchar(50),
	_Time_Of_View varchar(50),
	_Emailed varchar(50),
	_Emailed_By varchar(50),
	_Time_Of_Email Datetime,
	_Calling_Status varchar(50),
	_Calling_Status_updated_by varchar(50),
	_Time_of_Calling_activity_update Datetime,
	_Comment_1 varchar(50),
	_Comment_1_BY varchar(50),
	_Time_Comment_1_posted Datetime,
	_Comment_2 varchar(50),
	_Comment_2_BY varchar(50),
	_Time_Comment_2_posted Datetime,
	_Comment_3 varchar(50),
	_Comment_3_BY varchar(50),
	_Time_Comment_3_posted Datetime,
	_Comment_4 varchar(50),
	_Comment_4_BY varchar(50),
	_Time_Comment_4_posted Datetime,
	_Comment_5 varchar(50),
	_Comment_5_BY varchar(50),
	_Time_Comment_5_posted Datetime,
    out _ProcessingResult varchar(100)
    

)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Set _ProcessingResult = @Message;    
            
            RollBack;
            SET autocommit = 1;
            Call sp_LogException (@Message, @OperationStatus, 'sp_ProfessionalCandidates_InsUpdate', 1, 0, @Result);
		end;
        
        Set _ProcessingResult = 'Starting';
        
		If not exists (Select 1 from ProfessionalCandidates Where Email_ID = _Email_ID) then
		Begin
			Insert into ProfessionalCandidates Values(
				default,
            	_Source_Of_Application,
				_Job_Title,
				_Date_of_application,
				_Name,
				_Email_ID,
				_Phone_Number,
                _Alternet_Numbers,
				_Total_Experience,
				_Annual_Salary,
				_Notice_Period,
				_Expeceted_CTC,
				_Feedback,
				_Current_Location,
				_Preferred_Locations,
				_Current_Company_name,
				_Current_Company_Designation,
				_Functional_Area,
				_Role,
				_Industry,
				_Key_Skills,
				_Resume_Headline,
				_Summary,
				_Under_Graduation_degree,
				_UG_Specialization,
				_UG_University_institute_Name,
				_UG_Graduation_year,
				_Post_graduation_degree,
				_PG_specialization,
				_PG_university_institute_name,
				_PG_graduation_year,
				_Doctorate_degree,
				_Doctorate_specialization,
				_Doctorate_university_institute_name,
				_Doctorate_graduation_year,
				_Gender,
				_Marital_Status,
				_Home_Town_City,
				_Pin_Code,
				_Work_permit_for_USA,
				_Date_of_Birth,
				_Latest_Star_Rating,
				_Viewed,
				_Viewed_By,
				_Time_Of_View,
				_Emailed,
				_Emailed_By,
				_Time_Of_Email,
				_Calling_Status,
				_Calling_Status_updated_by,
				_Time_of_Calling_activity_update,
				_Comment_1,
				_Comment_1_BY,
				_Time_Comment_1_posted,
				_Comment_2,
				_Comment_2_BY,
				_Time_Comment_2_posted,
				_Comment_3,
				_Comment_3_BY,
				_Time_Comment_3_posted,
				_Comment_4,
				_Comment_4_BY,
				_Time_Comment_4_posted,
				_Comment_5,
				_Comment_5_BY,
				_Time_Comment_5_posted
            );
            
			Set _ProcessingResult = 'Record inserted successfully';
		End;
        Else
        Begin
			Update ProfessionalCandidates Set
				Source_Of_Application                   =                    _Source_Of_Application,
				Job_Title                    			=                    _Job_Title,
                Alternet_Numbers						=					 _Alternet_Numbers,
				Date_of_application                    	=                    _Date_of_application,
				Name                    				=                    _Name,
				Total_Experience                    	=                    _Total_Experience,
				Annual_Salary                    		=                    _Annual_Salary,
				Notice_Period                    		=  	                 _Notice_Period,
				Expeceted_CTC                    		=                    _Expeceted_CTC,
				Feedback                    			=                    _Feedback,
				Current_Location                    	=                    _Current_Location,
				Preferred_Locations                    	=                    _Preferred_Locations,
				Current_Company_name                    =                    _Current_Company_name,
				Current_Company_Designation      		=                    _Current_Company_Designation,
				Functional_Area                    		=                    _Functional_Area,
				Role                    				=                    _Role,
				Industry                    			=                    _Industry,
				Key_Skills                    			=                    _Key_Skills,
				Resume_Headline                    		=                    _Resume_Headline,
				Summary                    				=                    _Summary,
				Under_Graduation_degree                 =                    _Under_Graduation_degree,
				UG_Specialization                    	=                    _UG_Specialization,
				UG_University_institute_Name            =                    _UG_University_institute_Name,
				UG_Graduation_year                    	=                    _UG_Graduation_year,
				Post_graduation_degree                  =                    _Post_graduation_degree,
				PG_specialization                    	=                    _PG_specialization,
				PG_university_institute_name            =                    _PG_university_institute_name,
				PG_graduation_year                    	=                    _PG_graduation_year,
				Doctorate_degree                    	=                    _Doctorate_degree,
				Doctorate_specialization                =                    _Doctorate_specialization,
				Doctorate_university_institute_name     =                    _Doctorate_university_institute_name,
				Doctorate_graduation_year               =                    _Doctorate_graduation_year,
				Gender                    				=                    _Gender,
				Marital_Status                    		=                    _Marital_Status,
				Home_Town_City                    		=                    _Home_Town_City,
				Pin_Code                    			=                    _Pin_Code,
				Work_permit_for_USA                    	=                    _Work_permit_for_USA,
				Date_of_Birth                    		=                    _Date_of_Birth,
				Latest_Star_Rating                    	=                    _Latest_Star_Rating,
				Viewed                    				=                    _Viewed,
				Viewed_By                    			=                    _Viewed_By,
				Time_Of_View                    		=                    _Time_Of_View,
				Emailed                    				=                    _Emailed,
				Emailed_By                    			=                    _Emailed_By,
				Time_Of_Email                    		=                    _Time_Of_Email,
				Calling_Status                    		=                    _Calling_Status,
				Calling_Status_updated_by               =                    _Calling_Status_updated_by,
				Time_of_Calling_activity_update         =                    _Time_of_Calling_activity_update,
				Comment_1                    			=                    _Comment_1,
				Comment_1_BY                    		=                    _Comment_1_BY,
				Time_Comment_1_posted                   =                    _Time_Comment_1_posted,
				Comment_2                    			=                    _Comment_2,
				Comment_2_BY                    		=                    _Comment_2_BY,
				Time_Comment_2_posted                   =                    _Time_Comment_2_posted,
				Comment_3                    			=                    _Comment_3,
				Comment_3_BY                    		=                    _Comment_3_BY,
				Time_Comment_3_posted                   =                    _Time_Comment_3_posted,
				Comment_4                    			=                    _Comment_4,
				Comment_4_BY                    		=                    _Comment_4_BY,
				Time_Comment_4_posted                   =                    _Time_Comment_4_posted,
				Comment_5                    			=                    _Comment_5,
				Comment_5_BY                    		=                    _Comment_5_BY,
				Time_Comment_5_posted                   =                    _Time_Comment_5_posted
			Where Email_ID = _Email_ID;
                
			Set _ProcessingResult = 'Record updated successfully';
		End;
        End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_ProfessionalCandidates_UpdInfo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ProfessionalCandidates_UpdInfo`(
	_UserId long,
    _Name varchar(50),
    _Alternet_Numbers varchar(100),
	_Resume_Headline varchar(500),
	_FileId long,
	_FilePath varchar(500), 
	_FileName varchar(100),
	_FileExtension varchar(10),
	_UserTypeId int,
    _IsProfileImageRequest int,
    out _ProcessingResult varchar(100)
    

)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            
            SET autocommit = 1;
            Call sp_LogException (@Message, '', 'sp_ProfessionalCandidates_UpdInfo', 1, 0, @Result);
		end;
        
        Set _ProcessingResult = '';
        
		If exists (Select 1 from professionalcandidates Where UserId = _UserId) then
        Begin
			Update professionalcandidates Set
                Alternet_Numbers						=					 _Alternet_Numbers,
				Name                    				=                    _Name,
                Resume_Headline 						=					_Resume_Headline
			Where UserId = _UserId;
            
            Set _ProcessingResult = 'Record updated successfully';
		End;
        End if;
        
        if(_IsProfileImageRequest = 1) then
        begin
			if not exists (select 1 from candidatefiledetail where FileId 	= _FileId) then
			Begin
				insert into candidatefiledetail values (
					default,
					_UserId,
					_FilePath,
					_FileName,
					_FileExtension, 
					_UserTypeId,
					now(), 
					null
				);
			End;
			Else
			Begin
				update candidatefiledetail set 	
						FileOwnerId 	= 	_UserId,
						FilePath 		= 	_FilePath,
						FileName		=	_FileName,
						FileExtension	=	_FileExtension, 
						UserTypeId		=	_UserTypeId, 
						UpdatedOn		=	now()
				where	FileId 			= 	_FileId;
			End;
			End if;
			
			Set _ProcessingResult = 'Record updated successfully';
		End;
		End if;
	End;	
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_professionaldetail_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_professionaldetail_filter`(


	_UserId bigint,
	_Mobile varchar(20),
	_Email varchar(50)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_professionaldetail_filter', 1, 0, @Result);
			end;  
            
            Select professionaldetail_Json from professionaldetail p
            where p.UserId = _UserId;
            
            Select * from candidatefiledetail c
            where c.FileOwnerId = _UserId;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_professionaldetail_get_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_professionaldetail_get_byid`(
	_EmployeeId bigint

)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_professionaldetail_get_byid', 1, 0, @Result);
		End;

        Begin
			Select  e.EmployeeUid,
				e.FirstName,
				e.LastName,
				e.Mobile,
				e.Email,
				e.ReportingManagerId,
				e.DesignationId,
				ep.SecondaryMobile,
				e.IsActive,
                e.CompanyId,
                e.CreatedOn,
                ep.DOB,
				ep.Gender,
				ep.FatherName,
				ep.SpouseName,
				ep.MotherName,
				ep.Address,
				ep.State,
				ep.City,
				ep.Pincode,
				ep.IsPermanent,
				ep.ActualPackage,
				ep.FinalPackage,
				ep.TakeHomeByCandidate,
				ef.PANNo,
				ef.AadharNo,
				ef.AccountNumber,
				ef.BankName,
				ef.BranchName,
				ef.IFSCCode,
				ef.Domain,
				ef.Specification,
				ef.ExprienceInYear,
				ef.LastCompanyName,
				@AccessLevelId AccessLevelId,
				@UserTypeId UserTypeId,
				e.LeavePlanId
			from employees e 
			Inner Join employeepersonaldetail ep on e.EmployeeUid = ep.EmployeeUid
			Inner Join employeeprofessiondetail ef on e.EmployeeUid = ef.EmployeeUid
			Where e.EmployeeUid = _employeeId;

			select * from professionaldetail
			where EmployeeId = _EmployeeId;
            
            Select FileId, FilePath, FileName, FileExtension, UserTypeId from userfiledetail 
			where FileOwnerId =_EmployeeId and (FileName like 'profile%' or FileName like 'resume%');
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_professionaldetail_insetupdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_professionaldetail_insetupdate`(


	_UserId bigint,
    _FileId bigint,
	_Mobile varchar(20),
	_Email varchar(50),
    _FirstName varchar(100),
    _LastName varchar(100),
    _Date_Of_Application Datetime,
    _Total_Experience_In_Months int,
    _Salary_Package double,
    _Notice_Period int,
    _Expeceted_CTC double,
    _Current_Location varchar(100),
    _Preferred_Location Json,
    _ProfessionalDetail_Json Json,
    _IsProfileImageRequest int,
    out _ProcessingResult varchar(100)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_professionaldetail_insetupdate', 1, 0, @Result);
			end;  
            
            if not exists (select 1 from professionaldetail where UserId = _UserId) then
            begin
				Insert into professionaldetail values(
					default,
					_Mobile,
					_Email,
					_FirstName,
					_LastName,
					_Date_Of_Application,
					_Total_Experience_In_Months,
					_Salary_Package,
					_Notice_Period,
					_Expeceted_CTC,
					_Current_Location,
					_Preferred_Location,
					_ProfessionalDetail_Json,
                    utc_date(),
                    null
				);
			end;
            else
            begin
				Update professionaldetail Set
					Mobile_Number					=			_Mobile,
					Email							=			_Email,
					FirstName						=			_FirstName,
					LastName						=			_LastName,
					Date_Of_Application				=			_Date_Of_Application,
					Total_Experience_In_Months		=			_Total_Experience_In_Months,
					Salary_Package					=			_Salary_Package,
					Notice_Period					=			_Notice_Period,
					Expeceted_CTC					=			_Expeceted_CTC,
					Current_Location				=			_Current_Location,
					Preferred_Locations				=			_Preferred_Location,
					ProfessionalDetail_Json			=			_ProfessionalDetail_Json,
                    UpdatedOn						=			NOW()
				Where UserId = _UserId;
            end;
            end if;
            
			if(_IsProfileImageRequest = 1) then
			begin
				if not exists (select 1 from candidatefiledetail where FileId 	= _FileId) then
				Begin
					insert into candidatefiledetail values (
						default,
						_UserId,
						_FilePath,
						_FileName,
						_FileExtension, 
						_UserTypeId,
						now(), 
						null
					);
				End;
				Else
				Begin
					update candidatefiledetail set 	
							FileOwnerId 	= 	_UserId,
							FilePath 		= 	_FilePath,
							FileName		=	_FileName,
							FileExtension	=	_FileExtension, 
							UserTypeId		=	_UserTypeId, 
							UpdatedOn		=	now()
					where	FileId 			= 	_FileId;
				End;
				End if;
			End;
			End if;
            
            Set _ProcessingResult = _UserId;
		End;
	End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_professionaldetail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_professionaldetail_insupd`(


	_EmployeeId bigint,
	_Mobile varchar(20),
	_Email varchar(100),
	_FirstName varchar(100),
	_LastName varchar(100),
	_ProfessionalDetailJson json,
    out _ProcessingResult varchar(100)
)
Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            SET autocommit = 1;
            Set sql_safe_updates = 1;
			Call sp_LogException (@Message, '', 'sp_professionaldetail_insupd', 1, 0, @Result);
		end;  
		
		if not exists (select 1 from professionaldetail where EmployeeId = _EmployeeId) then
		begin
			Insert into professionaldetail values(
				_EmployeeId,
				_Mobile,
				_Email,
				_FirstName,
				_LastName,
				_ProfessionalDetailJson,
				utc_date(),
				null
			);
		end;
		else
		begin
			Update professionaldetail Set
				Mobile							=			_Mobile,
				Email							=			_Email,
				FirstName						=			_FirstName,
				LastName						=			_LastName,
				ProfessionalDetailJson			=			_ProfessionalDetailJson,
				UpdatedOn						=			NOW()
			Where EmployeeId 					= 			_EmployeeId;
		end;
		end if;
			SET autocommit = 0;
			Set sql_safe_updates = 0;
			Update employees Set
				FirstName				=			_FirstName,
				LastName				=			_LastName
			where (Email = _Email OR Mobile = _Mobile);
            SET autocommit = 1;
			Set sql_safe_updates = 1;
		Set _ProcessingResult = _EmployeeId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_appraisal_detai_finalize` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_appraisal_detai_finalize`(
        _Status int
        
        
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);  
		Call sp_LogException (@Message, '', 'sp_project_appraisal_detai_finalize', 1, 0, @Result);
	end;
	
	
    select 
		distinct
		pm.FullName, pm.Team, ar.ReactedOn, p.ProjectName, p.ProjectId, 
        p.ProjectDescription, ar.Status, 
        ar.FullName as ManagerName, pm.ProjectManagerId 
    from appraisal_review_detail a
    inner join appraisal_review_finalizer_status ar on ar.AppraisalReviewId = a.AppraisalReviewId
    inner join project p on p.ProjectId = a.ProjectId
    inner join project_members_detail pm on pm.ProjectId = p.ProjectId
    where ar.Status = _Status and pm.IsActive = true;
	   
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_appraisal_get_by_project` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_appraisal_get_by_project`(

	_ProjectId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_project_appraisal_get_by_project', 1, 0, @Result);
	end;
    
    set @membersCount = 0;
    select Count(1) into @membersCount from project_members_detail 
    where ProjectId = _ProjectId;
    
    select *, @membersCount MembersCount from project_appraisal p
    where ProjectId = _ProjectId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_basic_detail_page_by_offset` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_basic_detail_page_by_offset`(
    _PageSize int,
    _OffsetSize int


)
Begin
    select 
		p.ProjectId,  
        p.ProjectManagerId,
        p.ArchitectId
	from project p
	order by ProjectId
    limit _PageSize offset _OffsetSize;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_detail_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_detail_filter`(
	   
    _SearchString varchar(500),
    _SortBy varchar(100),
    _PageIndex int,
    _PageSize int,
	_EmployeeId bigint,
    _CompanyId int
    
/*

	call sp_project_detail_filter('1=1 ', '', 1, 10, 2, 1)
    
*/    
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_project_detail_filter', 1, 0, @Result);
		End;

        /*Begin
            if(_SortBy is null Or _SortBy = '') then
				Set _SortBy = ' UpdatedOn Desc, CreatedOn Desc ';
			end if;
            
            set @projectId = 0;
            SELECT ProjectId into @projectId FROM project_members_detail
            where EmployeeId = _EmployeeId and IsActive = true;
            
            
            if (@projectId = 0) then
            begin
				select ProjectId into @projectId from project where CEOId = _EmployeeId or 
				CFOId = _EmployeeId or CTOId = _EmployeeId or COOId = _EmployeeId ;
			end;
            end if;
            
            Set @activeQuery = Concat('
				Select *
				from project 
				where CompanyId = ', _CompanyId, ' AND ProjectId = ', @projectId, '
			');	
            
            Set @SelectQuery = '';
			Set @SelectQuery = Concat('
				select *, Row_Number() over() as RowIndex, Count(1) Over() as Total from (
					', @activeQuery ,'
				)T Order by ', _SortBy ,' limit ', _PageSize ,' offset ', (_PageIndex - 1) * 10
			);
            
			select @SelectQuery;
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery; 
		End; */
        
        set _PageIndex = (_PageIndex - 1) * 10;
        if (_EmployeeId > 1 ) then
        begin
			Select *, Row_Number() over() as RowIndex, Count(1) Over() as Total	from project 
			where CompanyId = _CompanyId and ProjectId in (
				select ProjectId from project_members_detail
				where EmployeeId = case when _EmployeeId > 1 then _EmployeeId else EmployeeId end
			)
			Order by  UpdatedOn Desc, CreatedOn Desc  limit _PageSize offset _PageIndex;
        end;
        else
        begin
			Select *, Row_Number() over() as RowIndex, Count(1) Over() as Total	from project 
			where CompanyId = _CompanyId
			Order by  UpdatedOn Desc, CreatedOn Desc  limit _PageSize offset _PageIndex;
        end;
        end if;
               
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_detail_getall` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_detail_getall`(
	   
    _SearchString varchar(500),
    _SortBy varchar(100),
    _PageIndex int,
    _PageSize int
 
)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_project_detail_getall', 1, 0, @Result);
		End;

        Begin
        
			if(_SortBy is null Or _SortBy = '') then
				Set _SortBy = ' UpdatedOn Desc, CreatedOn Desc ';
			end if;
            
            Set @activeQuery = Concat('
				Select *
				from project 
				where ', _SearchString, '
			');	
            
            Set @SelectQuery = '';
			Set @SelectQuery = Concat('
				select *, Row_Number() over() as RowIndex, Count(1) Over() as Total from (
					', @activeQuery ,'
				)T Order by ', _SortBy ,' limit ', _PageSize ,' offset ', (_PageIndex - 1) * 10
			);
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;
		End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_detail_getby_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_detail_getby_id`(
	   
	_ProjectId int
    
 
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_project_detail_getby_id', 1, 0, @Result);
		end;
        
		select * from project
		where ProjectId = _ProjectId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_detail_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_detail_insupd`(
	   
	_ProjectId bigint ,
    _ProjectName varchar(150),
    _ProjectDescription varchar(500),
    _ProjectStartedOn datetime,
    _ProjectEndedOn datetime,
    _IsClientProject bit,
    _ClientId bigint,
    _HomePageUrl varchar(150),
    _PageIndexDetail json,
    _KeywordDetail json,
    _DocumentationDetail json,
    _CompanyId int,
    _AdminId bigint,
    _DocumentPath varchar(150),
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_project_detail_insupd', 1, 0, @Result);
		end;
        
        set @ProjectId = 0;
        if not exists (select 1 from project where ProjectId = _ProjectId) then
        begin
			Set @ProjectId = 0;
			Select ProjectId from project order by ProjectId desc limit 1 into @ProjectId ;
			Set @ProjectId = @ProjectId + 1;
			select * from project;
			Insert into project values(
				@ProjectId,
				_ProjectName,
				_ProjectDescription,
				_ProjectStartedOn,
				_ProjectEndedOn,
				_IsClientProject,
				_ClientId,
				_HomePageUrl,
                _DocumentPath,
				_PageIndexDetail,
				_KeywordDetail,
				_DocumentationDetail,
                _CompanyId,
                _AdminId,
                null,
                utc_timestamp(),
                null
			);            
         
			Set _ProcessingResult = @ProjectId;
        end;
        else
        begin
			set @ProjectId = _ProjectId;
			update project set 
				ProjectName						=			_ProjectName,
				ProjectDescription				=			_ProjectDescription,
				ProjectStartedOn				=			_ProjectStartedOn,
				ProjectEndedOn					=			_ProjectEndedOn,
				IsClientProject					=			_IsClientProject,
				ClientId						=			_ClientId,
				HomePageUrl						=			_HomePageUrl,
				PageIndexDetail					=			_PageIndexDetail,
				KeywordDetail					=			_KeywordDetail,
				DocumentationDetail				=			_DocumentationDetail,
                DocumentPath					=			_DocumentPath,
                CompanyId						=			_CompanyId,
                UpdatedBy						=			_AdminId,
                UpdatedOn						=			utc_timestamp()
			where ProjectId 					= 			_ProjectId;
            
            Set _ProcessingResult = @ProjectId;
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_get_page_data` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_get_page_data`(
    _ProjectId int


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'SP_Employees_Get', 1, 0, @Result);
	End;

	select * from project
    where ProjectId = _ProjectId;
    
    select * from clients;
    
    select * from project_members_detail
	where ProjectId = _ProjectId
	and IsActive = true;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_members_get_by_employee` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_members_get_by_employee`(

	_EmployeeId bigint
    
    
/*

     call sp_project_members_get_by_employee(2)
     
*/
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		drop table if exists catagory_data;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_project_members_get_by_employee', 1, 0, @Result);
	end;
    
    if not exists (select * from org_hierarchy where EmployeeId = _EmployeeId ) then
	begin
		set @reportingManagerRoleId = 0;
		select DesignationId into @reportingManagerRoleId from employees where EmployeeUid = _EmployeeId;
       
		select 
			p.ProjectId,
			p.ProjectName,
			p.ProjectDescription,
			m.Team,
			p.ProjectStartedOn,
			p.ProjectEndedOn,
			m.EmployeeId,
			m.ProjectManagerId,
			m.MemberType,
			concat(e.FirstName, ' ', e.LastName) FullName,
			e.Email
		from project_members_detail m
		inner join project p on p.ProjectId = m.ProjectId
		inner join employees e on e.EmployeeUid = m.EmployeeId
		where (m.EmployeeId = _EmployeeId And m.MemberType = @reportingManagerRoleId);
	end;
    else
    begin
		if exists (select * from project where (CEOId = _EmployeeId and CanCEOAccess = true) or 
        (CFOId = _EmployeeId and CanCFOAccess = true) or (CTOId = _EmployeeId and CanCTOAccess = true) or 
        (COOId = _EmployeeId and CanCOOAccess = true)) then
		begin
			Select 
				pm.ProjectId, 
				GROUP_CONCAT(DISTINCT pm.Team) AS Team,
				p.ProjectName, 
				p.ProjectDescription, 
				p.ProjectStartedOn, 
				p.ProjectEndedOn, 
				p.CompanyId 
			FROM project_members_detail pm
			inner join project p on p.ProjectId = pm.ProjectId
			GROUP BY ProjectId;
		end;
        end if;
    end;
    end if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_member_getbyId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_member_getbyId`(

# call sp_project_member_getbyId(1)

    _ProjectId int
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_project_member_getbyId', 1, 0, @Result);
		end;
            
		select p.*, e.WorkShiftId,
		CASE 
			WHEN u.FileName IS NOT NULL AND u.FileName LIKE '%profile%' THEN u.FilePath
			ELSE NULL 
		END AS FilePath,
		CASE 
			WHEN u.FileName IS NOT NULL AND u.FileName LIKE '%profile%' THEN u.FileName
			ELSE NULL 
		END AS FileName,
		CASE 
			WHEN u.FileName IS NOT NULL AND u.FileName LIKE '%profile%' THEN u.FileExtension
			ELSE NULL 
		END AS FileExtension 
		from project_members_detail p
		left join userfiledetail u on u.FileOwnerId = p.EmployeeId
        left join employees e on e.EmployeeUid = p.EmployeeId
		where p.ProjectId = 1 and p.IsActive = true;
		
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_member_getby_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_member_getby_filter`(
	_SearchString varchar(250),
	_SortBy varchar(50),
	_PageIndex int,
	_PageSize int

	# call sp_project_member_getby_filter('1=1', null, 1, 10)

)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_project_member_getby_filter', 1, 0, @Result);
		End;

        Begin
			If(_SortBy is NULL OR _SortBy = '') then
            begin
				Set _sortBy = ' p.ProjectMemberDetailId DESC ';
			end;
			End if;
			
			Set @SelectQuery = CONCAT('Select * from (
				Select 
					Row_Number() over(Order by ', _sortBy, ') as RowIndex,
					p.*, 
					o.RoleName, 
					u.FilePath, 
					u.FileName,
					Count(1) Over() as Total
					from project_members_detail p
					inner join org_hierarchy o on p.MemberType = o.RoleId
					left join userfiledetail u on u.FileOwnerId = p.EmployeeId
				where ', _SearchString, '
			)T where RowIndex between ', (_PageIndex - 1) * _PageSize + 1 ,' and ', (_PageIndex * _PageSize)) ;
            
			
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_member_getby_projectid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_member_getby_projectid`(
    _ProjectId int

	# call sp_project_member_getby_projectid(1)
)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_project_member_getby_projectid', 1, 0, @Result);
	End;
    
    select p.*, o.RoleName, u.FilePath, u.FileName from project_members_detail p
    inner join org_hierarchy o on p.MemberType = o.RoleId
    left join userfiledetail u on u.FileOwnerId = p.EmployeeId
     where p.ProjectId = _ProjectId and p.IsActive = true;
     
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_project_member_get_projects` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_project_member_get_projects`(
    _EmployeeId bigint,
    _ProjectId int
    
    
	# call sp_project_member_get_projects(4, 1)

)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_project_member_get_projects', 1, 0, @Result);
	End;
    
    set @designationId = 0;
    set @objectiveCategoryId = 0;
    set @appraisalDetailId = 0;
    select e.DesignationId into @designationId from employees e where EmployeeUid = _EmployeeId;
    select distinct ObjectiveCatagoryId into @objectiveCategoryId from appraisal_chain_level where ApprovalRoleId = @designationId;    
    select AppraisalDetailId into @appraisalDetailId from appraisal_detail where IsActiveCycle = true and JSON_CONTAINS(ObjectiveCatagoryId, CAST(@objectiveCategoryId as CHAR)) = 1;
    
	drop table if exists chain_level;
	create temporary table if not exists chain_level as (
		with recursive cte
		as
		(	
			select * from org_hierarchy where ParentNode = @designationId
			union all
			select o.* from org_hierarchy o
			inner join cte on cte.RoleId = o.ParentNode
		) select * from cte
	);
    
    select 
        e.EmployeeUid as EmployeeId, 
        c.RoleName, 
        s.CTC, 
        ep.ExprienceInYear, 
        Concat(ep.FirstName, ' ', ep.LastName) as FullName, 
        p.ProjectId,
		e.CompanyId, 
        p.ProjectName, 
        p.ProjectDescription, 
        e.DesignationId, 
        @objectiveCategoryId as ObjectiveCategoryId , 
        (select PerformanceStatus from employee_performance epf 
         where epf.EmployeeId = pm.EmployeeId limit 1) as Status
	from chain_level c
    inner join project_members_detail pm on pm.MemberType = c.RoleId
    inner join employee_salary_detail s on s.EmployeeId = pm.EmployeeId
    inner join employeeprofessiondetail ep on ep.EmployeeUid = s.EmployeeId
    inner join project p on p.ProjectId = pm.ProjectId
    inner join employees e on e.EmployeeUid = s.EmployeeId
    -- left join employee_performance epf on epf.EmployeeId = pm.EmployeeId
    where pm.ProjectId = _ProjectId and pm.IsActive = true;
        
    select pa.* from project_appraisal pa
    inner join project p on pa.ProjectId = p.ProjectId
    where p.ProjectManagerId = _EmployeeId;
    
    select a.*, r.ReactedOn, r.Status as AppraisalStatus from appraisal_review_detail a
    inner join appraisal_review_finalizer_status r on r.AppraisalReviewId = a.AppraisalReviewId
    where r.ReviwerId = _EmployeeId and a.ProjectId = _ProjectId; 
    
	drop table if exists chain_level;
    
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_ptax_slab_delete_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ptax_slab_delete_byid`(
	   
	_PtaxSlabId int,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_ptax_slab_delete_byid', 1, 0, @Result);
		end;
        
        delete from ptax_slab where PtaxSlabId = _PtaxSlabId;
        Set _ProcessingResult = 'deleted';
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_ptax_slab_getby_compId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ptax_slab_getby_compId`(


	_CompanyId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_ptax_slab_getby_compId', 1, 0, @Result);
	end;  
    set @stateName = '';
    select State into @stateName from company where CompanyId = _CompanyId;
    
    select * from ptax_slab where LOWER(StateName) = LOWER(@stateName);
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_ptax_slab_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ptax_slab_insupd`(
	   
	_PtaxSlabId int,
	_StateName varchar(120),
	_MinIncome decimal,
    _MaxIncome decimal,
	_TaxAmount decimal,
	_Gender int,
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_ptax_slab_insupd', 1, 0, @Result);
		end;
        
        if not exists (select 1 from ptax_slab where PtaxSlabId = _PtaxSlabId) then
        begin
			Insert into ptax_slab values(
				default,
				_StateName,
				_MinIncome,
                _MaxIncome,
				_TaxAmount,
				_Gender
			);
         
             Set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update ptax_slab set 
				StateName					=		_StateName,
				MinIncome					=		_MinIncome,
                MaxIncome					=		_MaxIncome,
				TaxAmount					=		_TaxAmount,
				Gender						=		_Gender
			where PtaxSlabId			 = 			_PtaxSlabId;
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_reimburs_adhoc_and_deduction_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_reimburs_adhoc_and_deduction_upd`(
	_ReimbursAdhocAndDeduction bigint,
    _EmployeeId bigint,
    _IsReimburs bit,
    _IsAdhoc bit,
    _IsDeduction bit,
    _ForYear int,
    _ForMonth int,
    _CompanyId int,
    _OrganizationId int,
    _ComponentId varchar(20),
    _Amount decimal,
    _Comments varchar(500),
    _Status int,
    _Reason varchar(500),
    _UpdatedBy bigint,
    _UpdatedOn datetime,
    out _ProcessingResult varchar(100)
/*

	set @result= '';
	call sp_reimburs_adhoc_and_deduction_upd(1, 1, 1, 0, 0, 2024, 3, 1, 1, 'RI', 2235.50, '', 2, '', 1, now(), @result);
	select @result;

*/

)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_reimburs_adhoc_and_deduction_upd', 1, 0, @Result);
		End;
        
		Set _ProcessingResult = '';
        if not exists(select 1 from reimburs_adhoc_and_deduction where ReimbursAdhocAndDeduction = _ReimbursAdhocAndDeduction) then
        begin
            set @ReimbursAdhocAndDeduction = 0;
            select ReimbursAdhocAndDeduction into @ReimbursAdhocAndDeduction from reimburs_adhoc_and_deduction
            order by ReimbursAdhocAndDeduction desc limit 1;
            
            set @ReimbursAdhocAndDeduction = @ReimbursAdhocAndDeduction + 1;
            
			insert into reimburs_adhoc_and_deduction values(
				@ReimbursAdhocAndDeduction,
				_EmployeeId,
				_IsReimburs,
				_IsAdhoc,
				_IsDeduction,
				_ForYear,
				_ForMonth,
				_CompanyId,
				_OrganizationId,
				_ComponentId,
				_Amount,
				_Comments,
				_Status,
				_Reason,
				_UpdatedBy,
				_UpdatedOn
			);
            
            Set _ProcessingResult = 'inserted';
        end;
        else 
        begin
			update reimburs_adhoc_and_deduction set
				EmployeeId 					= 		_EmployeeId,
				IsReimburs 					= 		_IsReimburs,
				IsAdhoc 					= 		_IsAdhoc,
				IsDeduction 				= 		_IsDeduction,
				ForYear 					= 		_ForYear,
				ForMonth 					= 		_ForMonth,
				CompanyId 					= 		_CompanyId,
				OrganizationId 				= 		_OrganizationId,
				ComponentId 				= 		_ComponentId,
				Amount 						= 		_Amount,
				Comments					=		_Comments,
				Status						=		_Status,
				Reason						=		_Reason,
				UpdatedBy					=		_UpdatedBy,
				UpdatedOn					=		_UpdatedOn
			where ReimbursAdhocAndDeduction = 		_ReimbursAdhocAndDeduction;
            
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_request_type_ins_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_request_type_ins_upd`(



	_RequestTypeId int,
    _RequestTypeCode varchar(20),
    _Description varchar(500)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_request_type_ins_upd', 1, 0, @Result);
	end;
    
    if not exists(select 1 from request_type where RequestTypeId = _RequestTypeId) then
    begin
        set @count = 0;
		select RequestTypeId into @count from request_type order by RequestTypeId desc;
		set @count = @count + 1;
        
		Insert into request_type values(
			@count,
            _RequestTypeCode,
			_Description
		);
	end;
    else
    begin
        update request_type set
		Description = _Description,
        _RequestTypeCode = _RequestTypeCode
        where RequestTypeId = _RequestTypeId;
	end;
    end if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_request_type_sel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_request_type_sel`(



)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_request_type_sel', 1, 0, @Result);
	end;

	select * from request_type;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Reset_Password` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Reset_Password`(


	_MobileNo varchar(20),
	_EmailId varchar(50),
    _NewPassword varchar(100),
    _UserTypeId int,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_Reset_Password', 1, 0, @Result);
	end;  
	
	Set _ProcessingResult = ''; 

	update employeelogin Set 
		Password 	= 	_NewPassword,
		UserTypeId 	=	_UserTypeId,
        UpdatedOn   = 	utc_timestamp()
	where (Email = _EmailId Or Mobile = _MobileNo);

	Set _ProcessingResult = 'updated';
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_RolesAndMenu_GetAll` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_RolesAndMenu_GetAll`(
	


	_accesslevelId int

)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_RolesAndMenu_GetAll', 1, 0, @Result);
		end;

		if (_accesslevelId = 1)  then
        begin
			Select RM.Catagory, RM.Childs, RM.Link, RM.Icon, RM.Badge, 
			RM.BadgeType, RM.AccessCode,  1 as Permission from rolesandmenu RM;
        end;
        else
        begin
			Select RM.Catagory, RM.Childs, RM.Link, RM.Icon, RM.Badge, 
			RM.BadgeType, RM.AccessCode, 
			case
				when AccessibilityId is null
				then 0
				else AccessibilityId
			end Permission from rolesandmenu RM
            left Join role_accessibility_mapping r on r.AccessCode = RM.AccessCode
            and r.AccessLevelId = _accesslevelId;
        end;
        end if;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_role_accessibility_mapping_InsUpd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_role_accessibility_mapping_InsUpd`(
 
 
 
	_RoleAccessibilityMappingId int,
	_AccessLevelId int,
	_AccessCode int,
	_AccessibilityId int
 )
Begin
 	Begin
 		Declare exit handler for sqlexception
 		Begin
			
 			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
 										@errorno = MYSQL_ERRNO,
 										@errortext = MESSAGE_TEXT;
 			Set autocommit = 1;
            Set sql_safe_updates = 1;							
 			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
 			Call sp_LogException(@Message, '', 'sp_role_accessibility_mapping_InsUpd', 1, 0, @Result);
 		end;
		set autocommit = 0;
        SET SQL_SAFE_UPDATES=0;
        Begin
			Set @roleAccessibilityMappingId = 0;
			If not exists(Select 1 from role_accessibility_mapping where AccessLevelId = _AccessLevelId And AccessCode = _AccessCode)then
            Begin
				Set @roleAccessibilityMappingId = 0;
				Select RoleAccessibilityMappingId from role_accessibility_mapping order by RoleAccessibilityMappingId desc limit 1 into @roleAccessibilityMappingId ;
				Set @roleAccessibilityMappingId = @roleAccessibilityMappingId+1;

				Insert into role_accessibility_mapping values(@roleAccessibilityMappingId, _AccessLevelId, _AccessCode, _AccessibilityId);
            End;
            Else
            Begin
				Update role_accessibility_mapping Set AccessCode = _AccessCode, AccessibilityId = _AccessibilityId 
				where AccessLevelId = _AccessLevelId And AccessCode = _AccessCode;
            End;
            End if;
		End;
        Set sql_safe_updates = 1;
		 Set autocommit = 1;
 	End;
 end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_components_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_components_get`(


	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_salary_components_get', 1, 0, @Result);
			end;  
		
		select 
        	ComponentId,
            ComponentFullName,
            ComponentDescription,
			CalculateInPercentage,
			TaxExempt,
            ComponentTypeId,
            ComponentCatagoryId,
			PercentageValue,
			MaxLimit,
            DeclaredValue,
            AcceptedAmount,
			RejectedAmount,
			UploadedFileIds,
            Formula,
			EmployeeContribution,
			EmployerContribution,
			IncludeInPayslip,
			Section,
            SectionMaxLimit,
            IsAdHoc,
            AdHocId,
			IsOpted,
			IsActive,
			CreatedBy,
            UpdatedBy,
            CreatedOn,
            UpdatedOn
        from salary_components ;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_components_get_byId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_components_get_byId`(


	 _ComponentId varchar(10)
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_salary_components_get_byId', 1, 0, @Result);
			end;  
		
		select * from salary_components 
        where ComponentId = _ComponentId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_components_get_type` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_components_get_type`(


	 _ComponentTypeId int
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_salary_components_get_type', 1, 0, @Result);
			end;  
		
        if(_ComponentTypeId > 0) then
        begin
			select 
				*
			from salary_components 
			where ComponentTypeId = _ComponentTypeId;        
        end;
        else
        begin
			select 
				*
			from salary_components;
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_components_group_by_employeeid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_components_group_by_employeeid`(


	 _EmployeeId long
)
Begin
	Declare groupId int;
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_salary_components_group_by_employeeid', 1, 0, @Result);
		end;  
		
        set @companyId = 0;
        set @createdOn = now();
        set @workshiftId = 0;
		set @stateName = '';
		set @financialYear = 0;
        set @ctc = 0;
         set @salarygroupid = 0;
        select 
			CompanyId, CreatedOn, WorkShiftId 
			into @companyId, @createdOn, @workshiftId 
		from employees where EmployeeUid = _EmployeeId;
        
		select State into @stateName from company where CompanyId = @companyId;
        
		select FinancialYear into @financialYear from company_setting
		where CompanyId = @companyId;
        
        select CTC into @ctc from employee_salary_detail where EmployeeId = _EmployeeId and FinancialStartYear = @financialYear;
              
        select *, @createdOn as DateOfJoining 
        from employee_salary_detail where EmployeeId = _EmployeeId and FinancialStartYear = @financialYear;
        
        select * from company_setting
        where 
			Case when @companyId > 0 Then CompanyId = @companyId
            Else IsPrimary = true
		End;
        
        Select * from salary_components;
        
        select * from surcharge_slab;
        
        select * from ptax_slab where LOWER(StateName) = LOWER(@stateName);
        
        select * from work_shifts where 
        WorkShiftId = @workshiftId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_components_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_components_insupd`(


	_ComponentId varchar(10),
    _ComponentFullName varchar(150),
    _ComponentDescription varchar(1024),
    _CalculateInPercentage bit,
    _TaxExempt bit,
    _ComponentTypeId int,
    _AcceptedAmount decimal,
    _RejectedAmount decimal,
    _UploadedFileIds json,
    _ComponentCatagoryId int,
    _PercentageValue decimal,
    _MaxLimit decimal,
    _DeclaredValue decimal,
    _Formula varchar(100),
    _EmployeeContribution decimal,
    _EmployerContribution decimal,
    _IncludeInPayslip bit,
    _IsAdHoc bit,
    _AdHocId int,
    _Section varchar(20),
    _SectionMaxLimit decimal,
    _IsAffectInGross bit,
    _RequireDocs bit,
    _IsOpted bit,
    _IsActive bit,
    _AdminId bigint,
    out _ProcessingResult varchar(100)
)
Begin
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, '', 'sp_salary_components_insupd', 1, 0, @Result);
			end;  
		
		if not exists(select 1 from salary_components where ComponentId = _ComponentId) then
        begin
			insert into salary_components
            values(
				_ComponentId,
                _ComponentFullName,
				_ComponentDescription,
                _CalculateInPercentage,
                _TaxExempt,
				_ComponentTypeId,
                _ComponentCatagoryId,
				_PercentageValue,
				_MaxLimit,
                _DeclaredValue,
                _AcceptedAmount,
				_RejectedAmount,
				_UploadedFileIds,
                _Formula,
				_EmployeeContribution,
				_EmployerContribution,
				_IncludeInPayslip,
                _IsAdHoc,
				_AdHocId,
                _Section,
				_SectionMaxLimit,
				_IsAffectInGross,
				_RequireDocs,
				_IsOpted,
                _IsActive,
				utc_date(),
                null,
                _AdminId,
                null
            );
            
            Set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update salary_components set				
				ComponentDescription			=			_ComponentDescription,
                ComponentFullName				=			_ComponentFullName,
				CalculateInPercentage			=			_CalculateInPercentage,
				PercentageValue					=			_PercentageValue,
                TaxExempt						=			_TaxExempt,
				ComponentTypeId					=			_ComponentTypeId,
                ComponentCatagoryId				=			_ComponentCatagoryId,
				MaxLimit						=			_MaxLimit,
                DeclaredValue					=			_DeclaredValue,
                AcceptedAmount					=			_AcceptedAmount,
				RejectedAmount					=			_RejectedAmount,
				UploadedFileIds					=			_UploadedFileIds,
                Formula							=			_Formula,
                EmployeeContribution			= 			_EmployeeContribution,
                EmployerContribution			=			_EmployerContribution,
                IncludeInPayslip				=			_IncludeInPayslip,
                IsAdHoc							=			_IsAdHoc,
				AdHocId							=			_AdHocId,
                Section							=			_Section,
				SectionMaxLimit					=			_SectionMaxLimit,
				IsAffectInGross					=			_IsAffectInGross,
				RequireDocs						=			_RequireDocs,
                IsOpted							=			_IsOpted,
                IsActive						=			_IsActive,
				UpdatedBy						=			_AdminId,
                UpdatedOn						=			utc_date()
            where ComponentId = _ComponentId;
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_group_and_components_get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_group_and_components_get`(
	_CompanyId int


	
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_salary_group_and_components_get', 1, 0, @Result);
			end;  
		
        select * from salary_group
        where CompanyId = _CompanyId;
        
		select 
        	ComponentId,
            ComponentFullName,
            ComponentDescription,
			CalculateInPercentage,
			TaxExempt,
            ComponentTypeId,
            ComponentCatagoryId,
			PercentageValue,
			MaxLimit,
            DeclaredValue,
            AcceptedAmount,
			RejectedAmount,
			UploadedFileIds,
            Formula,
			EmployeeContribution,
			EmployerContribution,
			IncludeInPayslip,
			Section,
            SectionMaxLimit,
            IsAdHoc,
            AdHocId,
			IsOpted,
			IsActive,
			CreatedBy,
            UpdatedBy,
            CreatedOn,
            UpdatedOn
        from salary_components ;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_group_getbyCompanyId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_group_getbyCompanyId`(



	_CompanyId int
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_salary_group_getbyCompanyId', 1, 0, @Result);
			end;  
		
		select * from salary_group
        where CompanyId = _CompanyId or SalaryGroupId = 1;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_group_get_by_id_or_ctc` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_group_get_by_id_or_ctc`(



	_SalaryGroupId int,
    _CTC decimal,
    _CompanyId int
)
Begin
    Set @OperationStatus = '';
		Begin
			Declare Exit handler for sqlexception
			Begin
				Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
											@errorno = MYSQL_ERRNO,
											@errortext = MESSAGE_TEXT;
				Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
				Call sp_LogException (@Message, @OperationStatus, 'sp_salary_group_get_by_id_or_ctc', 1, 0, @Result);
			end;  
		
		select * from salary_group
        where 
		CASE 
			when (select 1 from salary_group where SalaryGroupId = _SalaryGroupId)
            then SalaryGroupId = _SalaryGroupId and CompanyId = _CompanyId
            else _CTC >= MinAmount and _CTC <= MaxAmount and CompanyId = _CompanyId
		end;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_group_get_components` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_group_get_components`(


	 _SalaryGroupId int
)
Begin
	Declare componentsId Json;    
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_salary_group_get_components', 1, 0, @Result);
		end;  
		
		select 
			s.ComponentId Into componentsId
		from salary_group s
		where SalaryGroupId = _SalaryGroupId;
                
        Set @ids = '';
        Set @count = JSON_LENGTH(componentsId);
        Set @dm = '';
        Set @i = 0;
        while @i < @count do
        begin
			set @ids = Concat(@ids, @dm, '''', (select JSON_UNQUOTE(json_extract(componentsId, concat('$[', @i, ']')))), '''');
            
            set @i = @i + 1;
            if(@i > 0) then
				set @dm = ',';
			end if;
        end;
        end while;
        
        Set @SelectQuery = '';
        if(@ids is null OR @ids = '') then
        begin
			Select * from salary_components where IncludeInPayslip = 1;
        end;
        else
        begin
			Set @SelectQuery = Concat('
				Select * from salary_components where IncludeInPayslip = 1
					Union 
				Select * from salary_components
				where ComponentId in (', @ids, ')'
			);
		
			
			prepare SelectQuery from @SelectQuery;
			execute SelectQuery;	
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_group_get_initial_components` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_group_get_initial_components`(


)
Begin
	Declare salaryComponents Json;    
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_salary_group_get_initial_components', 1, 0, @Result);
		end;  
		
		Select * from salary_components where IsOPted = 1;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_salary_hike_ins_update` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_salary_hike_ins_update`(
	_SalaryHikeId int,
    _EmployeeId bigint,
    _HikeTypeId int,
    _CanAddInSalary bit,
    _IsForSingleMonth bit,
    _FromDate datetime, 
    _ToDate datetime, 
    _DisburseInPercentage bit,
    _PercentValue decimal,
    _Amount decimal,
    _IsTaxable bit,
    _ComponentId varchar(10),
    out _ProcessingResult varchar(100)
/*

	set @result= '';
	call sp_salary_hike_ins_update (1, 1, 1, 1, 1, '2023-10-10', '2023-10-10', 1, 10.0, 100, 1, 'BS', @result);
	select @result;

*/

)
Begin
	Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_salary_hike_ins_update', 1, 0, @Result);
		End;
        
		Set _ProcessingResult = '';
        if not exists(select 1 from salary_hike where SalaryHikeId = _SalaryHikeId) then
        begin
            set @salaryHikeId = 0;
            select SalaryHikeId into @salaryHikeId from salary_hike
            order by SalaryHikeId desc limit 1;
            
            set @salaryHikeId = @salaryHikeId + 1;
            
			insert into salary_hike values(
				@salaryHikeId,
				_EmployeeId,
				_HikeTypeId,
				_CanAddInSalary,
				_IsForSingleMonth,
				_FromDate, 
				_ToDate, 
				_DisburseInPercentage,
				_PercentValue,
				_Amount,
				_IsTaxable,
				_ComponentId
			);
            
            Set _ProcessingResult = 'inserted';
        end;
        else 
        begin
			update salary_hike set
					EmployeeId						=			_EmployeeId,
					HikeTypeId						=			_HikeTypeId,
					CanAddInSalary					=			_CanAddInSalary,
					IsForSingleMonth				=			_IsForSingleMonth,
					FromDate						=			_FromDate, 
					ToDate							=			_ToDate, 
					DisburseInPercentage			=			_DisburseInPercentage,
					PercentValue					=			_PercentValue,
					Amount							=			_Amount,
					IsTaxable						=			_IsTaxable,
					ComponentId						=			_ComponentId
			where SalaryHikeId = _SalaryHikeId;
            
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_sendingbill_email_get_detail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_sendingbill_email_get_detail`(
	_SenderId bigint,
	_ClientId bigint,
    _FileId bigint,
    _EmployeeId bigint


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_ClientsAndSender_Emails_By_Id', 1, 0, @Result);
		End;
        
        select * from filedetail
        where FileId = _FileId;
        
        select * from employees
        where EmployeeUid = _EmployeeId;
        
        select * from email_templates
        where EmailTemplateId = 1;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_service_request_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_service_request_filter`(
	_SearchString varchar(250),
	_SortBy varchar(50),
	_PageIndex int,
	_PageSize int


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_service_request_filter', 1, 0, @Result);
	End;

	Begin
		If(_SortBy is NULL OR _SortBy = '') then
			Set _SortBy = 'UpdatedOn, RequestedOn Desc';
		End if;
		Set @SelectQuery = CONCAT('Select * from(
			Select 
				Row_Number() over(Order by ', _SortBy, ') as RowIndex,
				ServiceRequestId,
				CompanyId,
				RequestTypeId,
                RequestTitle,
				RequestDescription,
				Quantity,
				Duration,
				FromDate,
				ToDate,
				AssignTo,
				Reference,
				RequestStatus,
				RequestedBy,
				RequestedOn,
				UpdatedOn,
				Count(1) Over() as Total from service_request
			Where ', _SearchString, '
		)T where RowIndex between ', ((_PageIndex - 1 ) * _PageSize + 1), ' and ', (_PageIndex * _PageSize));
		
	
	prepare SelectQuery from @SelectQuery;
	execute SelectQuery;	
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_service_request_ins_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_service_request_ins_upd`(



	_ServiceRequestId bigint,
	_CompanyId int,
	_RequestTypeId varchar(20),
    _RequestTitle varchar(150),
	_RequestDescription text,
	_Quantity int,
	_Duration decimal,
	_FromDate datetime,
	_ToDate datetime,
	_AssignTo json,
	_Reference varchar(100),
	_RequestStatus int,
	_AdminId bigint,
    out _ProcessingResult varchar(50)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		SET autocommit=0;							
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_service_request_ins_upd', 1, 0, @Result);
	end;
    if not exists(select 1 from service_request where ServiceRequestId = _ServiceRequestId) then
    begin
		set @newId = 0;
        select ServiceRequestId into @newId from service_request 
        order by ServiceRequestId desc;
        set @newId = @newId + 1;
    
		Insert into service_request values(
			@newId,
			_CompanyId,
			_RequestTypeId,
            _RequestTitle,
			_RequestDescription,
			_Quantity,
			_Duration,
			_FromDate,
			_ToDate,
			_AssignTo,
			_Reference,
			_RequestStatus,
			_AdminId,
			utc_date(),
            utc_date()
		);
        
        set _ProcessingResult = 'inserted';
    end;
    else
    begin
		update service_request set
			CompanyId			=		_CompanyId,
			RequestTypeId		=		_RequestTypeId,
            RequestTitle 		=		_RequestTitle,
			RequestDescription	=		_RequestDescription,
			Quantity			=		_Quantity,
			Duration			=		_Duration,
			FromDate			=		_FromDate,
			ToDate				=		_ToDate,
			AssignTo			=		_AssignTo,
			Reference			= 		_Reference,
			RequestStatus		=		_RequestStatus,
			RequestedBy 		= 		_AdminId,
			UpdatedOn 			= 		utc_date()
		where ServiceRequestId = _ServiceRequestId;
        
        set _ProcessingResult = 'updated';
    end;
    end if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_service_request_sel_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_service_request_sel_by_id`(



	_ServiceRequestId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_service_request_sel_by_id', 1, 0, @Result);
	end;
	
	select * from service_request
    where ServiceRequestId = _ServiceRequestId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Students_InsertUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Students_InsertUpdate`(
	_StudentUid varchar(64),
	_ClassTeacherUid varchar(64),
	_StudentFirstName varchar(50), 
	_StudentLastName varchar(50),
	_FatherName varchar(100),
	_MotherName varchar(100),
	_Class varchar(4),
	_Section char(1),
	_Address varchar(250), 
	_City varchar(50),
	_State varchar(50), 
	_Pincode varchar(100), 
	_NickName varchar(100)
)
Begin
	Set @UUid:= (CAST(UNIX_TIMESTAMP(CURTIME(3)) * 1000 AS unsigned));
    Set @OperationStatus = '';
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, @OperationStatus, 'sp_Students_InsertUpdate', 1, 0, @Result);
		end;

	Begin
		if not exists (Select 1 from Students where StudentUid = _StudentUid) then
			Begin
				Insert into Students 
					(
					StudentUid,
					ClassTeacherUid,
					StudentFirstName, 
					StudentLastName,
					FatherName,
					MotherName,
					Class,
					Section,
					Address, 
					City,
					State, 
					Pincode, 
					NickName
                    )
                values 
					(
					_StudentUid,
					_ClassTeacherUid,
					_StudentFirstName, 
					_StudentLastName,
					_FatherName,
					_MotherName,
					_Class,
					_Section,
					_Address, 
					_City,
					_State, 
					_Pincode, 
					_NickName
                    );
			End;
            Else
            Begin
				Update Students Set
					ClassTeacherUid	=	_ClassTeacherUid,
					StudentFirstName=	_StudentFirstName, 
					StudentLastName	=	_StudentLastName,
					FatherName		=	_FatherName,
					MotherName		=	_MotherName,
					Class			=	_Class,
					Section			=	_Section,
					Address			=	_Address, 
					City			=	_City,
					State			=	_State, 
					Pincode			=	_Pincode, 
					NickName		=	_NickName
			Where	StudentUid		=	_StudentUid;
            End;
            End if;
		End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_surcharge_slab_delete_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_surcharge_slab_delete_byid`(
	   
	_SurchargeSlabId bigint,
    out _ProcessingResult varchar(50)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

		Call sp_LogException (@Message, '', 'sp_surcharge_slab_delete_byid', 1, 0, @Result);
	end;
	
	delete from surcharge_slab
	where SurchargeSlabId = 	_SurchargeSlabId;
	Set _ProcessingResult = 'deleted';
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_surcharge_slab_getall` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_surcharge_slab_getall`(



)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_surcharge_slab_getall', 1, 0, @Result);
	end;  

	select * from surcharge_slab;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_surcharge_slab_get_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_surcharge_slab_get_byid`(


	_SurchargeSlabId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_surcharge_slab_get_byid', 1, 0, @Result);
	end;  
	
	select * from surcharge_slab
	where SurchargeSlabId = 	_SurchargeSlabId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_surcharge_slab_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_surcharge_slab_insupd`(
	   
	_SurchargeSlabId bigint,
	_MinSurcahrgeSlab decimal,
	_MaxSurchargeSlab decimal,
	_SurchargeRatePercentage decimal,
	out _ProcessingResult varchar(50)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

		Call sp_LogException (@Message, '', 'sp_surcharge_slab_insupd', 1, 0, @Result);
	end;
	
	if not exists (select 1 from surcharge_slab where SurchargeSlabId = _SurchargeSlabId) then
	begin
		Insert into surcharge_slab values(
			default,
			_MinSurcahrgeSlab,
			_MaxSurchargeSlab,
			_SurchargeRatePercentage
		);
	 
		 Set _ProcessingResult = 'inserted';
	end;
	else
	begin
		update surcharge_slab set 
			MinSurcahrgeSlab				=			_MinSurcahrgeSlab,
			MaxSurchargeSlab				=			_MaxSurchargeSlab,
			SurchargeRatePercentage			=			_SurchargeRatePercentage
		where SurchargeSlabId				 = 			_SurchargeSlabId;
		Set _ProcessingResult = 'updated';
	end;
	end if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_tax_age_group_getby_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_tax_age_group_getby_id`(
	   
	_AgeGroupId int
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_tax_age_group_getby_id', 1, 0, @Result);
		end;
        
        select * from tax_age_group where AgeGroupId = _AgeGroupId;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_tax_age_group_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_tax_age_group_insupd`(
	   
	_AgeGroupId int ,
	_StartAgeGroup int,
    _EndAgeGroup int,
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_tax_age_group_insupd', 1, 0, @Result);
		end;
        set @ageGroupId = 0;
        if not exists (select 1 from tax_age_group where AgeGroupId = _AgeGroupId) then
        begin
			select ageGroupId from tax_age_group order by AgeGroupId desc limit 1 into @ageGroupId;
            set @ageGroupId = @ageGroupId + 1;
            
			Insert into tax_age_group values(
				@ageGroupId,
				_StartAgeGroup,
				_EndAgeGroup
			);
         
             Set _ProcessingResult = @ageGroupId;
        end;
        else
        begin
			set @ageGroupId = _AgeGroupId;
			update tax_age_group set 
				StartAgeGroup				=		_StartAgeGroup,
				EndAgeGroup				=		_EndAgeGroup
			where AgeGroupId			 = 			_AgeGroupId;
            Set _ProcessingResult = @ageGroupId;
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_tax_regime_by_id_age` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_tax_regime_by_id_age`(


     _EmployeeId int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_tax_regime_by_id_age', 1, 0, @Result);
	end;  
	
    set @dob = now();
    set @age = 0;
    
    select DOB into @dob from employeepersonaldetail
    where EmployeeUid = _EmployeeId;    
    
    SELECT DATE_FORMAT(NOW(), '%Y') - DATE_FORMAT(@dob, '%Y') - (DATE_FORMAT(NOW(), '00-%m-%d') 
    < DATE_FORMAT(@dob, '00-%m-%d')) into @age;
    
    if (@age < 10) then
		set @age = 10;
	end if;
    
	select t.* from tax_regime t
	inner join tax_regime_desc d on t.RegimeDescId = d.TaxRegimeDescId
	where @age >= t.StartAgeGroup
	and @age <=  t.EndAgeGroup;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_tax_regime_delete_byid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_tax_regime_delete_byid`(
	   
	_TaxRegimeId int,
    out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_tax_regime_delete_byid', 1, 0, @Result);
		end;
        
        delete from tax_regime where TaxRegimeId = _TaxRegimeId;
        Set _ProcessingResult = 'deleted';
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_tax_regime_desc_getall` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_tax_regime_desc_getall`(
	   
	
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_tax_regime_desc_getall', 1, 0, @Result);
		end;
        
        select * from tax_regime_desc;
        select * from tax_regime;
         select * from tax_age_group;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_tax_regime_desc_getbyId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_tax_regime_desc_getbyId`(
	   
	_TaxRegimeDescId int
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_tax_regime_desc_getbyId', 1, 0, @Result);
		end;
        
        select * from tax_regime_desc where TaxRegimeDescId = _TaxRegimeDescId;
        
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_tax_regime_desc_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_tax_regime_desc_insupd`(
	   
	_TaxRegimeDescId int,
    _RegimeName varchar(45),
    _Description varchar(500),
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_tax_regime_desc_insupd', 1, 0, @Result);
		end;
        set @regimeId = 0;
        if not exists (select 1 from tax_regime_desc where TaxRegimeDescId = _TaxRegimeDescId) then
        begin
			select TaxRegimeDescId from tax_regime_desc order by TaxRegimeDescId desc limit 1 into @regimeId;
            set @regimeId = @regimeId + 1;
            
			Insert into tax_regime_desc values(
				default,
				_RegimeName,
				_Description
			);
         
             Set _ProcessingResult = @regimeId;
        end;
        else
        begin
			set @regimeId = _TaxRegimeDescId;
			update tax_regime_desc set 
				RegimeName				=			_RegimeName,
				Description				=			_Description
			where TaxRegimeDescId 		= 			_TaxRegimeDescId;
            Set _ProcessingResult = @regimeId;
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_tax_regime_getall` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_tax_regime_getall`(
	   
	
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_tax_regime_getall', 1, 0, @Result);
		end;
        
        select * from tax_regime;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_tax_regime_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_tax_regime_insupd`(
	   
	_TaxRegimeId int,
    _RegimeDescId int,
	_StartAgeGroup int,
	_EndAgeGroup int,
	_MinTaxSlab decimal,
	_MaxTaxSlab decimal,
	_TaxRatePercentage int,
	_TaxAmount decimal,
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_tax_regime_insupd', 1, 0, @Result);
		end;
        
        if not exists (select 1 from tax_regime where TaxRegimeId = _TaxRegimeId) then
        begin
			Insert into tax_regime values(
				default,
				_RegimeDescId,
				_StartAgeGroup,
				_EndAgeGroup,
				_MinTaxSlab,
				_MaxTaxSlab,
				_TaxRatePercentage,
				_TaxAmount
			);
         
             Set _ProcessingResult = 'inserted';
        end;
        else
        begin
			update tax_regime set 
				RegimeDescId			=			_RegimeDescId,
				StartAgeGroup			=			_StartAgeGroup,
				EndAgeGroup				=			_EndAgeGroup,
				MinTaxSlab				=			_MinTaxSlab,
				MaxTaxSlab				=			_MaxTaxSlab,
				TaxRatePercentage		=			_TaxRatePercentage,
				TaxAmount				=			_TaxAmount
			where TaxRegimeId			 = 			_TaxRegimeId;
            Set _ProcessingResult = 'updated';
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_team_member_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_team_member_upd`(
	   
	_ProjectMemberDetailId int,
    _ProjectId int,
    _EmployeeId bigint,
    _DesignationId int,
    _FullName varchar(50),
    _Email varchar(100),
    _IsActive bit,
    _Grade varchar(5),
    _MemberType int,
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_team_member_upd', 1, 0, @Result);
		end;
				
			update project_members_detail set 
				ProjectId						=			_ProjectId,
				EmployeeId						=			_EmployeeId,
				DesignationId					=			_DesignationId,
				FullName						=			_FullName,
				Email							=			_Email,
				IsActive						=			_IsActive,
                Grade							=			_Grade,
				MemberType						=			_MemberType,
                LastDateOnProject				=			utc_timestamp()
			where ProjectMemberDetailId 		= 			_ProjectMemberDetailId;
            
            Set _ProcessingResult = 'updated';
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_test_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_test_insupd`(


	_Id int,
	_Name varchar(50),
	_Code int,
	_LastUpdatedOn datetime,
	_Salary decimal,
	_IsEnable bit,
	_AccountType bit
)
Begin
    Set @OperationStatus = '';
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, @OperationStatus, 'sp_attendance_get_byid', 1, 0, @Result);
		end;
		
		if not exists(select 1 from test where Id = _Id) then
        begin
			insert into test values(
				_Id,
				_Name,
				_Code,
				_LastUpdatedOn,
				_Salary,
				_IsEnable,
				_AccountType
            );
        end;
        else
        begin
			update test set
				Name = _Name,
				Code = _Code,
				LastUpdatedOn = _LastUpdatedOn,
				Salary = _Salary,
				IsEnable = _IsEnable,
				AccountType = _AccountType
            where Id = _Id;
        end;
        end if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_timesheet_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_timesheet_insupd`(



	_TimesheetId bigint,
	_EmployeeId bigint,
	_ClientId bigint,
	_TimesheetWeeklyJson json,
	_ExpectedBurnedMinutes int,
	_ActualBurnedMinutes int,
	_TotalWeekDays int,
	_TotalWorkingDays int,
	_TimesheetStatus int,
    _TimesheetStartDate datetime,
    _TimesheetEndDate datetime,
    _UserComments varchar(500),
	_ForYear int,
    _AdminId bigint,
    _IsSaved bit,
    _IsSubmitted bit,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_timesheet_insupd', 1, 0, @Result);
	end;
	
	Set _ProcessingResult = '';
	Begin
		If not exists (Select 1 from employee_timesheet where TimesheetId = _TimesheetId) then
		Begin
			set @timesheetId = 0;
            select TimesheetId into @timesheetId from employee_timesheet
            order by TimesheetId desc limit 1;
            set @timesheetId = @timesheetId + 1;

			Insert into employee_timesheet values(
				@timesheetId,
				_EmployeeId,
				_ClientId,
				_TimesheetWeeklyJson,
				_ExpectedBurnedMinutes,
				_ActualBurnedMinutes,
				_TotalWeekDays,
				_TotalWorkingDays,
				_TimesheetStatus,
                _TimesheetStartDate,
				_TimesheetEndDate,
                _UserComments,
				_ForYear,
				utc_date(),
				utc_date(),
				_AdminId,
				_AdminId,
				_IsSaved,
				_IsSubmitted
			);
			
			Set _ProcessingResult = 'inserted';
		End;
		Else
		Begin
			Update employee_timesheet Set
					EmployeeId						=				_EmployeeId,
					ClientId						=				_ClientId,
					TimesheetWeeklyJson				=				_TimesheetWeeklyJson,
					ExpectedBurnedMinutes			=				_ExpectedBurnedMinutes,
					ActualBurnedMinutes				=				_ActualBurnedMinutes,
					TotalWeekDays					=				_TotalWeekDays,
					TotalWorkingDays				=				_TotalWorkingDays,
					TimesheetStatus					=				_TimesheetStatus,
                    TimesheetStartDate				=				_TimesheetStartDate,
					TimesheetEndDate				=				_TimesheetEndDate,
                    UserComments					=				_UserComments,
					ForYear							=				_ForYear,
					UpdatedOn						=				NOW(),
					ExecutedBy						= 				_AdminId,
                    IsSaved 						=				_IsSaved,
					IsSubmitted 					=				_IsSubmitted
			where 	TimesheetId 					= 				_TimesheetId;
			
			Set _ProcessingResult = 'updated';
		End;
		End if;	
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_timesheet_requests_by_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_timesheet_requests_by_filter`(
    _ReportingManagerId bigint,
    _ForYear bigint,
    _TimesheetStatus int,
    _EmployeeId int,
    _PageIndex int,
    _StartDate datetime,
    _EndDate datetime
    
/*

	call sp_timesheet_requests_by_filter(5, 2024, 8, 0, 1, '0001-01-01', '0001-01-01')

*/    
    
)
Begin
	Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, '', 'sp_timesheet_requests_by_filter', 1, 0, @Result);
		end;
        
        begin
			set @ManagerName = '';
			set @ManagerMobile = '';
			set @ManagerEmail = '';
			select 
				Concat(FirstName, ' ', LastName) ManagerName,
				Mobile,
				Email into @ManagerName, @ManagerMobile, @ManagerEmail
			from employees
			where EmployeeUid = _ReportingManagerId;
                        
			Select * from (
				Select 
					Row_Number() over(Order by o.SubmittedOn) as RowIndex,
					o.*, 
					e.FirstName, 
					e.LastName, 
					e.Email, 
					e.Mobile, 
					c.ClientName, 
					e.ReportingManagerId,
                    @ManagerName ManagerName,
                    @ManagerMobile ManagerMobile,
                    @ManagerEmail ManagerEmail,
					Count(1) Over() as Total 
				from employee_timesheet o 
				inner join employees e on o.EmployeeId = e.EmployeeUid
				inner join clients c on o.ClientId = c.ClientId 
				Where 1=1 AND o.ForYear = _ForYear 
                AND e.ReportingManagerId = _ReportingManagerId AND o.IsSubmitted = 1 AND o.IsSubmitted = 1 AND
				CASE 
					When _EmployeeId > 0 
					then o.EmployeeId = _EmployeeId
                    else 1
				END 
                AND
				CASE 
					When _TimesheetStatus > 0
					then o.TimesheetStatus = _TimesheetStatus
                    else 1
				END
                AND
                CASE
					when _StartDate is not null 
                    and year(_StartDate) > 1000 
                    and _EndDate is not null
                    and year(_EndDate) > 1000 
                    then ((o.TimesheetStartDate BETWEEN _StartDate AND _EndDate)
						OR (o.TimesheetEndDate BETWEEN _StartDate AND _EndDate)
						OR (o.TimesheetStartDate <= _StartDate AND o.TimesheetEndDate >= _EndDate))
					else 1
				END
					
			) o 
			where RowIndex between (_PageIndex - 1) * 10 + 1  and (_PageIndex * 10);      
        End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_timesheet_runweekly_data` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_timesheet_runweekly_data`(
	_TimesheetStartDate datetime,
    _TimesheetEndDate datetime,
    out _ProcessingResult varchar(100)
    
/*

	Set @result = '';
	call sp_timesheet_runweekly_data('2023-12-31 18:30:00', '2024-01-13 18:30:00', @result);
    select @result;

*/    
    
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_timesheet_runweekly_data', 1, 0, @Result);
	end;

	Set _ProcessingResult = '';
    Set @counter = 0;
    Set @TimesheetStartDate = (select TimesheetStartDate from employee_timesheet order by TimesheetId desc limit 1);
    
    Set @days = 7;
    if (_TimesheetEndDate is not null) then
    begin
		Set @days = datediff(_TimesheetEndDate, _TimesheetStartDate);
        Set @days = @days + 1;
        
        if (@days < 0 Or @days % 7 != 0) then
        begin
			Set _ProcessingResult = 0;
            
			  -- Use SIGNAL to raise the exception
			SIGNAL SQLSTATE '45000' 
				SET MESSAGE_TEXT = 'Multiple of weekdays i.e. 7 days only allowed.';
		end;
		end if;
	end;
    end if;
    
	If (@TimesheetStartDate is null OR datediff(_TimesheetStartDate, @TimesheetStartDate))then
	Begin    	
		set @timesheetId = 0;    
		select TimesheetId into @timesheetId from employee_timesheet
		order by TimesheetId desc limit 1;
		
		Drop table if exists mappedClients;
		Create temporary table mappedClients as (
			select row_number() over(order by m.EmployeeMappedClientsUid) RowIndex, 
				m.EmployeeUid, 
				m.ClientUid, 
				w.WorkShiftId, 
				w.IsMon, 
				w.IsTue, 
				w.IsWed, 
				w.IsThu,
				w.IsFri, 
				w.IsSat, 
				w.IsSun, 
				w.TotalWorkingDays, 
				w.Duration
            from employeemappedclients m 
            inner join employees e on e.EmployeeUid = m.EmployeeUid
            inner join work_shifts w on 
            case 
				when e.WorkShiftId > 0 then w.WorkShiftId = e.WorkShiftId
				else w.WorkShiftId = 1
            end
            where m.IsActive = 1 and ClientUid > 0
		);
		
		
		Set @employeeId = 0;
		Set @clientId = 0;
		Set @counter = 1;        
		Set @total = (select count(1) from mappedClients);
		while (@counter <= @total) do
		Begin			
			set @TimesheetStartDate = _TimesheetStartDate;
			set @isMon = false;
			set @isTue = false;
			set @isWed = false;
			set @isThu = false;
			set @isFri = false;
			set @isSat = false;
			set @isSun = false;
            set @duration = 0;
            
            select 
				IsMon,
                IsTue,
                IsWed,
                IsThu,
                IsFri,
                IsSat,
                IsSun,
                Duration,
                EmployeeUid
			from mappedClients
            where RowIndex = @counter
            into
			@isMon,
			@isTue,
			@isWed,
			@isThu,
			@isFri,
			@isSat,
			@isSun,
			@duration,
            @employeeId;
            
			if not exists (select 1 from employee_timesheet where EmployeeId = @employeeId 
				and _TimesheetEndDate = TimesheetEndDate
				and _TimesheetStartDate = TimesheetStartDate) then 
            begin
				set @daysCount = 0;
				set @json_array = JSON_ARRAY();
				while (@daysCount < @days) do
				begin				
					set @weekdaysFlag = false;
					Case
						when @daysCount % 7 = 0 then if (@isMon is true) then set @weekdaysFlag = true; end if;
						when @daysCount % 7 = 1 then if (@isTue is true) then set @weekdaysFlag = true; end if;
						when @daysCount % 7 = 2 then if (@isWed is true) then set @weekdaysFlag = true; end if;
						when @daysCount % 7 = 3 then if (@isThu is true) then set @weekdaysFlag = true; end if;
						when @daysCount % 7 = 4 then if (@isFri is true) then set @weekdaysFlag = true; end if;
						when @daysCount % 7 = 5 then if (@isSat is true) then set @weekdaysFlag = true; end if;
						when @daysCount % 7 = 6 then if (@isSun is true) then set @weekdaysFlag = true; end if;
					End Case;
					
					set @json_array = JSON_ARRAY_APPEND(@json_array, '$', json_object(
						"WeekDay", DAYOFWEEK(date_add(@TimesheetStartDate, interval (@daysCount % 7) day)) - 1,
						"PresentDate", date_add(@TimesheetStartDate, interval (@daysCount % 7) day),
						"ExpectedBurnedMinutes", if (@weekdaysFlag is true, @duration, 0),
						"ActualBurnedMinutes", if (@weekdaysFlag is true, @duration, 0),
						"IsHoliday", 0,
						"IsWeekEnd", if (@weekdaysFlag is true, 0, 1),
						"IsOpen", 1
					));
					
					
					if ((@daysCount + 1) % 7 = 0) then
					begin					
						set @timesheetId = @timesheetId + 1;
						Insert into employee_timesheet 
						select 
							@timesheetId,
							m.EmployeeUid,
							m.ClientUid,
							@json_array,						
							m.TotalWorkingDays * m.Duration,
							0,
							m.TotalWorkingDays,
							0,
							2,
							@TimesheetStartDate,
							date_add(@TimesheetStartDate, interval 6 day),
							'',
							year(@TimesheetStartDate),
							utc_date(),
							utc_date(),
							1,
							1,
							0,
							0 
						from mappedClients m
						where RowIndex = @counter;
						
						set @TimesheetStartDate = date_add(@TimesheetStartDate, interval 7 day);
						set @json_array = JSON_ARRAY();
					end;
					end if;
									
					set @daysCount = @daysCount + 1;
				end;
				end while;            
            end;
            end if;            
            	
			Set @counter = @counter + 1;	
		End;
		End while;
		
		Drop table if exists mappedClients;
	End;
    End if;
	Set _ProcessingResult = @counter - 1;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_timesheet_upd_by_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_timesheet_upd_by_id`(



	_TimesheetId bigint,
	_TimesheetStatus int,
    _UserComments varchar(500),
    _IsSubmitted bit,
    _AdminId bigint,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_timesheet_upd_by_id', 1, 0, @Result);
	end;
	
	Set _ProcessingResult = '';
	Begin
		If exists (Select * from employee_timesheet where TimesheetId = _TimesheetId) then		
		Begin
			Update employee_timesheet Set					
					TimesheetStatus					=				_TimesheetStatus,
                    UserComments					=				_UserComments,
                    IsSubmitted						=				_IsSubmitted,
					ExecutedBy						= 				_AdminId
			where 	TimesheetId 					= 				_TimesheetId;
			
			Set _ProcessingResult = 'updated';
		End;
		End if;	
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_UpdateRefreshToken` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_UpdateRefreshToken`(
	_UserId bigint,
	_RefreshToken varchar(500),
	_ExpiryTime Datetime
    
    
    
    
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, @OperationStatus, 'sp_UpdateRefreshToken', 1, 0, @Result);
	end;    
	Begin
		If not exists(Select 1 from refreshtoken where UserId = _UserId) then
        Begin
			Insert into refreshtoken values(
				_UserId,
                _RefreshToken,
                _ExpiryTime
            );
        End;
        Else
        Begin
			Update refreshtoken Set 
				RefreshToken = _RefreshToken,
				ExpiryTime = _ExpiryTime
			where UserId = _UserId;
        End;
        End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_update_json` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_update_json`(
	
/*

	call sp_update_json()

*/    


)
Begin
	DECLARE i INT DEFAULT 0;
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
								
		Set sql_safe_updates = 1;
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_update_json', 1, 0, @Result);
	End;
    
    -- Assuming your JSON column is named 'json_column' in a table named 'your_table'	
	SET i = 11;

	Set sql_safe_updates = 0;
	-- Loop through the JSON array
	WHILE i >= 0 DO	
	Begin
		UPDATE employee_salary_detail
		SET TaxDetail = JSON_SET(TaxDetail, concat('$[', i, '].IsPayrollCompleted'), false),
        CompleteSalaryDetail = JSON_SET(CompleteSalaryDetail, concat('$[', i, '].IsPayrollExecutedForThisMonth'), false);
		SET i = i - 1;
	End;
	END WHILE;
    Set sql_safe_updates = 1;

end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SP_UserComments_Get` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_UserComments_Get`(
	_Email varchar(100)


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'SP_UserComments_Get', 1, 0, @Result);
		End;

        Begin
            Select * from usercomments where Email = _Email;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_UserDetail_ById` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_UserDetail_ById`(
	_userId bigint


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_UserDetail_ById', 1, 0, @Result);
		End;

        Begin
			Select * from userdetail u
            where u.UserId = _userId;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_userdetail_del_by_file_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_userdetail_del_by_file_id`(
	_FileId bigint,
    out _ProcessingResult varchar(50)
    
    
    
    
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
        Set autocommit = ON;
        Set _ProcessingResult = '';
		Call sp_LogException (@Message, '', 'sp_userdetail_del_by_file_id', 1, 0, @Result);
	end;    
    
	set autocommit = OFF;
    set sql_safe_updates = 0;
	
    delete from userfiledetail
    where FileId = _FileId;
    
    set sql_safe_updates = 1;
    set autocommit = ON; 
    set _ProcessingResult = 'deleted';
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_UserDetail_GetByMobileOrEmail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_UserDetail_GetByMobileOrEmail`(
	_email varchar(100),
	_mobile varchar(20)


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_UserDetail_GetByMobileOrEmail', 1, 0, @Result);
		End;

        Begin
			Select * from employeelogin u
            where u.Mobile = _mobile or
            u.Email = _email;
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_UserDetail_Ins` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_UserDetail_Ins`(
	_UserId bigint,
	_FirstName varchar(50),
	_LastName varchar(50),
	_MobileNo varchar(20),
	_EmailId varchar(50),
	_Address varchar(250),
    _CompanyName varchar(100),
    _AdminId bigint,
    out _ProcessingResult varchar(50)
    
    
    
    
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, @OperationStatus, 'sp_UserDetail_Ins', 1, 0, @Result);
	end;    
	Begin
		Set _ProcessingResult = Fn_Generate_newPassword();
        
        
		If not exists(Select 1 from UserDetail Where Mobile = _MobileNo Or EmailId = _EmailId Or UserId = _UserId) then
		Begin
			Insert into UserDetail Values (Default, 
				_FirstName,
				_LastName,
				_Address,
				_EmailId,
				_MobileNo,
				_CompanyName,
				_AdminId,
				null,
				Now(),
				null
			);
			
			Insert into UserLogin values(Default,
				2,
				_ProcessingResult,
				_EmailId,
				_MobileNo,
				_AdminId,
				null,
				now(),
				null
			);
		End;
		End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_userfiledetail_get_files` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_userfiledetail_get_files`(
	_searchString varchar(250)


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_userfiledetail_get_files', 1, 0, @Result);
		End;

        Begin
            Set @SelectQuery = CONCAT('Select * from userfiledetail
				Where FileId in (', _SearchString, ')'
			);
            
		
		prepare SelectQuery from @SelectQuery;
		execute SelectQuery;	
		End;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_userfiledetail_Upload` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_userfiledetail_Upload`(
	_FileId bigint,
	_FileOwnerId int,
	_FilePath varchar(500), 
	_FileName varchar(100),
	_FileExtension varchar(100),
    _UserTypeId int,
    _AdminId long,
    out _ProcessingResult varchar(100)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
                                        
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
            Call sp_LogException (@Message, '', 'sp_userfiledetail_Upload', 1, 0, @Result);
		end;
		
        if not exists (select 1 from userfiledetail where FileId = _FileId) then
		Begin
			set @fileId = 0;
			Select FileId from userfiledetail order by FileId desc limit 1 into  @fileId;
			Set @fileId  =  @fileId  + 1;
			
			insert into userfiledetail values (
				@fileId,
				_FileOwnerId,
				_FilePath,
				null,
				_FileName,
				_FileExtension,
				0,
				_UserTypeId,
				_AdminId,
				null,
				utc_timestamp(), 
				null
			);
            
			Set _ProcessingResult = @fileId;
		End;
		Else
		Begin
			Update userfiledetail Set
				FilePath			=		_FilePath,
				FileName			=		_FileName,
				FileExtension		=		_FileExtension,
				UserTypeId			=		_UserTypeId,
				UpdatedBy			=		_AdminId,
				UpdatedOn			=		utc_timestamp()
			Where FileId 			= 		_FileId;
			Set _ProcessingResult = _FileId;
		End;
		End if;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_userFiles_GetBy_OwnerId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_userFiles_GetBy_OwnerId`(
	_FileOwnerId int,
	_UserTypeId int


)
Begin
    Begin
		Declare exit handler for sqlexception
		Begin
		
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
										
			Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
			Call sp_LogException(@Message, '', 'sp_userFiles_GetBy_OwnerId', 1, 0, @Result);
		End;

		Select * from userfiledetail f
        where f.FileOwnerId = _FileOwnerId and
		f.UserTypeId = _UserTypeId;
	End;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_Userlogin_Auth` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Userlogin_Auth`(


	_UserId bigint,
	_MobileNo varchar(20),
	_EmailId varchar(50),
	_UserTypeId int    
)
Begin
    Set @OperationStatus = '';
Begin
		Declare Exit handler for sqlexception
		Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
			@errorno = MYSQL_ERRNO,
			@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
			Call sp_LogException (@Message, @OperationStatus, 'sp_Userlogin_Auth', 1, 0, @Result);
		end;  

		Set @RoutePrefix = '';
		Set @UserExistsFlag = 0;
		Begin
			Set @pass = '';
			Select Password from userlogin
			where (Email = _EmailId Or Mobile = _MobileNo) and UserTypeId = _UserTypeId
			into @pass;

			Set @UserExistsFlag = 1;
		   
			If (@UserExistsFlag = 1)then
			Begin
			Set @RoutePrefix = 'admin';
			Set @AccessLevelId = 0;
				Select AccessLevelId from userlogin
				Where Email = _EmailId Or Mobile = _MobileNo
				into @AccessLevelId;
			   
				if(_UserTypeId = 1) then
				begin
					Select
						UserId,
						FirstName,
						LastName,
						Address,
						EmailId,
						Mobile,
						CompanyName,
						@AccessLevelId RoleId,
						_UserTypeId UserTypeId
					from userdetail
					Where EmailId = _EmailId Or Mobile = _MobileNo;
				end;
				else
				begin
					Set @RoutePrefix = 'user';
					Select
						EmployeeUid UserId,
						FirstName,
						LastName,
						'NA' Address,
						Email,
						Mobile,
						@AccessLevelId RoleId,
						_UserTypeId UserTypeId
					from employees
					Where Email = _EmailId Or Mobile = _MobileNo;
				end;
				end if;
			   
				if(@AccessLevelId = 1) then
				begin
					Select RM.Catagory, RM.Childs, concat(@RoutePrefix, '/', RM.Link) Link, RM.Icon, RM.Badge,
					RM.BadgeType, RM.AccessCode,  1 as Permission from rolesandmenu RM
					where Catagory <> 'Home' or Childs <> 'Home';
				end;
				else
				begin                  
					Select RM.Catagory, RM.Childs, concat(@RoutePrefix, '/', RM.Link) Link, RM.Icon, RM.Badge,
					RM.BadgeType, RM.AccessCode,
					AccessibilityId Permission from rolesandmenu RM
					left Join role_accessibility_mapping r on r.AccessCode = RM.AccessCode
					where r.AccessLevelId = @AccessLevelId
					and r.AccessibilityId > 0;
				end;
				end if;
			End;
			End if;
		End;
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_user_files_get_byids_json` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_user_files_get_byids_json`(


	_UserFileId json
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_user_files_get_byids_json', 1, 0, @Result);
	end;  
		
		
		select u.* from userfiledetail u
		inner join (
		SELECT *
			 FROM
			   JSON_TABLE(
				 _UserFileId,
				 "$[*]"
				 COLUMNS(
				   col INT PATH "$"
				 )
			   ) data
		) t on u.FileId = t.col;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_user_layout_configuration_get_by_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_user_layout_configuration_get_by_empid`(



    _EmployeeId bigint
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_user_layout_configuration_get_by_empid', 1, 0, @Result);
	end;
        
	select * from user_layout_configuration where EmployeeId = _EmployeeId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_user_layout_configuration_ins_upt` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_user_layout_configuration_ins_upt`(



    _EmployeeId bigint,
    _UserLayoutConfiguration json
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_user_layout_configuration_ins_upt', 1, 0, @Result);
	end;
        
	if not exists (select 1 from user_layout_configuration where EmployeeId = _EmployeeId) then
    begin
		Insert into user_layout_configuration values(
			_EmployeeId,
            _UserLayoutConfiguration
        );
    end;
    else 
    begin
		Update user_layout_configuration set
			SettingsJson = _UserLayoutConfiguration
        where EmployeeId = _EmployeeId;  
    end;
    end if;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_wiki_detail_upd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_wiki_detail_upd`(
	   
	_ProjectId bigint ,
    _PageIndexDetail json,
    _KeywordDetail json,
    _DocumentPath varchar(150),
    _AdminId bigint,
	out _ProcessingResult varchar(50)
)
Begin
    Begin
		Declare Exit handler for sqlexception
        Begin
			Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
										@errorno = MYSQL_ERRNO,
										@errortext = MESSAGE_TEXT;
			Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);

            Call sp_LogException (@Message, '', 'sp_wiki_detail_upd', 1, 0, @Result);
		end;
        
        update project set 
				PageIndexDetail					=			_PageIndexDetail,
				KeywordDetail					=			_KeywordDetail,
                DocumentPath					=			_DocumentPath,
                UpdatedBy						=			_AdminId,
                UpdatedOn						=			utc_timestamp()
			where ProjectId 					= 			_ProjectId;
            Set _ProcessingResult = 'updated';
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_workflow_chain_by_emp_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_workflow_chain_by_emp_id`(
        _EmployeeId bigint,
        _DesignationIds varchar(50) 
        
        
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
                                    
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);  
		Call sp_LogException (@Message, '', 'sp_workflow_chain_by_emp_id', 1, 0, @Result);
	end;
	

	set @roleId = 0;
	set @approvalWorkflowId = 0;
	select DesignationId into @roleId from employees where EmployeeUid = _EmployeeId;
	select o.ApprovalWorkflowId into @approvalWorkflowId from objective_catagory as o 
	where JSON_CONTAINS(o.RolesId, concat(@roleId), '$');

    
	select 
		c.*, 
        w.AutoExpireAfterDays, 
        w.NoOfApprovalLevel, 
        w.IsAutoExpiredEnabled 
	from approval_chain_detail c
    inner join approval_work_flow w on c.ApprovalWorkFlowId = w.ApprovalWorkFlowId
	where c.ApprovalWorkFlowId = @approvalWorkflowId;

	set @projectId = 0;
    select ProjectId into @projectId from employees where EmployeeUid = _EmployeeId;

    drop table if exists chain_members;
    create temporary table if not exists chain_members as (
		select * from approval_chain_detail
        where AssignieId in (	
			SELECT id
			FROM
			JSON_TABLE(
				_DesignationIds,
				'$[*]'
				COLUMNS (
					id int path '$'
				)
			) AS t
		)
	);
    
    set @reportingManagerId = 0;
    set @adminId = 0;
    select ReportingManagerId, CreatedBy into @reportingManagerId, @adminId from employees where EmployeeUid = _EmployeeId;    
	
    
    if (@projectId != 0) then
    begin
		select 
			e.DesignationId, 
			e.EmployeeId, 
			e.Email, 
			e.FullName Name, 
            case
				when a.IsRequired is null or a.IsRequired = 0 then false
                else true
			end 
			IsRequired 
		from project_members_detail e
		inner join approval_chain_detail a on a.AssignieId = e.MemberType
        where e.ProjectId = @projectId
        
        union
        
		select 
			e.DesignationId, 
			e.EmployeeUid, 
            e.Email, 
            concat(e.FirstName, ' ', e.LastName) Name, 
            case
				when a.IsRequired is null or a.IsRequired = 0 then false
                else true
			end 
            IsRequired  
		from employees e
		inner join chain_members a on a.AssignieId = e.DesignationId
		where e.EmployeeUid in (@reportingManagerId, @adminId);
    end;
    else 
    begin
		select 
			e.DesignationId, 
            e.EmployeeUid, 
            e.Email, 
            concat(e.FirstName, ' ', e.LastName) Name, 
            case
				when a.IsRequired is null or a.IsRequired = 0 then false
                else true
			end
            IsRequired
		from employees e
		left join chain_members a on a.AssignieId = e.DesignationId
		where e.EmployeeUid in (@reportingManagerId, @adminId);
    end;
	end if;
    drop table if exists chain_members;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_work_shifts_by_clientId` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_work_shifts_by_clientId`(
	_ClientId bigint
    


)
Begin
	Declare exit handler for sqlexception
	Begin
	
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
									
		Set @Message = CONCAT('ERROR ', @errorno ,  ' (', @sqlstate, '): ', @errortext);
		Call sp_LogException(@Message, '', 'sp_work_shifts_by_clientId', 1, 0, @Result);
	End;
	
    set @workShiftId = 1;
	select WorkShiftId into @workShiftId from clients c
	where c.ClientId = _ClientId;
    
    if (@workShiftId = 0)then
		set @workShiftId = 1;
	end if;

	select * from work_shifts
	where WorkShiftId = @workShiftId;
end ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_work_shifts_filter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_work_shifts_filter`(


	_SearchString varchar(250),
	_SortBy varchar(50),
	_PageIndex int,
	_PageSize int
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_work_shifts_filter', 1, 0, @Result);
	end;
    
    if (_SortBy is null or _SortBy = '') then
		set _SortBy = 'CreatedOn desc';
	end if;
    
	set @SelectQuery = Concat('select * from (
		select 
        Row_Number() over(Order by ', _SortBy, ') as RowIndex,
        w.*,
        Count(1) Over() as Total from work_shifts w
		Where ', _SearchString, '
	)T where RowIndex between ', ((_PageIndex - 1 ) * _PageSize + 1), ' and ', (_PageIndex * _PageSize));
    
    
	prepare SelectQuery from @SelectQuery;
	execute SelectQuery;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_work_shifts_getby_empid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_work_shifts_getby_empid`(
	_EmployeeId int


)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_work_shifts_getby_empid', 1, 0, @Result);
	end;
	
    set @workshiteid = 0;
    select WorkShiftId from employees where EmployeeUid = _EmployeeId into @workshiteid;

    select * from work_shifts where WorkShiftId = @workshiteid;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_work_shifts_getby_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_work_shifts_getby_id`(
	_WorkShiftId int


)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_work_shifts_getby_id', 1, 0, @Result);
	end;
	
    select * from work_shifts where WorkShiftId = _WorkShiftId;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_work_shifts_insupd` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_work_shifts_insupd`(



	_WorkShiftId int,
    _CompanyId int,
    _Department int,
    _WorkFlowCode varchar(10),
    _ShiftTitle varchar(100),
    _Description varchar(500),
    _IsMon bit,
    _IsTue bit,
    _IsThu bit,
    _IsWed bit,
    _IsFri bit,
    _IsSat bit,
    _IsSun bit,
    _TotalWorkingDays int,
    _StartDate datetime,
    _EndDate datetime,
    _OfficeTime varchar(5), 
    _Duration int, 
    _LunchDuration int, 
    _Status int,
    _LastUpdatedOn datetime,
    _AdminId bigint,
    out _ProcessingResult varchar(100)
)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_work_shifts_insupd', 1, 0, @Result);
	end;
	
	Set _ProcessingResult = '';
	Begin
		If not exists (Select 1 from work_shifts where WorkShiftId = _WorkShiftId) then
		Begin
			set @WorkShiftId = 0;
            select WorkShiftId into @WorkShiftId from work_shifts
            order by WorkShiftId desc limit 1;
            set @WorkShiftId = @WorkShiftId + 1;

			Insert into work_shifts values(
				@WorkShiftId,
				_CompanyId,
				_Department,
				_WorkFlowCode,
				_ShiftTitle,
				_Description,
				_IsMon,
				_IsTue,
				_IsThu,
				_IsWed,
				_IsFri,
				_IsSat,
				_IsSun,
				_TotalWorkingDays,
				_StartDate,
				_EndDate,
				_OfficeTime,
				_Duration,
				_LunchDuration,
				_Status,
				utc_date(),
                _AdminId,
                utc_date()
			);
			
			Set _ProcessingResult = 'inserted';
		End;
		Else
		Begin
			Update work_shifts Set
				WorkShiftId              =          _WorkShiftId,
				CompanyId                =          _CompanyId,
				Department               =          _Department,
				WorkFlowCode             =          _WorkFlowCode,
				ShiftTitle               =          _ShiftTitle,
				Description              =          _Description,
				IsMon                	=          _IsMon,
				IsTue                	=          _IsTue,
				IsThu                	=          _IsThu,
				IsWed                	=          _IsWed,
				IsFri                	=          _IsFri,
				IsSat                	=          _IsSat,
				IsSun                	=          _IsSun,
				TotalWorkingDays        =          _TotalWorkingDays,
				StartDate               =          _StartDate,
				EndDate              	=          _EndDate,
				OfficeTime              =          _OfficeTime,
				Duration                =          _Duration,
				LunchDuration           =          _LunchDuration,
				Status               	=          _Status,
				LastUpdatedOn           =          utc_date(),
				CreatedBy              	=          _AdminId
			where 	WorkShiftId 		= 		   _WorkShiftId;
			
			Set _ProcessingResult = 'updated';
		End;
		End if;	
	End;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sp_work_shifts_sel` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8mb4 */ ;
/*!50003 SET character_set_results = utf8mb4 */ ;
/*!50003 SET collation_connection  = utf8mb4_0900_ai_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_work_shifts_sel`(



)
Begin
	Declare Exit handler for sqlexception
	Begin
		Get Diagnostics condition 1 @sqlstate = RETURNED_SQLSTATE,
									@errorno = MYSQL_ERRNO,
									@errortext = MESSAGE_TEXT;
					 
		Set @Message = concat ('ERROR ', @errorno ,  ' (', @sqlstate, '); ', @errortext);
		Call sp_LogException (@Message, '', 'sp_work_shifts_sel', 1, 0, @Result);
	end;
	
    select * from work_shifts;
End ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2024-06-01  6:53:16


INSERT INTO `accessibility_description` VALUES (1,'Complete access. (read, udpate and detele)'),(2,'Only read access.'),(3,'Read and update access.');

INSERT INTO `accesslevel` VALUES (1,'Admin','Having all rights','2022-10-17 00:00:00',NULL),(2,'Employee','Regular Employee','2022-11-02 08:43:10',NULL),(3,'Manager','Manger Role','2022-11-02 08:43:10',NULL);

INSERT INTO `application_setting` VALUES (1,1,1,2,'{\"PasswordMinLength\":8,\"PasswordMaxLength\":16,\"PasswordRegexFormula\":1,\"TemporaryPasswordExpiryTimeInSeconds\":3600}');

INSERT INTO `approval_chain_detail` VALUES (1,1,9,_binary '\1','2023-10-13 09:30:19',2);

INSERT INTO `approval_work_flow` VALUES (1,'DEFAULT FLOW','IF EMPLOYEE DOESN\'T ASSOCIATED WITH ANY PROJECT THEN THIS FOLLOW WILL BE USED AS A DEFAULT WORK FLOW. IN THIS FOLOW, EMPLOYEE HAS ANY REPORTING MANAGER ASSIGN THEN ALL THE REQUEST WILL GO TO THE REPORTING MANAGER OTHER WISE IT WILL REDIRECT TO THE HEAD OF HR.',2,_binary '\0',10,0,_binary '\0','[]',1,0,'2024-03-23 14:30:22',NULL);

INSERT INTO `attendance_setting` VALUES (1,1,3,_binary '\0',25);

INSERT INTO `billtype` VALUES (1,'Bill number sequence for generating payment to clients');

INSERT INTO `bills` VALUES (1,1,1,8,1);

INSERT INTO `component_type` VALUES (1,'Fixed'),(2,'Allowance (By: Employee)'),(3,'Rembursment'),(4,'Reimursable'),(5,'Deduction'),(6,'Perquisite'),(7,'Allowance (By: Employer)');

INSERT INTO `department` VALUES (1,'Administration','Administration'),(2,'Management','Management'),(3,'Marketing','Marketing'),(4,'Professional Service','Professional Service'),(5,'Research & Development','Research & Development'),(6,'Sales','Sales'),(7,'SEO','SEO'),(8,'Other','Other'),(9,'ALL','Applicable for all department');

INSERT INTO `employee_roles` VALUES (1,'Admin','Admin',0,1),(2,'Project Manager','Project Manager',0,2),(3,'Project Architect','Architect',0,4),(4,'Tester','Tester',0,4),(5,'Senior HR','Senior HR',0,2),(6,'HR','HR',0,2),(7,'Manager','Manager',0,2),(8,'Solution Architect','Architect',0,4),(9,'Application Architect','Architect',0,4),(10,'Networking','Networking',0,4),(11,'Test Lead','Test Lead',0,4),(12,'Full stack Developer','Full stack Developer',0,4),(13,'Developer','Backend (Server side) Developer',0,4),(14,'Sr. Software Developer','Backend (Server side) Developer',0,4),(15,'Database Developer','Database Developer',0,4),(16,'Frontend (UI) Developer','Frontend (UI) Developer',0,4),(17,'System Engineer','System Engineer',0,4),(18,'Associate Engineer','Associate Engineer',0,4),(19,'Team Lead','Team Lead',0,4),(20,'Other','Other',0,4);

INSERT INTO `itemstatus` VALUES (1,'Completed','Payment received'),(2,'Pending','Payment pending by client'),(3,'Canceled','Payment canceled by sender'),(4,'Not Generated','Payment bill not yet generated'),(5,'Rejected','Payment rejected by client'),(6,'Generated','GST raised for payment, waiting for confirmation.'),(7,'Raised','Bill raised to client'),(8,'Submitted','Attendance submitted'),(9,'Approved','Request approved.'),(10,'Present','Present'),(11,'Absent','Absent'),(12,'MissingAttendanceRequest','MissingAttendanceRequest'),(13,'Saved','Saved'),(14,'Payment done','Payment done and transfered to employees'),(15,'Payment processed','Payment is processed but not transfered.'),(16,'Payment pending','Payment processing is not yet started.'),(17,'Payment on hold','Payment put on hold.'),(18,'Payment canceled','Payment canceled.'),(19,'Payment failed','Payment failed due to some technical reason.');

INSERT INTO `org_hierarchy` VALUES (1,0,0,'CEO',NULL,NULL,_binary '\0',1,_binary ''),(2,0,1,'CTO',NULL,NULL,_binary '\0',1,_binary ''),(3,0,1,'CFO',NULL,NULL,_binary '\0',1,_binary ''),(4,0,1,'COO',NULL,NULL,_binary '\0',1,_binary ''),(5,0,1,'CHRO',NULL,NULL,_binary '\0',1,_binary ''),(6,0,2,'DEVELOPMENT',NULL,NULL,_binary '',1,_binary ''),(7,0,2,'IT DEPERTMENT',NULL,NULL,_binary '',1,_binary ''),(8,0,6,'DELIVERY MANAGER',NULL,NULL,_binary '\0',1,_binary ''),(9,0,8,'PROJECT MANAGER',NULL,NULL,_binary '\0',1,_binary ''),(10,0,9,'REPORTING MANAGER',NULL,NULL,_binary '\0',1,_binary ''),(11,0,2,'ARCHITECT TEAM',NULL,NULL,_binary '',1,_binary ''),(12,0,11,'ARCHITECT',NULL,NULL,_binary '\0',1,_binary ''),(13,0,11,'TECHNICAL ARCHITECT',NULL,NULL,_binary '\0',1,_binary ''),(14,0,11,'SOLUTION ARCHITECT',NULL,NULL,_binary '\0',1,_binary ''),(15,0,3,'TAX DEPERTMENT',NULL,NULL,_binary '',1,_binary ''),(16,0,3,'LEGAL DEPARTMENT',NULL,NULL,_binary '',1,_binary ''),(17,0,4,'OPERATION DEPARTMENT',NULL,NULL,_binary '',1,_binary ''),(18,0,5,'HR DERPARTMENT',NULL,NULL,_binary '',1,_binary ''),(19,0,18,'HR MANGAER',NULL,NULL,_binary '\0',1,_binary ''),(20,0,19,'HR',NULL,NULL,_binary '\0',1,_binary ''),(21,0,19,'SR. HR',NULL,NULL,_binary '\0',1,_binary ''),(22,0,10,'TEAM LEAD',NULL,NULL,_binary '\0',1,_binary ''),(23,0,10,'TEST LEAD',NULL,NULL,_binary '\0',1,_binary ''),(24,0,22,'ASSOCIATE',NULL,NULL,_binary '\0',1,_binary ''),(25,0,22,'SOFTWARE DEVELOPER',NULL,NULL,_binary '\0',1,_binary ''),(26,0,22,'SR. SOFTWARE DEVELOPER',NULL,NULL,_binary '\0',1,_binary ''),(27,0,23,'TESTER',NULL,NULL,_binary '\0',1,_binary ''),(28,0,23,'SR. TESTER',NULL,NULL,_binary '\0',1,_binary ''),(29,0,7,'NETWORK TEAM',NULL,NULL,_binary '\0',1,_binary '');

INSERT INTO `ptax_slab` VALUES (1,'WEST BENGAL',0,10000,0,0),(2,'WEST BENGAL',10001,15000,110,0),(3,'WEST BENGAL',15001,25000,130,0),(4,'WEST BENGAL',25001,40000,150,0),(5,'WEST BENGAL',40001,0,200,0),(6,'TELANGANA',0,15000,0,0),(7,'TELANGANA',15001,20000,150,0),(8,'TELANGANA',20001,0,200,0);

INSERT INTO `rolesandmenu` VALUES ('Administration',NULL,NULL,'fa-brands fa-fort-awesome',NULL,NULL,1),('Dashboard','Administration','administration/dashboard','fa-solid fa-gauge-high',NULL,NULL,2),('Employees','Administration','administration/employees','fa-solid fa-id-card',NULL,NULL,4),('Client','Administration','administration/clients','fa-regular fa-building',NULL,NULL,5),('Bills','Administration','administration/billdetail','fa-solid fa-file-invoice',NULL,NULL,7),('Home',NULL,NULL,'fa-brands fa-fort-awesome',NULL,NULL,8),('Profile','Manage','manage/profile','fa-solid fa-user',NULL,NULL,9),('Roles','Settings','org/roles','fa-regular fa-object-group',NULL,NULL,10),('Generate','Administration','administration/generatebill','fa-regular fa-file-pdf',NULL,NULL,11),('Attendence','Manage','manage/attendance','fa-regular fa-id-badge',NULL,NULL,12),('Manage',NULL,NULL,'fa-solid fa-house-laptop',NULL,NULL,13),('Declaration','Finance & Tax','accounts/declaration','fa-regular fa-handshake',NULL,NULL,14),('Salary','Finance & Tax','accounts/salary','fa-solid fa-money-bill-1',NULL,NULL,15),('Preferences','Finance & Tax','accounts/preferences','fa-regular fa-object-group',NULL,NULL,17),('Dashboard','Home','home/dashboard','fa-solid fa-gauge-high',NULL,NULL,18),('Accounts',NULL,NULL,'fa-solid fa-hand-holding-dollar',NULL,NULL,19),('Timesheet','Manage','manage/timesheet','fa-regular fa-calendar-days',NULL,NULL,20),('Holidays','Manage','manage/planholidays','fa-regular fa-calendar-minus',NULL,NULL,21),('My Drive','Home','common/documents','fa-solid fa-user',NULL,NULL,22),('Tax','Finance & Tax','org/taxcalculation','fa-solid fa-money-bill-wave',NULL,NULL,23),('Request','Team','team/request','fa-regular fa-hand-point-right',NULL,NULL,24),('Team',NULL,NULL,'fa-solid fa-users-viewfinder',NULL,NULL,25),('Notification','Team','team/notification','fa-regular fa-bell',NULL,NULL,26),('Settings',NULL,NULL,'fa-solid fa-gear',NULL,NULL,28),('Leave','Settings','leave/leavesetting','fa-regular fa-calendar-days',NULL,NULL,29),('Payroll','Settings','org/payrollsettings','fa-solid fa-money-bill-transfer',NULL,NULL,30),('Email','Settings','org/emailsetting','fa-regular fa-envelope',NULL,NULL,31),('Project','Team','project/projectlist','fa-regular fa-lightbulb',NULL,NULL,32),('Company','Settings','org/companysettings','fa-solid fa-gear',NULL,NULL,33),('Apply','Manage','manage/leave','fa-regular fa-calendar-days',NULL,NULL,34),('Template','Administration','administration/emailtemplate','fa-regular fa-envelope',NULL,NULL,35),('Tax Regime','Finance & Tax','accounts/taxregime','fa-solid fa-sack-dollar',NULL,NULL,36),('Configuration',NULL,NULL,'fa-solid fa-satellite-dish',NULL,NULL,37),('Offer Letter','Configuration','config/offerletter','fa-regular fa-file-lines',NULL,NULL,38),('Annexure','Configuration','config/annexure','fa-regular fa-file',NULL,NULL,39),('Manage Activity','Configuration','config/manageactivity','fa-solid fa-sliders',NULL,NULL,40),('Products','Configuration','config/products','fa-brands fa-product-hunt',NULL,NULL,41),('Service Request','Team','team/servicerequest','fa-regular fa-hand',NULL,NULL,42),('Shift','Configuration','config/manageshift','fa-solid fa-bars',NULL,NULL,43),('WorkFlow','Configuration','config/workflow','fa-solid fa-list',NULL,NULL,44),('Objective','Performance','team/objectives','fa-solid fa-tags',NULL,NULL,45),('Run Payroll','Accounts','config/processingpayroll','fa-solid fa-gears',NULL,NULL,46),('Apprisal Review','Team','team/apprisalreview','fa-solid fa-street-view',NULL,NULL,47),('Appraisal','Performance','team/appraisal','fa-solid fa-street-view',NULL,NULL,48),('Pay & Incomes','Accounts','accounts/employeedeclarationlist','fa-solid fa-users',NULL,NULL,49),('Finance & Tax',NULL,NULL,'fa-solid fa-sack-dollar',NULL,NULL,50),('Performance',NULL,NULL,'fa-solid fa-award',NULL,NULL,51),('Cron Job','Administration','administration/cronjob','fa-solid fa-list-check',NULL,NULL,52);

INSERT INTO `salary_components` VALUES ('BS','BASIC SALARY','',_binary '\0',_binary '\0',2,1,0,0,0,0,0,'[]','40%[CTC]',0,0,_binary '',_binary '\0',0,'',0,_binary '\0',_binary '\0',_binary '',_binary '','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('BT','BONUS TETSTING','BONUS TETSTING',_binary '\0',_binary '\0',0,0,0,0,0,0,0,'[]',NULL,0,0,_binary '\0',_binary '',2,NULL,0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',0,0),('CA','CONVEYANCE ALLOWANCE','',_binary '\0',_binary '\0',2,1,0,0,0,0,0,'[]','',0,0,_binary '',_binary '\0',0,'',0,_binary '\0',_binary '\0',_binary '',_binary '','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('CRA','CAR RUNNING ALLOWANCE','',_binary '',_binary '\0',6,1,0,21600,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'10(14)(I)',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('DA','DEFERRED ANNURITY','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('DPP','DONATIONS TO POLITICAL PARTIES','',_binary '',_binary '',2,1,0,-1,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80GGC',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('DPSPD','DEDUCTION WITH RESPECT TO PERSON SUFFERING FROM PHYSICAL DISABILITY','',_binary '',_binary '',2,0,0,125000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80U',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('ECI','EMPLOYER CONTRIBUTION TOWARDS INSURANCE','',_binary '\0',_binary '',7,1,0,0,0,0,0,'[]','',0,0,_binary '',_binary '\0',0,'',0,_binary '\0',_binary '\0',_binary '',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('EPER-PF','EMPLOYER CONTRIBUTION TOWARDS PF','',_binary '\0',_binary '\0',2,1,0,0,0,0,0,'[]','21600',0,0,_binary '\0',_binary '\0',0,'',0,_binary '\0',_binary '\0',_binary '',_binary '','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('EPER-SI','EMPLOYER STATE INSURANCE','EMPLOYER STATE INSURANCE',_binary '\0',_binary '\0',6,1,0,0,0,0,0,'[]','0',0,0,_binary '\0',_binary '\0',0,NULL,0,_binary '\0',_binary '\0',_binary '\0',_binary '','2024-05-11 00:00:00','2024-06-28 00:00:00',0,0),('EPF','EMPLOYEES PROVIDENT FUND','',_binary '',_binary '',2,1,0,0,0,0,0,'[]','21600',0,0,_binary '',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('ESI','EMPLOYEES\' STATE INSURANCE','EMPLOYEES\' STATE INSURANCE',_binary '\0',_binary '\0',6,1,0,0,0,0,0,'[]','0',0,0,_binary '',_binary '\0',0,NULL,0,_binary '\0',_binary '\0',_binary '\0',_binary '','2024-05-11 00:00:00','2024-06-28 00:00:00',0,0),('ETF','EDUCATION TUTION FEES','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('GRA','EMPLOYER CONTRIBUTION TOWARDS GRATUITY','',_binary '\0',_binary '',7,1,0,0,0,0,0,'[]','',0,0,_binary '',_binary '\0',0,'',0,_binary '\0',_binary '\0',_binary '',_binary '','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('HL','HOUSING LOAN (PRINCIPLE)','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('HLIFTHO','HOME LOAN INTEREST FOR FIRST TIME HOME OWNERS','',_binary '',_binary '',2,0,0,50000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80EE',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('HP','HOUSING PROPERTY','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('HRA','HOUSE RENT ALLOWANCE','',_binary '\0',_binary '\0',2,1,0,0,0,0,0,'[]','40%[BASIC]',0,0,_binary '',_binary '\0',0,'',0,_binary '\0',_binary '\0',_binary '',_binary '','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('ILAEV','INTEREST ON LOAN FOR ACQUIRING ELECTRIC VEHICLE','',_binary '',_binary '',2,0,0,150000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80EEB',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('ILARHP','INTEREST ON LOAN FOR ACQUIRING RESIDENTIAL HOUSE PROPERTY','',_binary '',_binary '',2,0,0,150000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80EEA',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('LIP','LIFE INSURANCE POLICY','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('LTA','TRAVEL REIMBURSSEMENT','',_binary '',_binary '\0',6,1,0,30000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'10(5)',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('MA','MEDICAL ALLOWANCE','',_binary '\0',_binary '\0',2,1,0,0,0,0,0,'[]','',0,0,_binary '',_binary '\0',0,'',0,_binary '\0',_binary '\0',_binary '',_binary '','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('MEHR','MEDICAL EXPENDITURE FOR A HANDICAPPED RELATIVE','',_binary '',_binary '',2,0,0,125000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80DD',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('MES','MEDICAL EXPENDITURE ON SELF OR DEPENDENT','',_binary '',_binary '',2,0,0,100000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80DDB',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('MF','MUTUAL FUND','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('MFP','MUTUAL FUND PENSION','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80CCC',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('MIP','MEDICAL INSURANCE PREMIUM','',_binary '',_binary '',2,0,0,50000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80D',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('NNB','NABARD NOTIFIED BONDS','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('NPSEC','NPS EMPLOYEE CONTRIBUTION','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80CCD(1)',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('NPSEMP','NPS EMPLOYEE CONTRIBUTION','',_binary '',_binary '',2,0,0,50000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80CCD(1B)',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('NPSEMPR','NPS EMPLOYER CONTRIBUTION','',_binary '',_binary '',2,0,0,-1,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80CCD(2)',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('NSC','NATIONAL SAVING CERTIFICATE','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('NT','NEW TEST COMPONENT','NEW TEST COMPONENT',_binary '\0',_binary '',2,1,0,50000,0,0,0,'[]',NULL,0,0,_binary '\0',_binary '\0',0,'18C',500000,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',0,0),('OTHER','OTHER','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('PHC','PREVENTIVE HEALTH CHECK-UP','',_binary '',_binary '',2,0,0,5000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80D',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('PMIP','PARENTS MEDICAL INSURANCE PREMIUM','',_binary '',_binary '',2,0,0,50000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80D',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('POTD','POST OFFICE TIME DEPOSITE','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('PPF','PUBLIC PROVIDENT FUND','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('PPHC','PARENTS PREVENTIVE HEALTH CHECK-UP','',_binary '',_binary '',2,0,0,5000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80D',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('PTAX','PROFESSIONAL TAX','PROFESSIONAL TAX',_binary '\0',_binary '',2,1,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'16(III)',2500,_binary '\0',_binary '\0',_binary '\0',_binary '','2023-06-03 06:03:17','2024-06-28 00:00:00',0,0),('RB','ROYALTY PN BOOK','',_binary '',_binary '',2,0,0,300000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80QQB',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('RIHEL','REPAYMENT OF INTEREST ON HIGHER EDUCATION LOAN','',_binary '',_binary '',2,0,0,-1,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80E',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('RP','ROYALTY ON PATENT','',_binary '',_binary '',2,0,0,300000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80RRB',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('SA','SUPER ANNUATION','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('SAIT','SAVINGS ACCOUNT INTEREST TAX','',_binary '',_binary '',2,0,0,10000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80TTA',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('SAIT(SC)','SAVINGS ACCOUNT INTEREST TAX (SENIOR CITIZENS)','',_binary '',_binary '',2,0,0,50000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80TTB',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('SBFD','SCHEDULE BANK FD','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('SCSS','SENIOR CITIZEN SAVING SCHEME','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('SHA','SHIFT ALLOWANCE','',_binary '\0',_binary '\0',2,1,0,0,0,0,0,'[]','',0,0,_binary '',_binary '\0',0,'',0,_binary '\0',_binary '\0',_binary '',_binary '','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('SPA','SPECIAL ALLOWANCE','',_binary '',_binary '\0',2,1,0,0,0,0,0,'[]','[AUTO]',0,0,_binary '',_binary '\0',0,'',0,_binary '\0',_binary '\0',_binary '\0',_binary '','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('SSY','SUKANYA SAMRIDDHI YOJNA','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('STD','STANDARD DEDUCTION','STANDARD DEDUCTION',_binary '\0',_binary '',2,1,0,50000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'16(IA)',50000,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',0,0),('TIA','TELEPHONE AND INTERNET ALLOWANCE','',_binary '',_binary '\0',6,1,0,18000,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'10(14)(I)',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('ULIP','UNITED LINKED INSURANCE PLAN','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0),('VPF','VOLUNTARY PROVIDENT FUND','',_binary '',_binary '',2,0,0,0,0,0,0,'[]','5000',0,0,_binary '\0',_binary '\0',0,'80C',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0','2023-06-03 06:03:17','2024-06-28 00:00:00',1,0);

INSERT INTO `surcharge_slab` VALUES (1,5000000,10000000,10),(2,10000001,20000000,15),(3,20000001,50000000,25),(4,50000001,0,37);

INSERT INTO `tax_age_group` VALUES (1,10,60),(2,60,80),(3,80,110);

INSERT INTO `tax_regime` VALUES (1,1,10,60,0,250000,0,0),(2,1,10,60,250001,500000,5,12500),(3,1,10,60,500001,1000000,20,112500),(4,1,10,60,1000001,0,30,412500),(5,1,60,80,0,300000,0,0),(6,1,60,80,300001,500000,5,10000),(7,1,60,80,500001,1000000,20,110000),(8,1,60,80,1000001,0,30,410000),(9,1,80,110,0,500000,0,0),(10,1,80,110,500001,1000000,20,100000),(11,1,80,110,1000001,0,30,400000),(27,2,10,60,0,250000,0,0),(28,2,10,60,250001,500000,5,12500),(29,2,10,60,500001,750000,10,37500),(30,2,10,60,750001,1000000,15,75000),(31,2,10,60,1000001,1250000,20,125000),(32,2,10,60,1250001,1500000,25,187500),(33,2,10,60,1500001,0,30,637500),(34,2,60,80,0,250000,0,0),(35,2,60,80,250001,500000,5,12500),(36,2,60,80,500001,750000,10,37500),(37,2,60,80,750001,1000000,15,75000),(38,2,60,80,1000001,1250000,20,125000),(39,2,60,80,1250001,1500000,25,187500),(40,2,60,80,1500001,0,30,637500),(41,2,80,110,0,250000,0,0),(42,2,80,110,250001,500000,5,12500),(43,2,80,110,500001,750000,10,37500),(44,2,80,110,750001,1000000,15,75000),(45,2,80,110,1000001,1250000,20,125000),(46,2,80,110,1250001,1500000,25,187500),(47,2,80,110,1500001,0,30,637500);

INSERT INTO `tax_regime_desc` VALUES (1,'Old Tax Regime','Income Tax slabs & Rates as Per Old Regime',_binary ''),(2,'New Tax Regime','Income Tax slabs & Rates as Per NewRegime',_binary '\0');

INSERT INTO `tax_sections` VALUES (5,'ExemptionDeclaration','[\"80C\", \"80CCC\", \"80CCD(1)\"]',_binary '',150000),(6,'OtherDeclaration','[\"80CCD(1B)\", \"80CCB(2)\", \"80D\", \"80DD\", \"80DDB\", \"80E\", \"80EE\", \"80EEA\", \"80EEB\", \"80G\", \"80GGA\", \"80GGC\", \"80QQB\", \"80RRB\", \"80TTA\", \"80TTB\", \"80U\"]',_binary '\0',0),(7,'TaxSavingAlloance','[\"17(2)(VIII)\", \"10(5)\", \"10(14)(I)\"]',_binary '\0',0),(8,'Section16TaxExemption','[\"16(III)\", \"16(IA)\"]',_binary '\0',0);

INSERT INTO `usertypedetail` VALUES (1,'Admin',NULL);

INSERT INTO `work_shifts` VALUES (1,1,9,'code','Regular shift','Application for regular employee',_binary '',_binary '',_binary '',_binary '',_binary '',_binary '',_binary '\0',6,'2023-01-01 04:30:00','2023-12-31 04:30:00','09:00',480,60,2,'2023-11-26 00:00:00',1,'2023-02-03 00:00:00');

INSERT INTO `leave_plans_type` VALUES (1,'SL','SICK LEAVE','SICK LEAVE',12,_binary '',_binary '',_binary '',_binary '\0',NULL,NULL,_binary '\0',_binary '\0','[]','{\"leaveDetail\": {\"LeaveLimit\": 12, \"LeavePlanId\": 1, \"LeaveDetailId\": 1, \"ExtraLeaveLimit\": 0, \"LeavePlanTypeId\": 1, \"IsLeaveDaysLimit\": true, \"CanApplyExtraLeave\": false, \"IsNoLeaveAfterDate\": false, \"CanCompoffCreditedByManager\": false, \"LeaveNotAllocatedIfJoinAfter\": 0, \"CanCompoffAllocatedAutomatically\": false}, \"leaveAccrual\": {\"LeavePlanId\": 1, \"LeaveAccrualId\": 1, \"LeavePlanTypeId\": 1, \"AfterHowManyDays\": 0.0, \"ToNearestFullDay\": false, \"ToNearestHalfDay\": false, \"ToPreviousHalfDay\": false, \"CanApplyEntireLeave\": false, \"RoundOffLeaveBalance\": true, \"CanApplyForFutureDate\": false, \"NoOfDaysForExtraLeave\": 0.0, \"IsAccrueIfOnOtherLeave\": false, \"ToNextAvailableFullDay\": false, \"ToNextAvailableHalfDay\": false, \"AccrualDaysAfterJoining\": 0.0, \"IsNoLeaveOnNoticePeriod\": false, \"IsLeavesProratedOnNotice\": true, \"LeaveDistributionSequence\": \"1\", \"ExitMonthLeaveDistribution\": [], \"IsLeaveAccruedPatternAvail\": true, \"IsNotAllowProratedOnNotice\": false, \"IsAccrualStartsAfterJoining\": false, \"DoesLeaveExpireAfterSomeTime\": false, \"IsAccrueIfHavingLeaveBalance\": false, \"IsVaryOnProbationOrExprience\": false, \"LeaveDistributionAppliedFrom\": 1.0, \"AccrualDaysAfterProbationEnds\": 0.0, \"JoiningMonthLeaveDistribution\": [], \"IsImpactedOnWorkDaysEveryMonth\": false, \"IsLeavesProratedForJoinigMonth\": true, \"IsExtraLeaveBeyondAccruedBalance\": false, \"NotAllowIfAlreadyOnLeaveMoreThan\": 0.0, \"AllowOnlyIfAccrueBalanceIsAlleast\": 0.0, \"IsAccrualStartsAfterProbationEnds\": false, \"HolidayAsAbsentIfAttendaceLessThen\": 0.0, \"IsNoExtraLeaveBeyondAccruedBalance\": false, \"WeekOffAsAbsentIfAttendaceLessThen\": 0.0}, \"leaveApproval\": {\"LeavePlanId\": 5, \"ApprovalLevels\": 0, \"LeaveApprovalId\": 1, \"LeavePlanTypeId\": 6, \"ApprovalWorkFlowId\": 1, \"IsLeaveRequiredApproval\": true, \"IsRequiredAllLevelApproval\": false, \"IsPauseForApprovalNotification\": false, \"IsReportingManageIsDefaultForAction\": false, \"CanHigherRankPersonsIsAvailForAction\": false}, \"managementLeave\": {\"LeavePlanId\": 1, \"LeavePlanTypeId\": 1, \"LeaveManagementId\": 1, \"CanManagerAwardCausalLeave\": false}, \"leaveApplyDetail\": {\"LeavePlanId\": 1, \"LeavePlanTypeId\": 1, \"NoOfDaysExceeded\": 0, \"IsAllowForHalfDay\": true, \"LeaveApplyDetailId\": 1, \"RuleForLeaveInNotice\": [], \"ApplyPriorBeforeLeaveDate\": -1, \"ProofRequiredIfDaysExceeds\": false, \"CurrentLeaveRequiredComments\": false, \"BackDateLeaveApplyNotBeyondDays\": -1, \"RestrictBackDateLeaveApplyAfter\": 0, \"EmployeeCanSeeAndApplyCurrentPlanLeave\": true}, \"leavePlanRestriction\": {\"LeavePlanId\": 1, \"AvailableLeaves\": 0.0, \"LeavePlanTypeId\": 1, \"DaysAfterJoining\": 0.0, \"DaysAfterProbation\": 30.0, \"DependentPlanTypeId\": 0.0, \"AssociatedPlanTypeId\": 0.0, \"CanApplyAfterJoining\": false, \"LeaveLimitInProbation\": 0.0, \"CanApplyAfterProbation\": true, \"LeavePlanRestrictionId\": 1.0, \"IsCheckOtherPlanTypeBalance\": false, \"RestrictFromDayOfEveryMonth\": 0.0, \"NoOfTimesNoticePeriodExtended\": 0.0, \"IsCurrentPlanDepnedsOnOtherPlan\": false, \"CanManageOverrideLeaveRestriction\": false, \"MinLeaveToApplyDependsOnAvailable\": 0.0, \"GapBetweenTwoConsicutiveLeaveDates\": 0.0, \"IsAvailRestrictedLeavesInProbation\": false, \"IsLeaveInNoticeExtendsNoticePeriod\": false, \"LimitOfMaximumLeavesInCalendarYear\": 12.0, \"LimitOfMaximumLeavesInEntireTenure\": 0.0, \"LimitOfMaximumLeavesInCalendarMonth\": 10.0}, \"leaveEndYearProcessing\": {\"LeavePlanId\": 1, \"ExpiredAfter\": 0.0, \"LeavePlanTypeId\": 1, \"AllConvertedToPaid\": false, \"ResetBalanceToZero\": false, \"FixedPayNCarryForward\": [], \"CarryForwardToNextYear\": false, \"DoestCarryForwardExpired\": false, \"LeaveEndYearProcessingId\": 1, \"PayNCarryForwardDefineType\": \"\", \"PayNCarryForwardForPercent\": false, \"PercentagePayNCarryForward\": [], \"DeductFromSalaryOnYearChange\": false, \"CarryForwordFirstNPayRemaning\": false, \"DoesExpiryLeaveRemainUnchange\": false, \"PayFirstNCarryForwordRemaning\": false, \"AllLeavesCarryForwardToNextYear\": false, \"IsLeaveBalanceExpiredOnEndOfYear\": true}, \"leaveHolidaysAndWeekoff\": {\"LeavePlanId\": 1, \"LeavePlanTypeId\": 1, \"ConsiderLeaveIfNumOfDays\": 0.0, \"IfLeaveLieBetweenWeekOff\": false, \"LeaveHolidaysAndWeekOffId\": 1, \"ConsiderLeaveIfIncludeDays\": 0.0, \"IfHolidayIsRightAfterLeave\": false, \"IfHolidayIsRightBeforLeave\": false, \"IfWeekOffIsRightAfterLeave\": false, \"IfWeekOffIsRightBeforLeave\": false, \"IfLeaveLieBetweenTwoHolidays\": false, \"AdJoiningHolidayIsConsiderAsLeave\": false, \"AdjoiningWeekOffIsConsiderAsLeave\": false, \"IfHolidayIsRightBeforeAfterOrInBetween\": false, \"IfWeekOffIsRightBeforeAfterOrInBetween\": false}}',1,NULL,'2023-09-04 20:41:36',NULL),(2,'CL','CAUSAL LEAVE','CAUSAL LEAVE',10,_binary '',_binary '\0',_binary '\0',_binary '\0',NULL,NULL,_binary '\0',_binary '\0','[]','{\"leaveDetail\": {\"LeaveLimit\": 10, \"LeavePlanId\": 1, \"LeaveDetailId\": 2, \"ExtraLeaveLimit\": 0, \"LeavePlanTypeId\": 2, \"IsLeaveDaysLimit\": true, \"CanApplyExtraLeave\": false, \"IsNoLeaveAfterDate\": false, \"CanCompoffCreditedByManager\": false, \"LeaveNotAllocatedIfJoinAfter\": 0, \"CanCompoffAllocatedAutomatically\": false}, \"leaveAccrual\": {\"LeavePlanId\": 1, \"LeaveAccrualId\": 2, \"LeavePlanTypeId\": 2, \"AfterHowManyDays\": 0.0, \"ToNearestFullDay\": false, \"ToNearestHalfDay\": false, \"ToPreviousHalfDay\": false, \"CanApplyEntireLeave\": false, \"RoundOffLeaveBalance\": true, \"CanApplyForFutureDate\": false, \"NoOfDaysForExtraLeave\": 0.0, \"IsAccrueIfOnOtherLeave\": false, \"ToNextAvailableFullDay\": false, \"ToNextAvailableHalfDay\": false, \"AccrualDaysAfterJoining\": 0.0, \"IsNoLeaveOnNoticePeriod\": false, \"IsLeavesProratedOnNotice\": true, \"LeaveDistributionSequence\": \"1\", \"ExitMonthLeaveDistribution\": [], \"IsLeaveAccruedPatternAvail\": true, \"IsNotAllowProratedOnNotice\": false, \"IsAccrualStartsAfterJoining\": false, \"DoesLeaveExpireAfterSomeTime\": false, \"IsAccrueIfHavingLeaveBalance\": false, \"IsVaryOnProbationOrExprience\": false, \"LeaveDistributionAppliedFrom\": 1.0, \"AccrualDaysAfterProbationEnds\": 0.0, \"JoiningMonthLeaveDistribution\": [], \"IsImpactedOnWorkDaysEveryMonth\": false, \"IsLeavesProratedForJoinigMonth\": true, \"IsExtraLeaveBeyondAccruedBalance\": false, \"NotAllowIfAlreadyOnLeaveMoreThan\": 0.0, \"AllowOnlyIfAccrueBalanceIsAlleast\": 0.0, \"IsAccrualStartsAfterProbationEnds\": false, \"HolidayAsAbsentIfAttendaceLessThen\": 0.0, \"IsNoExtraLeaveBeyondAccruedBalance\": false, \"WeekOffAsAbsentIfAttendaceLessThen\": 0.0}, \"leaveApproval\": {\"LeavePlanId\": 5, \"ApprovalLevels\": 0, \"LeaveApprovalId\": 2, \"LeavePlanTypeId\": 7, \"ApprovalWorkFlowId\": 1, \"IsLeaveRequiredApproval\": true, \"IsRequiredAllLevelApproval\": false, \"IsPauseForApprovalNotification\": false, \"IsReportingManageIsDefaultForAction\": false, \"CanHigherRankPersonsIsAvailForAction\": false}, \"managementLeave\": {\"LeavePlanId\": 1, \"LeavePlanTypeId\": 2, \"LeaveManagementId\": 2, \"CanManagerAwardCausalLeave\": false}, \"leaveApplyDetail\": {\"LeavePlanId\": 1, \"LeavePlanTypeId\": 2, \"NoOfDaysExceeded\": 0, \"IsAllowForHalfDay\": true, \"LeaveApplyDetailId\": 2, \"RuleForLeaveInNotice\": [], \"ApplyPriorBeforeLeaveDate\": -1, \"ProofRequiredIfDaysExceeds\": false, \"CurrentLeaveRequiredComments\": false, \"BackDateLeaveApplyNotBeyondDays\": -1, \"RestrictBackDateLeaveApplyAfter\": 0, \"EmployeeCanSeeAndApplyCurrentPlanLeave\": true}, \"leavePlanRestriction\": {\"LeavePlanId\": 1, \"AvailableLeaves\": 0.0, \"LeavePlanTypeId\": 2, \"DaysAfterJoining\": 0.0, \"DaysAfterProbation\": 0.0, \"DependentPlanTypeId\": 0.0, \"AssociatedPlanTypeId\": 0.0, \"CanApplyAfterJoining\": false, \"LeaveLimitInProbation\": 0.0, \"CanApplyAfterProbation\": true, \"LeavePlanRestrictionId\": 2.0, \"IsCheckOtherPlanTypeBalance\": false, \"RestrictFromDayOfEveryMonth\": 0.0, \"NoOfTimesNoticePeriodExtended\": 0.0, \"IsCurrentPlanDepnedsOnOtherPlan\": false, \"CanManageOverrideLeaveRestriction\": false, \"MinLeaveToApplyDependsOnAvailable\": 0.0, \"GapBetweenTwoConsicutiveLeaveDates\": 0.0, \"IsAvailRestrictedLeavesInProbation\": false, \"IsLeaveInNoticeExtendsNoticePeriod\": false, \"LimitOfMaximumLeavesInCalendarYear\": 10.0, \"LimitOfMaximumLeavesInEntireTenure\": 0.0, \"LimitOfMaximumLeavesInCalendarMonth\": 2.0}, \"leaveEndYearProcessing\": {\"LeavePlanId\": 1, \"ExpiredAfter\": 0.0, \"LeavePlanTypeId\": 2, \"AllConvertedToPaid\": false, \"ResetBalanceToZero\": false, \"FixedPayNCarryForward\": [], \"CarryForwardToNextYear\": false, \"DoestCarryForwardExpired\": false, \"LeaveEndYearProcessingId\": 2, \"PayNCarryForwardDefineType\": \"\", \"PayNCarryForwardForPercent\": false, \"PercentagePayNCarryForward\": [], \"DeductFromSalaryOnYearChange\": false, \"CarryForwordFirstNPayRemaning\": false, \"DoesExpiryLeaveRemainUnchange\": false, \"PayFirstNCarryForwordRemaning\": false, \"AllLeavesCarryForwardToNextYear\": false, \"IsLeaveBalanceExpiredOnEndOfYear\": false}, \"leaveHolidaysAndWeekoff\": {\"LeavePlanId\": 1, \"LeavePlanTypeId\": 2, \"ConsiderLeaveIfNumOfDays\": 0.0, \"IfLeaveLieBetweenWeekOff\": false, \"LeaveHolidaysAndWeekOffId\": 2, \"ConsiderLeaveIfIncludeDays\": 0.0, \"IfHolidayIsRightAfterLeave\": false, \"IfHolidayIsRightBeforLeave\": false, \"IfWeekOffIsRightAfterLeave\": false, \"IfWeekOffIsRightBeforLeave\": false, \"IfLeaveLieBetweenTwoHolidays\": false, \"AdJoiningHolidayIsConsiderAsLeave\": false, \"AdjoiningWeekOffIsConsiderAsLeave\": false, \"IfHolidayIsRightBeforeAfterOrInBetween\": false, \"IfWeekOffIsRightBeforeAfterOrInBetween\": false}}',1,NULL,'2023-09-04 20:41:54',NULL),(3,'EL','EARN LEAVE','EARN LEAVE',0,_binary '',_binary '\0',_binary '\0',_binary '\0',NULL,NULL,_binary '\0',_binary '\0','[]','{\"leaveDetail\": {\"LeaveLimit\": 0, \"LeavePlanId\": 1, \"LeaveDetailId\": 0, \"ExtraLeaveLimit\": 0, \"LeavePlanTypeId\": 3, \"IsLeaveDaysLimit\": false, \"CanApplyExtraLeave\": false, \"IsNoLeaveAfterDate\": false, \"CanCompoffCreditedByManager\": false, \"LeaveNotAllocatedIfJoinAfter\": 0, \"CanCompoffAllocatedAutomatically\": false}, \"leaveAccrual\": {\"LeavePlanId\": 1, \"LeaveAccrualId\": 3, \"LeavePlanTypeId\": 3, \"AfterHowManyDays\": 0.0, \"ToNearestFullDay\": false, \"ToNearestHalfDay\": false, \"ToPreviousHalfDay\": false, \"CanApplyEntireLeave\": false, \"RoundOffLeaveBalance\": true, \"CanApplyForFutureDate\": false, \"NoOfDaysForExtraLeave\": 0.0, \"IsAccrueIfOnOtherLeave\": false, \"ToNextAvailableFullDay\": false, \"ToNextAvailableHalfDay\": false, \"AccrualDaysAfterJoining\": 0.0, \"IsNoLeaveOnNoticePeriod\": false, \"IsLeavesProratedOnNotice\": true, \"LeaveDistributionSequence\": \"1\", \"ExitMonthLeaveDistribution\": [], \"IsLeaveAccruedPatternAvail\": true, \"IsNotAllowProratedOnNotice\": false, \"IsAccrualStartsAfterJoining\": false, \"DoesLeaveExpireAfterSomeTime\": false, \"IsAccrueIfHavingLeaveBalance\": false, \"IsVaryOnProbationOrExprience\": false, \"LeaveDistributionAppliedFrom\": 1.0, \"AccrualDaysAfterProbationEnds\": 0.0, \"JoiningMonthLeaveDistribution\": [], \"IsImpactedOnWorkDaysEveryMonth\": false, \"IsLeavesProratedForJoinigMonth\": true, \"IsExtraLeaveBeyondAccruedBalance\": false, \"NotAllowIfAlreadyOnLeaveMoreThan\": 0.0, \"AllowOnlyIfAccrueBalanceIsAlleast\": 0.0, \"IsAccrualStartsAfterProbationEnds\": false, \"HolidayAsAbsentIfAttendaceLessThen\": 0.0, \"IsNoExtraLeaveBeyondAccruedBalance\": false, \"WeekOffAsAbsentIfAttendaceLessThen\": 0.0}, \"leaveApproval\": {\"LeavePlanId\": 1, \"ApprovalLevels\": 0, \"LeaveApprovalId\": 0, \"LeavePlanTypeId\": 3, \"ApprovalWorkFlowId\": 0, \"IsLeaveRequiredApproval\": false, \"IsRequiredAllLevelApproval\": false, \"IsPauseForApprovalNotification\": false, \"IsReportingManageIsDefaultForAction\": false, \"CanHigherRankPersonsIsAvailForAction\": false}, \"managementLeave\": null, \"leaveApplyDetail\": {\"LeavePlanId\": 1, \"LeavePlanTypeId\": 3, \"NoOfDaysExceeded\": 0, \"IsAllowForHalfDay\": false, \"LeaveApplyDetailId\": 0, \"RuleForLeaveInNotice\": null, \"ApplyPriorBeforeLeaveDate\": 0, \"ProofRequiredIfDaysExceeds\": false, \"CurrentLeaveRequiredComments\": false, \"BackDateLeaveApplyNotBeyondDays\": 0, \"RestrictBackDateLeaveApplyAfter\": 0, \"EmployeeCanSeeAndApplyCurrentPlanLeave\": true}, \"leavePlanRestriction\": {\"LeavePlanId\": 1, \"AvailableLeaves\": 0.0, \"LeavePlanTypeId\": 3, \"DaysAfterJoining\": 0.0, \"DaysAfterProbation\": 0.0, \"DependentPlanTypeId\": 0.0, \"AssociatedPlanTypeId\": 0.0, \"CanApplyAfterJoining\": false, \"LeaveLimitInProbation\": 0.0, \"CanApplyAfterProbation\": true, \"LeavePlanRestrictionId\": 0.0, \"IsCheckOtherPlanTypeBalance\": false, \"RestrictFromDayOfEveryMonth\": 0.0, \"NoOfTimesNoticePeriodExtended\": 0.0, \"IsCurrentPlanDepnedsOnOtherPlan\": false, \"CanManageOverrideLeaveRestriction\": false, \"MinLeaveToApplyDependsOnAvailable\": 0.0, \"GapBetweenTwoConsicutiveLeaveDates\": 0.0, \"IsAvailRestrictedLeavesInProbation\": false, \"IsLeaveInNoticeExtendsNoticePeriod\": false, \"LimitOfMaximumLeavesInCalendarYear\": 0.0, \"LimitOfMaximumLeavesInEntireTenure\": 0.0, \"LimitOfMaximumLeavesInCalendarMonth\": 0.0}, \"leaveEndYearProcessing\": {\"LeavePlanId\": 1, \"ExpiredAfter\": 0.0, \"LeavePlanTypeId\": 3, \"AllConvertedToPaid\": false, \"ResetBalanceToZero\": false, \"FixedPayNCarryForward\": null, \"CarryForwardToNextYear\": false, \"DoestCarryForwardExpired\": false, \"LeaveEndYearProcessingId\": 0, \"PayNCarryForwardDefineType\": null, \"PayNCarryForwardForPercent\": false, \"PercentagePayNCarryForward\": null, \"DeductFromSalaryOnYearChange\": false, \"CarryForwordFirstNPayRemaning\": false, \"DoesExpiryLeaveRemainUnchange\": false, \"PayFirstNCarryForwordRemaning\": false, \"AllLeavesCarryForwardToNextYear\": false, \"IsLeaveBalanceExpiredOnEndOfYear\": false}, \"leaveHolidaysAndWeekoff\": {\"LeavePlanId\": 1, \"LeavePlanTypeId\": 3, \"ConsiderLeaveIfNumOfDays\": 0.0, \"IfLeaveLieBetweenWeekOff\": false, \"LeaveHolidaysAndWeekOffId\": 0, \"ConsiderLeaveIfIncludeDays\": 0.0, \"IfHolidayIsRightAfterLeave\": false, \"IfHolidayIsRightBeforLeave\": false, \"IfWeekOffIsRightAfterLeave\": false, \"IfWeekOffIsRightBeforLeave\": false, \"IfLeaveLieBetweenTwoHolidays\": false, \"AdJoiningHolidayIsConsiderAsLeave\": false, \"AdjoiningWeekOffIsConsiderAsLeave\": false, \"IfHolidayIsRightBeforeAfterOrInBetween\": false, \"IfWeekOffIsRightBeforeAfterOrInBetween\": false}}',1,NULL,'2023-10-13 13:01:09',NULL),(4,'CO','COMP OFF','COMP OFF OR COMPENSATION OFF IS THE TYPE OF LEAVE GRANTED BY AN EMPLOYER WHEN AN EMPLOYEE WORKS ON A HOLIDAY OR FOR AN EXTRA WORKING HOUR OVER AND ABOVE HIS/HER NORMAL WORKING SHIFT. ',0,_binary '\0',_binary '\0',_binary '\0',_binary '\0',NULL,NULL,_binary '\0',_binary '\0','[]','{\"leaveDetail\": {\"LeaveLimit\": 0, \"LeavePlanId\": 1, \"LeaveDetailId\": 0, \"ExtraLeaveLimit\": 0, \"LeavePlanTypeId\": 4, \"IsLeaveDaysLimit\": false, \"CanApplyExtraLeave\": false, \"IsNoLeaveAfterDate\": false, \"CanCompoffCreditedByManager\": false, \"LeaveNotAllocatedIfJoinAfter\": 0, \"CanCompoffAllocatedAutomatically\": false}, \"leaveAccrual\": {\"LeavePlanId\": 1, \"LeaveAccrualId\": 0, \"LeavePlanTypeId\": 4, \"AfterHowManyDays\": 0.0, \"ToNearestFullDay\": false, \"ToNearestHalfDay\": false, \"ToPreviousHalfDay\": false, \"CanApplyEntireLeave\": true, \"RoundOffLeaveBalance\": true, \"CanApplyForFutureDate\": false, \"NoOfDaysForExtraLeave\": 0.0, \"IsAccrueIfOnOtherLeave\": false, \"ToNextAvailableFullDay\": false, \"ToNextAvailableHalfDay\": false, \"AccrualDaysAfterJoining\": 0.0, \"IsNoLeaveOnNoticePeriod\": false, \"IsLeavesProratedOnNotice\": true, \"LeaveDistributionSequence\": null, \"ExitMonthLeaveDistribution\": null, \"IsLeaveAccruedPatternAvail\": false, \"IsNotAllowProratedOnNotice\": false, \"IsAccrualStartsAfterJoining\": false, \"DoesLeaveExpireAfterSomeTime\": false, \"IsAccrueIfHavingLeaveBalance\": false, \"IsVaryOnProbationOrExprience\": false, \"LeaveDistributionAppliedFrom\": 0.0, \"AccrualDaysAfterProbationEnds\": 0.0, \"JoiningMonthLeaveDistribution\": null, \"IsImpactedOnWorkDaysEveryMonth\": false, \"IsLeavesProratedForJoinigMonth\": true, \"IsExtraLeaveBeyondAccruedBalance\": false, \"NotAllowIfAlreadyOnLeaveMoreThan\": 0.0, \"AllowOnlyIfAccrueBalanceIsAlleast\": 0.0, \"IsAccrualStartsAfterProbationEnds\": false, \"HolidayAsAbsentIfAttendaceLessThen\": 0.0, \"IsNoExtraLeaveBeyondAccruedBalance\": false, \"WeekOffAsAbsentIfAttendaceLessThen\": 0.0}, \"leaveApproval\": {\"LeavePlanId\": 1, \"ApprovalLevels\": 0, \"LeaveApprovalId\": 0, \"LeavePlanTypeId\": 4, \"ApprovalWorkFlowId\": 0, \"IsLeaveRequiredApproval\": false, \"IsRequiredAllLevelApproval\": false, \"IsPauseForApprovalNotification\": false, \"IsReportingManageIsDefaultForAction\": false, \"CanHigherRankPersonsIsAvailForAction\": false}, \"managementLeave\": null, \"leaveApplyDetail\": {\"LeavePlanId\": 1, \"LeavePlanTypeId\": 4, \"NoOfDaysExceeded\": 0, \"IsAllowForHalfDay\": false, \"LeaveApplyDetailId\": 0, \"RuleForLeaveInNotice\": null, \"ApplyPriorBeforeLeaveDate\": 0, \"ProofRequiredIfDaysExceeds\": false, \"CurrentLeaveRequiredComments\": false, \"BackDateLeaveApplyNotBeyondDays\": 0, \"RestrictBackDateLeaveApplyAfter\": 0, \"EmployeeCanSeeAndApplyCurrentPlanLeave\": true}, \"leavePlanRestriction\": {\"LeavePlanId\": 1, \"AvailableLeaves\": 0.0, \"LeavePlanTypeId\": 4, \"DaysAfterJoining\": 0.0, \"DaysAfterProbation\": 0.0, \"DependentPlanTypeId\": 0.0, \"AssociatedPlanTypeId\": 0.0, \"CanApplyAfterJoining\": false, \"LeaveLimitInProbation\": 0.0, \"CanApplyAfterProbation\": true, \"LeavePlanRestrictionId\": 0.0, \"IsCheckOtherPlanTypeBalance\": false, \"RestrictFromDayOfEveryMonth\": 0.0, \"NoOfTimesNoticePeriodExtended\": 0.0, \"IsCurrentPlanDepnedsOnOtherPlan\": false, \"CanManageOverrideLeaveRestriction\": false, \"MinLeaveToApplyDependsOnAvailable\": 0.0, \"GapBetweenTwoConsicutiveLeaveDates\": 0.0, \"IsAvailRestrictedLeavesInProbation\": false, \"IsLeaveInNoticeExtendsNoticePeriod\": false, \"LimitOfMaximumLeavesInCalendarYear\": 0.0, \"LimitOfMaximumLeavesInEntireTenure\": 0.0, \"LimitOfMaximumLeavesInCalendarMonth\": 0.0}, \"leaveEndYearProcessing\": {\"LeavePlanId\": 1, \"ExpiredAfter\": 0.0, \"LeavePlanTypeId\": 4, \"AllConvertedToPaid\": false, \"ResetBalanceToZero\": false, \"FixedPayNCarryForward\": null, \"CarryForwardToNextYear\": false, \"DoestCarryForwardExpired\": false, \"LeaveEndYearProcessingId\": 0, \"PayNCarryForwardDefineType\": null, \"PayNCarryForwardForPercent\": false, \"PercentagePayNCarryForward\": null, \"DeductFromSalaryOnYearChange\": false, \"CarryForwordFirstNPayRemaning\": false, \"DoesExpiryLeaveRemainUnchange\": false, \"PayFirstNCarryForwordRemaning\": false, \"AllLeavesCarryForwardToNextYear\": false, \"IsLeaveBalanceExpiredOnEndOfYear\": false}, \"leaveHolidaysAndWeekoff\": {\"LeavePlanId\": 1, \"LeavePlanTypeId\": 4, \"ConsiderLeaveIfNumOfDays\": 0.0, \"IfLeaveLieBetweenWeekOff\": false, \"LeaveHolidaysAndWeekOffId\": 0, \"ConsiderLeaveIfIncludeDays\": 0.0, \"IfHolidayIsRightAfterLeave\": false, \"IfHolidayIsRightBeforLeave\": false, \"IfWeekOffIsRightAfterLeave\": false, \"IfWeekOffIsRightBeforLeave\": false, \"IfLeaveLieBetweenTwoHolidays\": false, \"AdJoiningHolidayIsConsiderAsLeave\": false, \"AdjoiningWeekOffIsConsiderAsLeave\": false, \"IfHolidayIsRightBeforeAfterOrInBetween\": false, \"IfWeekOffIsRightBeforeAfterOrInBetween\": false}}',1,NULL,'2024-03-24 05:00:21',NULL);

INSERT INTO `role_accessibility_mapping` VALUES (1,2,2,0),(2,2,4,0),(3,2,5,0),(4,2,7,0),(5,2,9,1),(6,2,10,0),(7,2,11,0),(8,2,12,1),(9,2,14,1),(10,2,15,1),(11,2,17,1),(12,2,18,1),(13,2,20,1),(14,2,21,1),(15,2,22,1),(16,2,23,1),(17,2,24,0),(18,2,26,1),(19,2,29,0),(20,2,30,0),(21,2,31,0),(22,2,32,1),(23,2,33,0),(24,2,34,1),(25,2,35,0),(26,2,36,0),(27,2,38,0),(28,2,39,0),(29,2,40,0),(30,2,41,1),(31,2,42,1),(32,2,43,1),(33,2,44,0),(34,2,45,1),(35,2,46,0),(36,2,47,0),(37,2,48,0),(38,2,49,0),(39,2,52,0),(40,2,1,1),(41,2,8,1),(42,2,13,1),(43,2,19,1),(44,2,25,1),(45,2,28,1),(46,2,37,1),(47,2,50,1),(48,2,51,1),(49,3,2,0),(50,3,4,0),(51,3,5,0),(52,3,7,0),(53,3,9,1),(54,3,10,0),(55,3,11,0),(56,3,12,1),(57,3,14,1),(58,3,15,1),(59,3,17,1),(60,3,18,1),(61,3,20,1),(62,3,21,1),(63,3,22,1),(64,3,23,1),(65,3,24,1),(66,3,26,1),(67,3,29,0),(68,3,30,0),(69,3,31,0),(70,3,32,1),(71,3,33,0),(72,3,34,1),(73,3,35,0),(74,3,36,0),(75,3,38,0),(76,3,39,0),(77,3,40,0),(78,3,41,1),(79,3,42,1),(80,3,43,1),(81,3,44,0),(82,3,45,1),(83,3,46,0),(84,3,47,1),(85,3,48,0),(86,3,49,0),(87,3,52,0),(88,3,1,1),(89,3,8,1),(90,3,13,1),(91,3,19,1),(92,3,25,1),(93,3,28,1),(94,3,37,1),(95,3,50,1),(96,3,51,1);

INSERT INTO `pf_esi_setting` VALUES (1,1,_binary '',_binary '\0',_binary '\0',_binary '\0',_binary '\0',0,_binary '\0',_binary '\0',_binary '\0',_binary '',21000,0.75,3.25,_binary '\0',_binary '\0',_binary '\0',_binary '\0',_binary '\0',_binary '\0',_binary '\0',_binary '\0',_binary '\0','2024-05-11 00:00:00',NULL,1,NULL);

INSERT INTO `project` VALUES (1,'UNASSIGNED PROJECT','Unassigned Project','2023-12-31 18:30:00',NULL,_binary '\0',0,0,NULL,NULL,NULL,NULL,NULL,1,0,_binary '',0,_binary '',0,_binary '',0,_binary '',1,1,'2024-06-05 06:53:36','2024-06-05 06:53:36');

INSERT INTO `performance_objective` VALUES (1,'CODE QUALITY AND MAINTAINABILITY','Evaluate the consistency, readability, and maintainability of your code. Consider how well you follow coding standards and best practices.Evaluate the consistency, readability, and maintainability of your code. Consider how well you follow coding standards and best practices.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:22:01',NULL),(2,'PROBLEM-SOLVING AND DEBUGGING','Assess your ability to identify, analyze, and resolve issues in a timely and effective manner.Assess your ability to identify, analyze, and resolve issues in a timely and effective manner.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:23:24',NULL),(3,'COLLABORATION AND COMMUNICATION','Measure how well you collaborate with team members, share knowledge, and communicate progress and issues.Measure how well you collaborate with team members, share knowledge, and communicate progress and issues.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:23:42',NULL),(4,'EFFICIENCY AND PRODUCTIVITY','Consider your ability to complete tasks on time and manage your workload effectively.Consider your ability to complete tasks on time and manage your workload effectively.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:24:07',NULL),(5,'CONTINUOUS LEARNING AND IMPROVEMENT','Evaluate your commitment to staying updated with new technologies, tools, and best practices in software development. Evaluate your commitment to staying updated with new technologies, tools, and best practices in software development.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:24:27',NULL),(6,'TEST COVERAGE AND EFFECTIVENESS','Assess the comprehensiveness and effectiveness of your test cases in identifying defects.Assess the comprehensiveness and effectiveness of your test cases in identifying defects.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:24:58',NULL),(7,'BUG IDENTIFICATION AND REPORTING','Evaluate your ability to accurately identify, document, and report bugs.Evaluate your ability to accurately identify, document, and report bugs.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:25:15',NULL),(8,'COLLABORATION AND COMMUNICATION','Measure your collaboration with developers and other team members to ensure issues are resolved efficiently.Measure your collaboration with developers and other team members to ensure issues are resolved efficiently.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:25:35',NULL),(9,'AUTOMATION SKILLS','Assess your ability to create and maintain automated tests to enhance testing efficiency. Assess your ability to create and maintain automated tests to enhance testing efficiency.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:25:54',NULL),(10,'ATTENTION TO DETAIL','Evaluate your thoroughness in testing and ensuring that all aspects of the application are functioning correctly. Evaluate your thoroughness in testing and ensuring that all aspects of the application are functioning correctly.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:26:13',NULL),(11,'LEADERSHIP AND TEAM MANAGEMENT','Assess your ability to lead and manage your team effectively, providing guidance and support. Assess your ability to lead and manage your team effectively, providing guidance and support.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:26:36',NULL),(12,'STRATEGIC PLANNING AND EXECUTION','Evaluate your ability to develop and execute strategic plans that align with organizational goals.Evaluate your ability to develop and execute strategic plans that align with organizational goals.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:27:06',NULL),(13,'COMMUNICATION AND INTERPERSONAL SKILLS','Measure your communication skills, including how well you convey information and interact with employees at all levels. Measure your communication skills, including how well you convey information and interact with employees at all levels.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:27:23',NULL),(14,'DECISION-MAKING AND PROBLEM-SOLVING','Assess your ability to make informed decisions and solve problems efficiently. Assess your ability to make informed decisions and solve problems efficiently.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:27:43',NULL),(15,'PERFORMANCE AND PRODUCTIVITY MANAGEMENT','Evaluate your effectiveness in monitoring and enhancing the performance and productivity of your team. Evaluate your effectiveness in monitoring and enhancing the performance and productivity of your team.',_binary '\0',_binary '\0',1,0.00,100.00,_binary '',1,1,NULL,'2024-06-15 04:28:04',NULL);

Set Global event_scheduler = ON;

Create event daily_job
ON SCHEDULE
	EVERY 1 DAY
    STARTS (TIMESTAMP(CURRENT_DATE) + INTERVAL 0 DAY + INTERVAL 7 HOUR + INTERVAL 50 MINUTE)
DO
	call sp_add_next_attendance_records_by_job_ins();